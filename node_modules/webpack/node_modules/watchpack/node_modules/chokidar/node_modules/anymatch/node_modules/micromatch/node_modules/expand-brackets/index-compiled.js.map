{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * expand-brackets <https://github.com/jonschlinkert/expand-brackets>\n *\n * Copyright (c) 2015 Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar isPosixBracket = require('is-posix-bracket');\n\n/**\n * POSIX character classes\n */\n\nvar POSIX = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E',\n  punct: '-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word:  'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9',\n};\n\n/**\n * Expose `brackets`\n */\n\nmodule.exports = brackets;\n\nfunction brackets(str) {\n  if (!isPosixBracket(str)) {\n    return str;\n  }\n\n  var negated = false;\n  if (str.indexOf('[^') !== -1) {\n    negated = true;\n    str = str.split('[^').join('[');\n  }\n  if (str.indexOf('[!') !== -1) {\n    negated = true;\n    str = str.split('[!').join('[');\n  }\n\n  var a = str.split('[');\n  var b = str.split(']');\n  var imbalanced = a.length !== b.length;\n\n  var parts = str.split(/(?::\\]\\[:|\\[?\\[:|:\\]\\]?)/);\n  var len = parts.length, i = 0;\n  var end = '', beg = '';\n  var res = [];\n\n  // start at the end (innermost) first\n  while (len--) {\n    var inner = parts[i++];\n    if (inner === '^[!' || inner === '[!') {\n      inner = '';\n      negated = true;\n    }\n\n    var prefix = negated ? '^' : '';\n    var ch = POSIX[inner];\n\n    if (ch) {\n      res.push('[' + prefix + ch + ']');\n    } else if (inner) {\n      if (/^\\[?\\w-\\w\\]?$/.test(inner)) {\n        if (i === parts.length) {\n          res.push('[' + prefix + inner);\n        } else if (i === 1) {\n          res.push(prefix + inner + ']');\n        } else {\n          res.push(prefix + inner);\n        }\n      } else {\n        if (i === 1) {\n          beg += inner;\n        } else if (i === parts.length) {\n          end += inner;\n        } else {\n          res.push('[' + prefix + inner + ']');\n        }\n      }\n    }\n  }\n\n  var result = res.join('|');\n  var rlen = res.length || 1;\n  if (rlen > 1) {\n    result = '(?:' + result + ')';\n    rlen = 1;\n  }\n  if (beg) {\n    rlen++;\n    if (beg.charAt(0) === '[') {\n      if (imbalanced) {\n        beg = '\\\\[' + beg.slice(1);\n      } else {\n        beg += ']';\n      }\n    }\n    result = beg + result;\n  }\n  if (end) {\n    rlen++;\n    if (end.slice(-1) === ']') {\n      if (imbalanced) {\n        end = end.slice(0, end.length - 1) + '\\\\]';\n      } else {\n        end = '[' + end;\n      }\n    }\n    result += end;\n  }\n\n  if (rlen > 1) {\n    result = result.split('][').join(']|[');\n    if (result.indexOf('|') !== -1 && !/\\(\\?/.test(result)) {\n      result = '(?:' + result + ')';\n    }\n  }\n\n  result = result.replace(/\\[+=|=\\]+/g, '\\\\b');\n  return result;\n}\n\nbrackets.makeRe = function(pattern) {\n  try {\n    return new RegExp(brackets(pattern));\n  } catch (err) {}\n};\n\nbrackets.isMatch = function(str, pattern) {\n  try {\n    return brackets.makeRe(pattern).test(str);\n  } catch (err) {\n    return false;\n  }\n};\n\nbrackets.match = function(arr, pattern) {\n  var len = arr.length, i = 0;\n  var res = arr.slice();\n\n  var re = brackets.makeRe(pattern);\n  while (i < len) {\n    var ele = arr[i++];\n    if (!re.test(ele)) {\n      continue;\n    }\n    res.splice(i, 1);\n  }\n  return res;\n};\n"]}