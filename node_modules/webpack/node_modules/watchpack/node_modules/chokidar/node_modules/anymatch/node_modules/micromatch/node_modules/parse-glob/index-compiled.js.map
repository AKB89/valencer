{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAOA;;AAEA,IAAI,SAAS,QAAQ,SAAR,CAAb;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,UAAU,QAAQ,YAAR,CAAd;AACA,IAAI,UAAU,QAAQ,YAAR,CAAd;;;;;;AAMA,IAAI,QAAQ,OAAO,OAAP,CAAe,KAAf,GAAuB,EAAnC;;;;;;;;;;;;;;AAcA,OAAO,OAAP,GAAiB,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AACxC,MAAI,MAAM,cAAN,CAAqB,IAArB,CAAJ,EAAgC;AAC9B,WAAO,MAAM,IAAN,CAAP;AACD;;AAED,MAAI,MAAM,EAAV;AACA,MAAI,IAAJ,GAAW,IAAX;AACA,MAAI,EAAJ,GAAS,EAAT;;;AAGA,SAAO,OAAO,IAAP,CAAP;;AAEA,MAAI,SAAS,SAAS,IAAT,CAAb;AACA,MAAI,EAAJ,CAAO,IAAP,GAAc,OAAO,MAArB;;AAEA,MAAI,IAAJ,GAAW,OAAO,IAAlB;AACA,MAAI,IAAJ,GAAW,OAAO,IAAlB;AACA,MAAI,OAAO,YAAY,IAAZ,CAAiB,IAAjB,CAAX;;AAEA,MAAI,IAAJ,GAAW,EAAX;AACA,MAAI,IAAJ,CAAS,OAAT,GAAmB,EAAnB;AACA,MAAI,IAAJ,CAAS,QAAT,GAAoB,KAAK,CAAL,KAAW,EAA/B;AACA,MAAI,IAAJ,CAAS,OAAT,GAAmB,KAAK,KAAL,CAAW,IAAI,IAAJ,CAAS,QAApB,EAA8B,IAA9B,CAAmC,EAAnC,KAA0C,EAA7D;AACA,MAAI,WAAW,CAAC,IAAI,IAAJ,CAAS,QAAT,IAAqB,EAAtB,EAA0B,KAA1B,CAAgC,GAAhC,KAAwC,EAAvD;AACA,MAAI,IAAJ,CAAS,QAAT,GAAoB,SAAS,CAAT,KAAe,EAAnC;AACA,MAAI,IAAJ,CAAS,OAAT,GAAmB,SAAS,KAAT,CAAe,CAAf,EAAkB,IAAlB,CAAuB,GAAvB,KAA+B,EAAlD;AACA,MAAI,IAAJ,CAAS,GAAT,GAAe,EAAf;;AAEA,MAAI,OAAO,IAAI,IAAJ,CAAS,OAAhB,KAA4B,CAAC,IAAI,IAAJ,CAAS,QAA1C,EAAoD;AAClD,QAAI,CAAC,MAAM,IAAN,CAAW,IAAI,IAAf,CAAL,EAA2B;AACzB,UAAI,IAAJ,CAAS,QAAT,GAAoB,IAAI,IAAxB;AACD;AACD,QAAI,IAAJ,CAAS,OAAT,GAAmB,IAAI,IAAvB;AACD;;AAED,MAAI,KAAK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAvB,IAA4B,CAAC,IAAI,EAAJ,CAAO,QAAxC,EAAkD;AAChD,QAAI,IAAJ,CAAS,OAAT,GAAmB,EAAnB;AACA,QAAI,IAAJ,CAAS,QAAT,GAAoB,IAAI,IAAxB;AACD;;AAED,MAAI,MAAM,IAAI,IAAJ,CAAS,QAAT,CAAkB,OAAlB,CAA0B,GAA1B,CAAV;AACA,MAAI,QAAQ,CAAC,CAAb,EAAgB;AACd,QAAI,IAAJ,CAAS,QAAT,GAAoB,IAAI,IAAJ,CAAS,QAAT,CAAkB,KAAlB,CAAwB,CAAxB,EAA2B,GAA3B,CAApB;AACA,QAAI,IAAJ,CAAS,OAAT,GAAmB,IAAI,IAAJ,CAAS,QAAT,CAAkB,KAAlB,CAAwB,GAAxB,CAAnB;AACD;;AAED,MAAI,IAAI,IAAJ,CAAS,OAAT,CAAiB,MAAjB,CAAwB,CAAxB,MAA+B,GAAnC,EAAwC;AACtC,QAAI,OAAO,IAAI,IAAJ,CAAS,OAAT,CAAiB,KAAjB,CAAuB,GAAvB,CAAX;AACA,QAAI,IAAJ,CAAS,GAAT,GAAe,KAAK,KAAK,MAAL,GAAc,CAAnB,CAAf;AACD;;;AAGD,MAAI,IAAJ,GAAW,SAAS,IAAI,IAAb,CAAX;AACA,MAAI,IAAJ,CAAS,OAAT,GAAmB,SAAS,IAAI,IAAJ,CAAS,OAAlB,CAAnB;AACA,MAAI,IAAJ,CAAS,QAAT,GAAoB,SAAS,IAAI,IAAJ,CAAS,QAAlB,CAApB;AACA,MAAI,IAAJ,CAAS,QAAT,GAAoB,SAAS,IAAI,IAAJ,CAAS,QAAlB,CAApB;AACA,MAAI,IAAJ,CAAS,OAAT,GAAmB,SAAS,IAAI,IAAJ,CAAS,OAAlB,CAAnB;;;AAGA,MAAI,KAAM,QAAQ,IAAI,EAAJ,CAAO,IAAzB;AACA,MAAI,EAAJ,CAAO,OAAP,GAAkB,QAAQ,KAAK,MAAL,CAAY,CAAZ,MAAmB,GAA7C;AACA,MAAI,EAAJ,CAAO,OAAP,GAAkB,QAAQ,QAAQ,IAAR,CAA1B;AACA,MAAI,EAAJ,CAAO,MAAP,GAAkB,IAAI,EAAJ,EAAQ,IAAR,EAAc,GAAd,CAAlB;AACA,MAAI,EAAJ,CAAO,QAAP,GAAkB,IAAI,EAAJ,EAAQ,IAAR,EAAc,IAAd,CAAlB;AACA,MAAI,EAAJ,CAAO,QAAP,GAAkB,IAAI,EAAJ,EAAQ,IAAR,EAAc,IAAd,CAAlB;AACA,MAAI,EAAJ,CAAO,OAAP,GAAkB,QAAQ,IAAI,IAAJ,CAAS,QAAjB,KAA8B,QAAQ,IAAI,IAAJ,CAAS,QAAjB,CAAhD;AACA,MAAI,EAAJ,CAAO,MAAP,GAAkB,OAAO,IAAI,IAAJ,CAAS,OAAhB,CAAlB;AACA,SAAQ,MAAM,IAAN,IAAc,GAAtB;AACD,CApED;;;;;;;;;;AA8EA,SAAS,MAAT,CAAgB,IAAhB,EAAsB;AACpB,MAAI,KAAK,OAAL,CAAa,IAAb,MAAuB,CAAC,CAA5B,EAA+B;AAC7B,WAAO,IAAP;AACD;AACD,MAAI,KAAK,MAAL,CAAY,CAAZ,MAAmB,GAAnB,IAA0B,KAAK,MAAL,CAAY,CAAZ,MAAmB,GAAjD,EAAsD;AACpD,WAAO,IAAP;AACD;AACD,SAAO,KAAP;AACD;;;;;;;;;;AAUD,SAAS,GAAT,CAAa,EAAb,EAAiB,IAAjB,EAAuB,EAAvB,EAA2B;AACzB,SAAO,MAAM,KAAK,OAAL,CAAa,EAAb,MAAqB,CAAC,CAAnC;AACD;;;;;;AAMD,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACnB,MAAI,KAAK,6CAAT;AACA,SAAO,IAAI,OAAJ,CAAY,EAAZ,EAAgB,UAAU,MAAV,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,QAAlC,EAA4C;AACjE,QAAI,QAAQ,UAAU,MAAV,IAAoB,QAAhC;AACA,QAAI,CAAC,KAAL,EAAY;AAAE,aAAO,MAAP;AAAgB;AAC9B,WAAO,OAAO,KAAP,CAAa,KAAb,EAAoB,IAApB,CAAyB,IAAI,KAAJ,CAAzB,CAAP;AACD,GAJM,CAAP;AAKD;;AAED,SAAS,GAAT,CAAa,GAAb,EAAkB;AAChB,QAAM,IAAI,KAAJ,CAAU,GAAV,EAAe,IAAf,CAAoB,WAApB,CAAN;AACA,QAAM,IAAI,KAAJ,CAAU,GAAV,EAAe,IAAf,CAAoB,SAApB,CAAN;AACA,SAAO,GAAP;AACD;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,QAAM,IAAI,KAAJ,CAAU,WAAV,EAAuB,IAAvB,CAA4B,GAA5B,CAAN;AACA,QAAM,IAAI,KAAJ,CAAU,SAAV,EAAqB,IAArB,CAA0B,GAA1B,CAAN;AACA,SAAO,GAAP;AACD","file":"index-compiled.js","sourcesContent":["/*!\n * parse-glob <https://github.com/jonschlinkert/parse-glob>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isGlob = require('is-glob');\nvar findBase = require('glob-base');\nvar extglob = require('is-extglob');\nvar dotfile = require('is-dotfile');\n\n/**\n * Expose `cache`\n */\n\nvar cache = module.exports.cache = {};\n\n/**\n * Parse a glob pattern into tokens.\n *\n * When no paths or '**' are in the glob, we use a\n * different strategy for parsing the filename, since\n * file names can contain braces and other difficult\n * patterns. such as:\n *\n *  - `*.{a,b}`\n *  - `(**|*.js)`\n */\n\nmodule.exports = function parseGlob(glob) {\n  if (cache.hasOwnProperty(glob)) {\n    return cache[glob];\n  }\n\n  var tok = {};\n  tok.orig = glob;\n  tok.is = {};\n\n  // unescape dots and slashes in braces/brackets\n  glob = escape(glob);\n\n  var parsed = findBase(glob);\n  tok.is.glob = parsed.isGlob;\n\n  tok.glob = parsed.glob;\n  tok.base = parsed.base;\n  var segs = /([^\\/]*)$/.exec(glob);\n\n  tok.path = {};\n  tok.path.dirname = '';\n  tok.path.basename = segs[1] || '';\n  tok.path.dirname = glob.split(tok.path.basename).join('') || '';\n  var basename = (tok.path.basename || '').split('.') || '';\n  tok.path.filename = basename[0] || '';\n  tok.path.extname = basename.slice(1).join('.') || '';\n  tok.path.ext = '';\n\n  if (isGlob(tok.path.dirname) && !tok.path.basename) {\n    if (!/\\/$/.test(tok.glob)) {\n      tok.path.basename = tok.glob;\n    }\n    tok.path.dirname = tok.base;\n  }\n\n  if (glob.indexOf('/') === -1 && !tok.is.globstar) {\n    tok.path.dirname = '';\n    tok.path.basename = tok.orig;\n  }\n\n  var dot = tok.path.basename.indexOf('.');\n  if (dot !== -1) {\n    tok.path.filename = tok.path.basename.slice(0, dot);\n    tok.path.extname = tok.path.basename.slice(dot);\n  }\n\n  if (tok.path.extname.charAt(0) === '.') {\n    var exts = tok.path.extname.split('.');\n    tok.path.ext = exts[exts.length - 1];\n  }\n\n  // unescape dots and slashes in braces/brackets\n  tok.glob = unescape(tok.glob);\n  tok.path.dirname = unescape(tok.path.dirname);\n  tok.path.basename = unescape(tok.path.basename);\n  tok.path.filename = unescape(tok.path.filename);\n  tok.path.extname = unescape(tok.path.extname);\n\n  // Booleans\n  var is = (glob && tok.is.glob);\n  tok.is.negated  = glob && glob.charAt(0) === '!';\n  tok.is.extglob  = glob && extglob(glob);\n  tok.is.braces   = has(is, glob, '{');\n  tok.is.brackets = has(is, glob, '[:');\n  tok.is.globstar = has(is, glob, '**');\n  tok.is.dotfile  = dotfile(tok.path.basename) || dotfile(tok.path.filename);\n  tok.is.dotdir   = dotdir(tok.path.dirname);\n  return (cache[glob] = tok);\n}\n\n/**\n * Returns true if the glob matches dot-directories.\n *\n * @param  {Object} `tok` The tokens object\n * @param  {Object} `path` The path object\n * @return {Object}\n */\n\nfunction dotdir(base) {\n  if (base.indexOf('/.') !== -1) {\n    return true;\n  }\n  if (base.charAt(0) === '.' && base.charAt(1) !== '/') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns true if the pattern has the given `ch`aracter(s)\n *\n * @param  {Object} `glob` The glob pattern.\n * @param  {Object} `ch` The character to test for\n * @return {Object}\n */\n\nfunction has(is, glob, ch) {\n  return is && glob.indexOf(ch) !== -1;\n}\n\n/**\n * Escape/unescape utils\n */\n\nfunction escape(str) {\n  var re = /\\{([^{}]*?)}|\\(([^()]*?)\\)|\\[([^\\[\\]]*?)\\]/g;\n  return str.replace(re, function (outter, braces, parens, brackets) {\n    var inner = braces || parens || brackets;\n    if (!inner) { return outter; }\n    return outter.split(inner).join(esc(inner));\n  });\n}\n\nfunction esc(str) {\n  str = str.split('/').join('__SLASH__');\n  str = str.split('.').join('__DOT__');\n  return str;\n}\n\nfunction unescape(str) {\n  str = str.split('__SLASH__').join('/');\n  str = str.split('__DOT__').join('.');\n  return str;\n}\n"]}