{"version":3,"sources":["testbinary.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,OAAP,GAAiB,UAAU,UAA3B;;AAEA,QAAQ,KAAR,GAAgB,4CAAhB;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,MAAM,QAAQ,QAAR,CAAV;AACA,IAAI,KAAK,QAAQ,eAAR,CAAT;AACA,IAAI,aAAa,QAAQ,sBAAR,CAAjB;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,SAAS,UAAT,CAAoB,GAApB,EAAyB,IAAzB,EAA+B,QAA/B,EAAyC;AACrC,QAAI,OAAO,EAAX;AACA,QAAI,UAAU,EAAd;AACA,QAAI,YAAY,QAAQ,QAAxB;AACA,QAAI,eAAe,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,gBAAhB,CAAX,CAAnB;AACA,QAAI,OAAO,WAAW,QAAX,CAAoB,YAApB,EAAkC,IAAI,IAAtC,CAAX;;AAEA,QAAI,gBAAgB,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAApB,EAA2B,GAA3B,CAApB;AACA,QAAI,KAAM,KAAK,OAAL,IAAgB,KAAK,OAAL,KAAiB,aAA3C;AACA,QAAI,EAAJ,EAAQ;AACJ,gBAAQ,OAAR,GAAkB,IAAlB;AACA,YAAI,QAAQ,QAAR,KAAqB,QAAzB,EAAmC;AAC/B,wBAAY,aAAZ;AACH,SAFD,MAEO,IAAI,QAAQ,QAAR,KAAqB,OAAzB,EAAkC;AACrC,wBAAY,QAAZ;AACH,SAFM,MAEA;AACH,wBAAY,IAAZ;AACH;AACD,YAAI,aAAa,KAAK,OAAL,CAAa,aAAb,CAAjB;AACA,YAAI,SAAS,KAAK,IAAL,CAAU,SAAV,EAAqB,MAArB,EAA6B,YAA7B,CAAb;AACA,aAAK,IAAL,CAAU,MAAV;AACA,aAAK,IAAL,CAAU,UAAV;AACA,YAAI,IAAJ,CAAS,UAAT,EAAoB,4BAA4B,SAA5B,GAAwC,GAAxC,GAA8C,KAAK,IAAL,CAAU,GAAV,CAA9C,GAA+D,GAAnF;AACA,WAAG,QAAH,CAAY,SAAZ,EAAuB,IAAvB,EAA6B,OAA7B,EAAsC,UAAS,GAAT,EAAc,MAAd,EAAsB,MAAtB,EAA8B;;AAEhE,gBAAI,GAAJ,EAAS;AACL,oBAAI,IAAI,MAAJ,KAAe,IAAf,IAAuB,IAAI,MAA3B,IAAqC,IAAI,MAAJ,CAAW,OAAX,CAAmB,KAAnB,IAA4B,CAAC,CAAtE,EAAyE;AACrE,2BAAO,UAAP;AACH;AACD,oBAAI,YAAY,OAAO,QAAP,EAAhB;AACA,oBAAI,IAAJ,CAAS,QAAT,EAAmB,SAAnB;AACA,oBAAI,+EAA+E,IAA/E,CAAoF,SAApF,CAAJ,EAAoG;AAChG,wBAAI,IAAJ,CAAS,OAAT,EAAkB,2CAAlB;AACA,2BAAO,UAAP;AACH;AACD,uBAAO,SAAS,GAAT,CAAP;AACH;AACD,mBAAO,UAAP;AACH,SAfD;AAgBA;AACH;AACD,QAAK,QAAQ,IAAR,IAAgB,KAAK,WAAtB,IACC,QAAQ,QAAR,IAAoB,KAAK,eAD9B,EACgD;AAC5C,YAAI,MAAM,gDAAV;AACA,eAAO,QAAQ,QAAR,GAAiB,GAAjB,GAAqB,QAAQ,IAA7B,GAAkC,GAAzC;AACA,eAAO,0BAAP;AACA,eAAO,KAAK,eAAL,GAAqB,GAArB,GAAyB,KAAK,WAA9B,GAA0C,GAAjD;AACA,YAAI,IAAJ,CAAS,UAAT,EAAqB,GAArB;AACA,eAAO,UAAP;AACH;AACD,SAAK,IAAL,CAAU,QAAV;AACA,SAAK,IAAL,CAAU,iBAAiB,cAAc,OAAd,CAAsB,KAAtB,EAA6B,MAA7B,CAAjB,GAAuD,OAAjE;AACA,QAAI,IAAJ,CAAS,UAAT,EAAoB,4BAA4B,SAA5B,GAAwC,GAAxC,GAA8C,KAAK,IAAL,CAAU,GAAV,CAA9C,GAA+D,GAAnF;AACA,OAAG,QAAH,CAAY,SAAZ,EAAuB,IAAvB,EAA6B,OAA7B,EAAsC,UAAS,GAAT,EAAc,MAAd,EAAsB,MAAtB,EAA8B;AAChE,YAAI,GAAJ,EAAS;AACL,mBAAO,SAAS,GAAT,EAAc,EAAE,QAAO,MAAT,EAAiB,QAAO,MAAxB,EAAd,CAAP;AACH;AACD,eAAO,UAAP;AACH,KALD;AAMH","file":"testbinary-compiled.js","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = testbinary;\n\nexports.usage = 'Tests that the binary.node can be required';\n\nvar fs = require('fs');\nvar path = require('path');\nvar log = require('npmlog');\nvar cp = require('child_process');\nvar versioning = require('./util/versioning.js');\nvar path = require('path');\n\nfunction testbinary(gyp, argv, callback) {\n    var args = [];\n    var options = {};\n    var shell_cmd = process.execPath;\n    var package_json = JSON.parse(fs.readFileSync('./package.json'));\n    var opts = versioning.evaluate(package_json, gyp.opts);\n    // ensure on windows that / are used for require path\n    var binary_module = opts.module.replace(/\\\\/g, '/');\n    var nw = (opts.runtime && opts.runtime === 'node-webkit');\n    if (nw) {\n        options.timeout = 5000;\n        if (process.platform === 'darwin') {\n            shell_cmd = 'node-webkit';\n        } else if (process.platform === 'win32') {\n            shell_cmd = 'nw.exe';\n        } else {\n            shell_cmd = 'nw';\n        }\n        var modulePath = path.resolve(binary_module);\n        var appDir = path.join(__dirname, 'util', 'nw-pre-gyp');\n        args.push(appDir);\n        args.push(modulePath);\n        log.info(\"validate\",\"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n        cp.execFile(shell_cmd, args, options, function(err, stdout, stderr) {\n            // check for normal timeout for node-webkit\n            if (err) {\n                if (err.killed === true && err.signal && err.signal.indexOf('SIG') > -1) {\n                    return callback();\n                }\n                var stderrLog = stderr.toString();\n                log.info('stderr', stderrLog);\n                if( /^\\s*Xlib:\\s*extension\\s*\"RANDR\"\\s*missing\\s*on\\s*display\\s*\":\\d+\\.\\d+\"\\.\\s*$/.test(stderrLog) ){\n                    log.info('RANDR', 'stderr contains only RANDR error, ignored');\n                    return callback();\n                }\n                return callback(err);\n            }\n            return callback();\n        });\n        return;\n    }\n    if ((process.arch != opts.target_arch) ||\n        (process.platform != opts.target_platform)) {\n        var msg = \"skipping validation since host platform/arch (\";\n        msg += process.platform+'/'+process.arch+\")\";\n        msg += \" does not match target (\";\n        msg += opts.target_platform+'/'+opts.target_arch+\")\";\n        log.info('validate', msg);\n        return callback();\n    }\n    args.push('--eval');\n    args.push(\"'require(\\\\'\" + binary_module.replace(/\\'/g, '\\\\\\'') +\"\\\\')'\");\n    log.info(\"validate\",\"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n    cp.execFile(shell_cmd, args, options, function(err, stdout, stderr) {\n        if (err) {\n            return callback(err, { stdout:stdout, stderr:stderr});\n        }\n        return callback();\n    });\n}\n"]}