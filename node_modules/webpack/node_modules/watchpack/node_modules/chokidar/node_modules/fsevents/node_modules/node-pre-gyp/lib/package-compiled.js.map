{"version":3,"sources":["package.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,OAAP,GAAiB,UAAU,QAA3B;;AAEA,QAAQ,KAAR,GAAgB,oEAAhB;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,MAAM,QAAQ,QAAR,CAAV;AACA,IAAI,aAAa,QAAQ,sBAAR,CAAjB;AACA,IAAI,QAAQ,QAAQ,IAAR,EAAc,iBAA1B;AACA,IAAI,cAAc,GAAG,MAAH,IAAa,KAAK,MAApC;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,SAAS,QAAT,CAAkB,GAAlB,EAAuB,IAAvB,EAA6B,QAA7B,EAAuC;AACnC,QAAI,OAAO,QAAQ,UAAR,EAAoB,IAA/B;AACA,QAAI,eAAe,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,gBAAhB,CAAX,CAAnB;AACA,QAAI,OAAO,WAAW,QAAX,CAAoB,YAApB,EAAkC,IAAI,IAAtC,CAAX;AACA,QAAI,OAAO,KAAK,WAAhB;AACA,QAAI,gBAAgB,KAAK,IAAL,CAAU,IAAV,EAAe,KAAK,WAAL,GAAmB,OAAlC,CAApB;AACA,gBAAY,aAAZ,EAA0B,UAAS,KAAT,EAAgB;AACtC,YAAI,CAAC,KAAL,EAAY;AACR,mBAAO,SAAS,IAAI,KAAJ,CAAU,4BAA4B,aAA5B,GAA4C,4CAAtD,CAAT,CAAP;AACH;AACD,YAAI,UAAU,KAAK,cAAnB;AACA,YAAI,cAAc,UAAS,KAAT,EAAgB;;;AAG9B,gBAAI,IAAJ,CAAS,SAAT,EAAmB,aAAa,MAAM,IAAtC;AACA,mBAAO,IAAP;AACH,SALD;AAMA,eAAO,KAAK,OAAL,CAAa,OAAb,CAAP,EAA6B,UAAS,GAAT,EAAc;AACvC,gBAAI,GAAJ,EAAS,MAAM,GAAN;AACT,iBAAK,IAAL,EAAW,EAAE,QAAQ,WAAV,EAAX,EACE,IADF,CACO,MAAM,OAAN,CADP,EAEE,EAFF,CAEK,OAFL,EAEc,UAAS,GAAT,EAAc;AACxB,oBAAI,GAAJ,EAAU,QAAQ,KAAR,CAAc,MAAI,aAAa,IAAjB,GAAsB,IAAtB,GAA6B,IAAI,OAA/C;AACV,uBAAO,SAAS,GAAT,CAAP;AACF,aALF,EAME,EANF,CAMK,OANL,EAMc,YAAW;AACrB,oBAAI,IAAJ,CAAS,SAAT,EAAmB,uBAAuB,OAAvB,GAAiC,GAApD;AACA,uBAAO,UAAP;AACF,aATF;AAUH,SAZD;AAaH,KAxBD;AAyBH","file":"package-compiled.js","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = _package;\n\nexports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';\n\nvar fs = require('fs');\nvar path = require('path');\nvar log = require('npmlog');\nvar versioning = require('./util/versioning.js');\nvar write = require('fs').createWriteStream;\nvar existsAsync = fs.exists || path.exists;\nvar mkdirp = require('mkdirp');\n\nfunction _package(gyp, argv, callback) {\n    var pack = require('tar-pack').pack;\n    var package_json = JSON.parse(fs.readFileSync('./package.json'));\n    var opts = versioning.evaluate(package_json, gyp.opts);\n    var from = opts.module_path;\n    var binary_module = path.join(from,opts.module_name + '.node');\n    existsAsync(binary_module,function(found) {\n        if (!found) {\n            return callback(new Error(\"Cannot package because \" + binary_module + \" missing: run `node-pre-gyp rebuild` first\"));\n        }\n        var tarball = opts.staged_tarball;\n        var filter_func = function(entry) {\n            // ensure directories are +x\n            // https://github.com/mapnik/node-mapnik/issues/262\n            log.info('package','packing ' + entry.path);\n            return true;\n        };\n        mkdirp(path.dirname(tarball),function(err) {\n            if (err) throw err;\n            pack(from, { filter: filter_func })\n             .pipe(write(tarball))\n             .on('error', function(err) {\n                if (err)  console.error('['+package_json.name+'] ' + err.message);\n                return callback(err);\n             })\n             .on('close', function() {\n                log.info('package','Binary staged at \"' + tarball + '\"');\n                return callback();\n             });\n        });\n    });\n}\n"]}