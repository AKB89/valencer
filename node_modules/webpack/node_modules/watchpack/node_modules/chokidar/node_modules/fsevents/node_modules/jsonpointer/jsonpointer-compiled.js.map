{"version":3,"sources":["jsonpointer.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,UAAS,GAAT,EAAc;AAC1B,SAAO,IAAI,OAAJ,CAAY,KAAZ,EAAmB,UAAS,CAAT,EAAY;AACpC,YAAQ,CAAR;AACE,WAAK,IAAL;AACE,eAAO,GAAP;AACF,WAAK,IAAL;AACE,eAAO,GAAP;AAJJ;AAMA,UAAM,IAAI,KAAJ,CAAU,2BAA2B,CAArC,CAAN;AACD,GARM,CAAP;AASD,CAVD;;AAYA,IAAI,WAAW,UAAS,GAAT,EAAc,OAAd,EAAuB,KAAvB,EAA8B;;AAE3C,MAAI,OAAO,QAAQ,QAAQ,KAAR,EAAR,CAAX;AACA,MAAG,CAAC,IAAI,cAAJ,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B,WAAO,IAAP;AACD;AACD,MAAG,QAAQ,MAAR,KAAmB,CAAtB,EAAyB;;AACvB,WAAO,SAAS,IAAI,IAAJ,CAAT,EAAoB,OAApB,EAA6B,KAA7B,CAAP;AACD;;AAED,MAAG,OAAO,KAAP,KAAiB,WAApB,EAAiC;;AAE/B,WAAO,IAAI,IAAJ,CAAP;AACD;;AAED,MAAI,YAAY,IAAI,IAAJ,CAAhB;AACA,MAAG,UAAU,IAAb,EAAmB;AACjB,WAAO,IAAI,IAAJ,CAAP;AACD,GAFD,MAEO;AACL,QAAI,IAAJ,IAAY,KAAZ;AACD;AACD,SAAO,SAAP;AACD,CAtBD;;AAwBA,IAAI,iBAAiB,UAAS,GAAT,EAAc,OAAd,EAAuB;AAC1C,MAAG,OAAO,GAAP,KAAe,QAAlB,EAA4B;AAC1B,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,MAAG,YAAY,EAAf,EAAmB;AACjB,WAAO,EAAP;AACD;;AAED,MAAG,CAAC,OAAJ,EAAa;AACX,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,YAAU,QAAQ,KAAR,CAAc,GAAd,CAAV;AACA,MAAI,QAAQ,QAAQ,KAAR,EAAZ;AACA,MAAI,UAAU,EAAd,EAAkB;AAChB,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,SAAO,OAAP;AACD,CApBD;;AAsBA,IAAI,MAAM,UAAS,GAAT,EAAc,OAAd,EAAuB;AAC/B,YAAU,eAAe,GAAf,EAAoB,OAApB,CAAV;AACA,MAAI,QAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAO,GAAP;AACD;AACD,SAAO,SAAS,GAAT,EAAc,OAAd,CAAP;AACD,CAND;;AAQA,IAAI,MAAM,UAAS,GAAT,EAAc,OAAd,EAAuB,KAAvB,EAA8B;AACtC,YAAU,eAAe,GAAf,EAAoB,OAApB,CAAV;AACA,MAAI,QAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;AACD,SAAO,SAAS,GAAT,EAAc,OAAd,EAAuB,KAAvB,CAAP;AACD,CAND;;AAQA,QAAQ,GAAR,GAAc,GAAd;AACA,QAAQ,GAAR,GAAc,GAAd","file":"jsonpointer-compiled.js","sourcesContent":["var untilde = function(str) {\n  return str.replace(/~./g, function(m) {\n    switch (m) {\n      case \"~0\":\n        return \"~\";\n      case \"~1\":\n        return \"/\";\n    }\n    throw new Error(\"Invalid tilde escape: \" + m);\n  });\n}\n\nvar traverse = function(obj, pointer, value) {\n  // assert(isArray(pointer))\n  var part = untilde(pointer.shift());\n  if(!obj.hasOwnProperty(part)) {\n    return null;\n  }\n  if(pointer.length !== 0) { // keep traversin!\n    return traverse(obj[part], pointer, value);\n  }\n  // we're done\n  if(typeof value === \"undefined\") {\n    // just reading\n    return obj[part];\n  }\n  // set new value, return old value\n  var old_value = obj[part];\n  if(value === null) {\n    delete obj[part];\n  } else {\n    obj[part] = value;\n  }\n  return old_value;\n}\n\nvar validate_input = function(obj, pointer) {\n  if(typeof obj !== \"object\") {\n    throw new Error(\"Invalid input object.\");\n  }\n\n  if(pointer === \"\") {\n    return [];\n  }\n\n  if(!pointer) {\n    throw new Error(\"Invalid JSON pointer.\");\n  }\n\n  pointer = pointer.split(\"/\");\n  var first = pointer.shift();\n  if (first !== \"\") {\n    throw new Error(\"Invalid JSON pointer.\");\n  }\n\n  return pointer;\n}\n\nvar get = function(obj, pointer) {\n  pointer = validate_input(obj, pointer);\n  if (pointer.length === 0) {\n    return obj;\n  }\n  return traverse(obj, pointer);\n}\n\nvar set = function(obj, pointer, value) {\n  pointer = validate_input(obj, pointer);\n  if (pointer.length === 0) {\n    throw new Error(\"Invalid JSON pointer for set.\")\n  }\n  return traverse(obj, pointer, value);\n}\n\nexports.get = get\nexports.set = set\n"]}