{"version":3,"sources":["newlines.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,UAAU,KAAK,UAAL,CAAgB,CAAhB,CAAd;;AAEA,SAAS,iBAAT,CAA4B,MAA5B,EAAoC;AAClC,MAAI,OAAO,iBAAX,EAA8B;;AAE5B;AACD;;AAED,MAAI,QAAQ,OAAO,KAAnB;;AAEA,SAAO,KAAP,GAAe,UAAU,IAAV,EAAgB;;AAE7B,QAAI,MAAM,MAAM,KAAN,CAAY,MAAZ,EAAoB,SAApB,CAAV;;AAEA,QAAI,OAAO,SAAP,CAAiB,SAAjB,EAA4B,MAA5B,GAAqC,CAAzC,EAA4C;AAC1C,UAAI,MAAM,KAAK,MAAf;UACI,IAAI,CADR;;AAGA,UAAI,OAAO,IAAP,IAAe,QAAnB,EAA6B;AAC3B,eAAO,IAAE,GAAT,EAAc,GAAd,EAAmB;AACjB,sBAAY,MAAZ,EAAoB,KAAK,UAAL,CAAgB,CAAhB,CAApB;AACD;AACF,OAJD,MAIO;;AAEL,eAAO,IAAE,GAAT,EAAc,GAAd,EAAmB;AACjB,sBAAY,MAAZ,EAAoB,KAAK,CAAL,CAApB;AACD;AACF;AACF;;AAED,WAAO,GAAP;AACD,GArBD;;AAuBA,SAAO,iBAAP,GAA2B,IAA3B;AACD;AACD,OAAO,OAAP,GAAiB,iBAAjB;;;;;;AAOA,SAAS,WAAT,CAAsB,MAAtB,EAA8B,CAA9B,EAAiC;AAC/B,SAAO,KAAP,CAAa,OAAO,CAApB,EAAuB,QAAvB;AACA,MAAI,MAAM,OAAV,EAAmB;AACjB,WAAO,IAAP,CAAY,SAAZ;AACD;AACF","file":"newlines-compiled.js","sourcesContent":["\n/**\n * Accepts any node Stream instance and hijacks its \"write()\" function,\n * so that it can count any newlines that get written to the output.\n *\n * When a '\\n' byte is encountered, then a \"newline\" event will be emitted\n * on the stream, with no arguments. It is up to the listeners to determine\n * any necessary deltas required for their use-case.\n *\n * Ex:\n *\n *   var cursor = ansi(process.stdout)\n *     , ln = 0\n *   process.stdout.on('newline', function () {\n *    ln++\n *   })\n */\n\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert')\nvar NEWLINE = '\\n'.charCodeAt(0)\n\nfunction emitNewlineEvents (stream) {\n  if (stream._emittingNewlines) {\n    // already emitting newline events\n    return\n  }\n\n  var write = stream.write\n\n  stream.write = function (data) {\n    // first write the data\n    var rtn = write.apply(stream, arguments)\n\n    if (stream.listeners('newline').length > 0) {\n      var len = data.length\n        , i = 0\n      // now try to calculate any deltas\n      if (typeof data == 'string') {\n        for (; i<len; i++) {\n          processByte(stream, data.charCodeAt(i))\n        }\n      } else {\n        // buffer\n        for (; i<len; i++) {\n          processByte(stream, data[i])\n        }\n      }\n    }\n\n    return rtn\n  }\n\n  stream._emittingNewlines = true\n}\nmodule.exports = emitNewlineEvents\n\n\n/**\n * Processes an individual byte being written to a stream\n */\n\nfunction processByte (stream, b) {\n  assert.equal(typeof b, 'number')\n  if (b === NEWLINE) {\n    stream.emit('newline')\n  }\n}\n"]}