{"version":3,"sources":["info.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,OAAP,GAAiB,UAAU,SAA3B;;AAEA,QAAQ,KAAR,GAAgB,iDAAhB;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,MAAM,QAAQ,QAAR,CAAV;AACA,IAAI,aAAa,QAAQ,sBAAR,CAAjB;AACA,IAAI,WAAW,QAAQ,oBAAR,CAAf;AACA,IAAI,SAAS,QAAQ,IAAR,EAAc,cAAd,EAA6B,EAAC,KAAI,aAAL,EAA7B,CAAb;;AAEA,SAAS,SAAT,CAAmB,GAAnB,EAAwB,IAAxB,EAA8B,QAA9B,EAAwC;AACpC,QAAI,MAAM,QAAQ,SAAR,CAAV;AACA,QAAI,eAAe,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,gBAAhB,CAAX,CAAnB;AACA,QAAI,OAAO,WAAW,QAAX,CAAoB,YAApB,EAAkC,IAAI,IAAtC,CAAX;AACA,aAAS,MAAT,CAAgB,KAAK,WAArB,EAAiC,MAAjC;AACA,QAAI,MAAJ,CAAW,MAAX,CAAkB,MAAlB;AACA,QAAI,KAAM,IAAI,IAAI,EAAR,EAAV;AACA,QAAI,UAAU,EAAG,QAAQ,OAAO,MAAlB;AACG,gBAAQ,OAAO;AADlB,KAAd;AAGA,OAAG,WAAH,CAAe,OAAf,EAAwB,UAAS,GAAT,EAAc,IAAd,EAAmB;AACvC,YAAI,OAAO,IAAI,IAAJ,IAAY,UAAvB,EAAmC;AAC/B,mBAAO,SAAS,IAAI,KAAJ,CAAU,MAAI,aAAa,IAAjB,GAAsB,uBAAtB,GAAgD,QAAQ,MAAxD,GAAiE,oBAAjE,GAAsF,OAAO,MAAvG,CAAT,CAAP;AACH,SAFD,MAEO,IAAG,GAAH,EAAQ;AACX,mBAAO,SAAS,GAAT,CAAP;AACH,SAFM,MAEA;AACH,gBAAI,OAAJ,CAAY,KAAK,SAAL,CAAe,IAAf,EAAoB,IAApB,EAAyB,CAAzB,CAAZ;AACA,gBAAI,QAAQ,KAAK,QAAjB,EAA2B;AACvB,qBAAK,QAAL,CAAc,OAAd,CAAsB,UAAS,GAAT,EAAc;AAChC,4BAAQ,GAAR,CAAY,IAAI,GAAhB;AACH,iBAFD;AAGH,aAJD,MAIO;AACH,wBAAQ,KAAR,CAAc,MAAI,aAAa,IAAjB,GAAsB,gCAAtB,GAAyD,QAAQ,MAAjE,GAA0E,oBAA1E,GAA+F,OAAO,MAApH;AACH;AACD,mBAAO,UAAP;AACH;AACJ,KAhBD;AAiBH","file":"info-compiled.js","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = unpublish;\n\nexports.usage = 'Lists all published binaries (requires aws-sdk)';\n\nvar fs = require('fs');\nvar log = require('npmlog');\nvar versioning = require('./util/versioning.js');\nvar s3_setup = require('./util/s3_setup.js');\nvar config = require('rc')(\"node_pre_gyp\",{acl:\"public-read\"});\n\nfunction unpublish(gyp, argv, callback) {\n    var AWS = require(\"aws-sdk\");\n    var package_json = JSON.parse(fs.readFileSync('./package.json'));\n    var opts = versioning.evaluate(package_json, gyp.opts);\n    s3_setup.detect(opts.hosted_path,config);\n    AWS.config.update(config);\n    var s3 =  new AWS.S3();\n    var s3_opts = {  Bucket: config.bucket,\n                     Prefix: config.prefix\n                  };\n    s3.listObjects(s3_opts, function(err, meta){\n        if (err && err.code == 'NotFound') {\n            return callback(new Error('['+package_json.name+'] Not found: https://' + s3_opts.Bucket + '.s3.amazonaws.com/'+config.prefix));\n        } else if(err) {\n            return callback(err);\n        } else {\n            log.verbose(JSON.stringify(meta,null,1));\n            if (meta && meta.Contents) {\n                meta.Contents.forEach(function(obj) {\n                    console.log(obj.Key);\n                });\n            } else {\n                console.error('['+package_json.name+'] No objects found at https://' + s3_opts.Bucket + '.s3.amazonaws.com/'+config.prefix );\n            }\n            return callback();\n        }\n    });\n}\n"]}