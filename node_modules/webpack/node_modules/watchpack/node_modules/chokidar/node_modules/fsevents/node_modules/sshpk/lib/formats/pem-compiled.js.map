{"version":3,"sources":["pem.js"],"names":[],"mappings":"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","file":"pem-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar pkcs1 = require('./pkcs1');\nvar pkcs8 = require('./pkcs8');\nvar sshpriv = require('./ssh-private');\nvar rfc4253 = require('./rfc4253');\n\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */\nfunction read(buf, forceType) {\n\tvar input = buf;\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split('\\n');\n\n\tvar m = lines[0].match(/*JSSTYLED*/\n\t    /[-]+[ ]*BEGIN ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2 = lines[lines.length - 1].match(/*JSSTYLED*/\n\t    /[-]+[ ]*END ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m2, 'invalid PEM footer');\n\n\t/* Begin and end banners must match key type */\n\tassert.equal(m[2], m2[2]);\n\tvar type = m[2].toLowerCase();\n\n\tvar alg;\n\tif (m[1]) {\n\t\t/* They also must match algorithms, if given */\n\t\tassert.equal(m[1], m2[1], 'PEM header and footer mismatch');\n\t\talg = m[1].trim();\n\t}\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\tif (headers['proc-type']) {\n\t\tvar parts = headers['proc-type'].split(',');\n\t\tif (parts[0] === '4' && parts[1] === 'ENCRYPTED') {\n\t\t\tthrow (new Error('PEM key is encrypted ' +\n\t\t\t    '(password-protected). Please use the ' +\n\t\t\t    'SSH agent or decrypt the key.'));\n\t\t}\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = new Buffer(lines, 'base64');\n\n\t/* The new OpenSSH internal format abuses PEM headers */\n\tif (alg && alg.toLowerCase() === 'openssh')\n\t\treturn (sshpriv.readSSHPrivate(type, buf));\n\tif (alg && alg.toLowerCase() === 'ssh2')\n\t\treturn (rfc4253.readType(type, buf));\n\n\tvar der = new asn1.BerReader(buf);\n\tder.originalInput = input;\n\n\t/*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */\n\tder.readSequence();\n\n\t/* PKCS#1 type keys name an algorithm in the banner explicitly */\n\tif (alg) {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs1');\n\t\treturn (pkcs1.readPkcs1(alg, type, der));\n\t} else {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs8');\n\t\treturn (pkcs8.readPkcs8(alg, type, der));\n\t}\n}\n\nfunction write(key, type) {\n\tassert.object(key);\n\n\tvar alg = {'ecdsa': 'EC', 'rsa': 'RSA', 'dsa': 'DSA'}[key.type];\n\tvar header;\n\n\tvar der = new asn1.BerWriter();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (type && type === 'pkcs8') {\n\t\t\theader = 'PRIVATE KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs1');\n\t\t\theader = alg + ' PRIVATE KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t}\n\n\t} else if (Key.isKey(key)) {\n\t\tif (type && type === 'pkcs1') {\n\t\t\theader = alg + ' PUBLIC KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs8');\n\t\t\theader = 'PUBLIC KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n\n\tvar tmp = der.buffer.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = new Buffer(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"]}