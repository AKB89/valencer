{"version":3,"sources":["handle_gyp_opts.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,OAAP,GAAiB,UAAU,eAA3B;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,aAAa,QAAQ,iBAAR,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,IAAI,sBAAsB,CACxB,QADwB,EAExB,aAFwB,EAGxB,aAHwB,CAA1B;;AAMA,SAAS,eAAT,CAAyB,GAAzB,EAA8B,IAA9B,EAAoC,QAApC,EAA8C;;;AAG1C,QAAI,uBAAuB,EAA3B;;AAEA,QAAI,OAAO,WAAW,QAAX,CAAoB,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,gBAAhB,CAAX,CAApB,EAAmE,IAAI,IAAvE,CAAX;AACA,wBAAoB,OAApB,CAA4B,UAAS,GAAT,EAAc;AACtC,YAAI,MAAM,KAAK,GAAL,CAAV;AACA,YAAI,GAAJ,EAAS;AACL,iCAAqB,IAArB,CAA0B,OAAO,GAAP,GAAa,GAAb,GAAmB,GAA7C;AACH,SAFD,MAEO;AACH,mBAAO,SAAS,IAAI,KAAJ,CAAU,YAAY,GAAZ,GAAkB,yCAA5B,CAAT,CAAP;AACH;AACJ,KAPD;;;AAUA,QAAI,mBAAmB,EAAvB;AACA,QAAI,sBAAsB,KAA1B;AACA,QAAI,IAAJ,CAAS,IAAT,CAAc,QAAd,CAAuB,OAAvB,CAA+B,UAAS,GAAT,EAAc;AACzC,YAAI,mBAAJ,EAAyB;AACrB,6BAAiB,IAAjB,CAAsB,GAAtB;AACH;AACD,YAAI,OAAO,IAAX,EAAiB;AACb,kCAAsB,IAAtB;AACH;AACJ,KAPD;;;;AAWA,QAAI,SAAS,IAAI,IAAJ,CAAS,IAAT,CAAc,MAA3B;AACA,QAAI,mBAAmB,EAAvB;AACA,WAAO,OAAP,CAAe,UAAS,KAAT,EAAgB;AAC3B,YAAI,MAAM,MAAN,GAAe,CAAf,IAAoB,MAAM,KAAN,CAAY,CAAZ,EAAc,CAAd,KAAoB,IAA5C,EAAkD;AAC9C,gBAAI,MAAM,MAAM,KAAN,CAAY,CAAZ,CAAV;AACA,gBAAI,MAAM,OAAO,OAAO,OAAP,CAAe,KAAf,IAAsB,CAA7B,CAAV;AACA,gBAAI,OAAO,IAAI,OAAJ,CAAY,IAAZ,MAAsB,CAAC,CAAlC,EAAqC;;AACjC,iCAAiB,IAAjB,CAAsB,OAAO,GAAP,GAAa,GAAb,GAAmB,GAAzC;AACH,aAFD,MAEO;;AACH,iCAAiB,IAAjB,CAAsB,KAAtB;AACH;AACJ;AACJ,KAVD;;AAYA,QAAI,SAAS,EAAC,QAAO,IAAR,EAAa,OAAM,gBAAnB,EAAoC,OAAM,oBAA1C,EAA+D,YAAW,gBAA1E,EAAb;AACA,WAAO,SAAS,IAAT,EAAc,MAAd,CAAP;AACH","file":"handle_gyp_opts-compiled.js","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = handle_gyp_opts;\n\nvar fs = require('fs');\nvar versioning = require('./versioning.js');\n\n/*\n\nHere we gather node-pre-gyp generated options (from versioning) and pass them along to node-gyp.\n\nWe massage the args and options slightly to account for differences in what commands mean between\nnode-pre-gyp and node-gyp (e.g. see the difference between \"build\" and \"rebuild\" below)\n\nKeep in mind: the values inside `argv` and `gyp.opts` below are different depending on whether\nnode-pre-gyp is called directory, or if it is called in a `run-script` phase of npm.\n\nWe also try to preserve any command line options that might have been passed to npm or node-pre-gyp.\nBut this is fairly difficult without passing way to much through. For example `gyp.opts` contains all\nthe process.env and npm pushes a lot of variables into process.env which node-pre-gyp inherits. So we have\nto be very selective about what we pass through.\n\nFor example:\n\n`npm install --build-from-source` will give:\n\nargv == [ 'rebuild' ]\ngyp.opts.argv == { remain: [ 'install' ],\n  cooked: [ 'install', '--fallback-to-build' ],\n  original: [ 'install', '--fallback-to-build' ] }\n\n`./bin/node-pre-gyp build` will give:\n\nargv == []\ngyp.opts.argv == { remain: [ 'build' ],\n  cooked: [ 'build' ],\n  original: [ '-C', 'test/app1', 'build' ] }\n\n*/\n\n// select set of node-pre-gyp versioning info\n// to share with node-gyp\nvar share_with_node_gyp = [\n  'module',\n  'module_name',\n  'module_path',\n];\n\nfunction handle_gyp_opts(gyp, argv, callback) {\n\n    // Collect node-pre-gyp specific variables to pass to node-gyp\n    var node_pre_gyp_options = [];\n    // generate custom node-pre-gyp versioning info\n    var opts = versioning.evaluate(JSON.parse(fs.readFileSync('./package.json')), gyp.opts);\n    share_with_node_gyp.forEach(function(key) {\n        var val = opts[key];\n        if (val) {\n            node_pre_gyp_options.push('--' + key + '=' + val);\n        } else {\n            return callback(new Error(\"Option \" + key + \" required but not found by node-pre-gyp\"));\n        }\n    });\n\n    // Collect options that follow the special -- which disables nopt parsing\n    var unparsed_options = [];\n    var double_hyphen_found = false;\n    gyp.opts.argv.original.forEach(function(opt) {\n        if (double_hyphen_found) {\n            unparsed_options.push(opt);\n        }\n        if (opt == '--') {\n            double_hyphen_found = true;\n        }\n    });\n\n    // We try respect and pass through remaining command\n    // line options (like --foo=bar) to node-gyp\n    var cooked = gyp.opts.argv.cooked;\n    var node_gyp_options = [];\n    cooked.forEach(function(value) {\n        if (value.length > 2 && value.slice(0,2) == '--') {\n            var key = value.slice(2);\n            var val = cooked[cooked.indexOf(value)+1];\n            if (val && val.indexOf('--') === -1) { // handle '--foo=bar' or ['--foo','bar']\n                node_gyp_options.push('--' + key + '=' + val);\n            } else { // pass through --foo\n                node_gyp_options.push(value);\n            }\n        }\n    });\n\n    var result = {'opts':opts,'gyp':node_gyp_options,'pre':node_pre_gyp_options,'unparsed':unparsed_options};\n    return callback(null,result);\n}\n"]}