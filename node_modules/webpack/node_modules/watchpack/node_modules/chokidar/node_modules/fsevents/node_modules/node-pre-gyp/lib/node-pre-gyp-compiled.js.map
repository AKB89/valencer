{"version":3,"sources":["node-pre-gyp.js"],"names":[],"mappings":"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","file":"node-pre-gyp-compiled.js","sourcesContent":["\"use strict\";\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports;\n\n/**\n * Module dependencies.\n */\n\nvar path = require('path');\nvar nopt = require('nopt');\nvar log = require('npmlog');\nvar EE = require('events').EventEmitter;\nvar inherits = require('util').inherits;\nvar commands = [\n      'clean',\n      'install',\n      'reinstall',\n      'build',\n      'rebuild',\n      'package',\n      'testpackage',\n      'publish',\n      'unpublish',\n      'info',\n      'testbinary',\n      'reveal',\n      'configure'\n    ];\nvar aliases = {};\n\n// differentiate node-pre-gyp's logs from npm's\nlog.heading = 'node-pre-gyp';\n\nexports.find = require('./pre-binding').find;\n\nfunction Run() {\n  var self = this;\n\n  this.commands = {};\n\n  commands.forEach(function (command) {\n    self.commands[command] = function (argv, callback) {\n      log.verbose('command', command, argv);\n      return require('./' + command)(self, argv, callback);\n    };\n  });\n}\ninherits(Run, EE);\nexports.Run = Run;\nvar proto = Run.prototype;\n\n/**\n * Export the contents of the package.json.\n */\n\nproto.package = require('../package');\n\n/**\n * nopt configuration definitions\n */\n\nproto.configDefs = {\n    help: Boolean,     // everywhere\n    arch: String,      // 'configure'\n    debug: Boolean,    // 'build'\n    directory: String, // bin\n    proxy: String,     // 'install'\n    loglevel: String,  // everywhere\n};\n\n/**\n * nopt shorthands\n */\n\nproto.shorthands = {\n    release: '--no-debug',\n    C: '--directory',\n    debug: '--debug',\n    j: '--jobs',\n    silent: '--loglevel=silent',\n    silly: '--loglevel=silly',\n    verbose: '--loglevel=verbose',\n};\n\n/**\n * expose the command aliases for the bin file to use.\n */\n\nproto.aliases = aliases;\n\n/**\n * Parses the given argv array and sets the 'opts',\n * 'argv' and 'command' properties.\n */\n\nproto.parseArgv = function parseOpts (argv) {\n  this.opts = nopt(this.configDefs, this.shorthands, argv);\n  this.argv = this.opts.argv.remain.slice();\n  var commands = this.todo = [];\n\n  // create a copy of the argv array with aliases mapped\n  argv = this.argv.map(function (arg) {\n    // is this an alias?\n    if (arg in this.aliases) {\n      arg = this.aliases[arg];\n    }\n    return arg;\n  }, this);\n\n  // process the mapped args into \"command\" objects (\"name\" and \"args\" props)\n  argv.slice().forEach(function (arg) {\n    if (arg in this.commands) {\n      var args = argv.splice(0, argv.indexOf(arg));\n      argv.shift();\n      if (commands.length > 0) {\n        commands[commands.length - 1].args = args;\n      }\n      commands.push({ name: arg, args: [] });\n    }\n  }, this);\n  if (commands.length > 0) {\n    commands[commands.length - 1].args = argv.splice(0);\n  }\n\n  // support for inheriting config env variables from npm\n  var npm_config_prefix = 'npm_config_';\n  Object.keys(process.env).forEach(function (name) {\n    if (name.indexOf(npm_config_prefix) !== 0) return;\n    var val = process.env[name];\n    if (name === npm_config_prefix + 'loglevel') {\n      log.level = val;\n    } else {\n      // add the user-defined options to the config\n      name = name.substring(npm_config_prefix.length);\n      // avoid npm argv clobber already present args\n      // which avoids problem of 'npm test' calling\n      // script that runs unique npm install commands\n      if (name === 'argv') {\n         if (this.opts.argv &&\n             this.opts.argv.remain &&\n             this.opts.argv.remain.length) {\n            // do nothing\n         } else {\n            this.opts[name] = val;\n         }\n      } else {\n        this.opts[name] = val;\n      }\n    }\n  }, this);\n\n  if (this.opts.loglevel) {\n    log.level = this.opts.loglevel;\n  }\n  log.resume();\n};\n\n/**\n * Returns the usage instructions for node-pre-gyp.\n */\n\nproto.usage = function usage () {\n  var str = [\n      '',\n      '  Usage: node-pre-gyp <command> [options]',\n      '',\n      '  where <command> is one of:',\n      commands.map(function (c) {\n        return '    - ' + c + ' - ' + require('./' + c).usage;\n      }).join('\\n'),\n      '',\n      'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'),\n      'node@' + process.versions.node\n  ].join('\\n');\n  return str;\n};\n\n/**\n * Version number getter.\n */\n\nObject.defineProperty(proto, 'version', {\n    get: function () {\n      return this.package.version;\n    },\n    enumerable: true\n});\n\n"]}