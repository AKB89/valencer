{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/**\n * lodash 4.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar toString = require('lodash.tostring');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8 which returns 'object' for typed array constructors, and\n  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3');\n * // => 3\n */\nfunction toInteger(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  var remainder = value % 1;\n  return value === value ? (remainder ? value - remainder : value) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3);\n * // => 3\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3');\n * // => 3\n */\nfunction toNumber(value) {\n  if (isObject(value)) {\n    var other = isFunction(value.valueOf) ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Repeats the given string `n` times.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to repeat.\n * @param {number} [n=0] The number of times to repeat the string.\n * @returns {string} Returns the repeated string.\n * @example\n *\n * _.repeat('*', 3);\n * // => '***'\n *\n * _.repeat('abc', 2);\n * // => 'abcabc'\n *\n * _.repeat('abc', 0);\n * // => ''\n */\nfunction repeat(string, n) {\n  string = toString(string);\n  n = toInteger(n);\n\n  var result = '';\n  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n    return result;\n  }\n  // Leverage the exponentiation by squaring algorithm for a faster repeat.\n  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n  do {\n    if (n % 2) {\n      result += string;\n    }\n    n = nativeFloor(n / 2);\n    string += string;\n  } while (n);\n\n  return result;\n}\n\nmodule.exports = repeat;\n"]}