{"version":3,"sources":["two-stream.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,QAAQ,GAAlB;IACI,SAAS,QAAS,QAAT,CADb;IAEI,cAAc,QAAQ,oBAAR,CAFlB;IAGI,QAAQ,CAHZ;IAGe,QAAQ,CAHvB;IAG0B,QAAQ,CAHlC;IAGqC,QAAQ,CAH7C;IAGgD,IAAI,CAHpD;IAII,SAAS,IAJb;IAImB,QAAQ,IAJ3B;IAIiC,QAAQ,IAJzC;;;;AAOA,QAAQ,IAAI,IAPZ,C;AAQA,QAAQ,IAAI,MAAJ,CAAY,KAAZ,CAAR;AACA,OAAQ,IAAI,KAAZ,EAAmB,GAAnB,EAAwB,MAAM,CAAN,IAAW,IAAI,UAAJ,CAAe,CAAf,CAAX;;AAExB,QAAQ,IAAI,IAAZ,C;AACA,QAAQ,IAAI,IAAZ,C;AACA,QAAQ,KAAK,IAAL,CAAW,QAAQ,CAAnB,CAAR,C;;AAEA,YAAY,KAAK,IAAL,CAAW,QAAQ,KAAnB,CAAZ,C;AACA,YAAY,KAAK,IAAL,CAAW,QAAQ,KAAnB,CAAZ,C;;AAGA,SAAS,IAAI,WAAJ,CAAiB,KAAjB,EAAwB,EAAE,OAAQ,IAAV,EAAxB,CAAT;AACA,QAAQ,IAAI,WAAJ,CAAiB,KAAjB,EAAwB,EAAE,OAAQ,IAAV,EAAxB,CAAR;;AAGA,IAAI,WAAW,CAAf;AACA,OAAO,EAAP,CAAW,MAAX,EAAmB,UAAU,CAAV,EAAa;;AAE9B,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAoC;AAClC,WAAO,WAAP,CAAmB,EAAE,CAAF,CAAnB,EAAyB,IAAI,UAAJ,CAAe,CAAf,CAAzB;AACD;AACC,IAAE,QAAF;AACH,CAND;;AAQA,IAAI,WAAW,CAAf;AACA,MAAM,EAAN,CAAU,MAAV,EAAkB,UAAU,CAAV,EAAa;;AAE7B,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAoC;AAClC,WAAO,WAAP,CAAmB,EAAE,CAAF,CAAnB,EAAyB,IAAI,UAAJ,CAAe,CAAf,CAAzB;AACD;AACC,IAAE,QAAF;AACH,CAND;;AAQA,OAAO,IAAP,CAAa,KAAb;;AAEA,OAAO,EAAP,CAAW,KAAX,EAAkB,YAAY;AAC5B,MAAI,qBAAJ,EAA2B,QAA3B,EAAqC,SAArC;AACE,SAAO,WAAP,CAAoB,QAApB,EAA8B,SAA9B;AACH,CAHD;;AAKA,MAAM,EAAN,CAAU,KAAV,EAAiB,YAAY;AAC3B,MAAI,qBAAJ,EAA2B,QAA3B,EAAqC,SAArC;AACE,SAAO,WAAP,CAAoB,QAApB,EAA8B,SAA9B;AACH,CAHD;;AAMA,KAAM,IAAI,CAAJ,EAAO,IAAI,KAAjB,EAAwB,KAAK,KAA7B,EAAoC,KAAK,KAAzC,EAAiD;AAC7C,SAAO,KAAP,CAAc,MAAM,KAAN,CAAa,IAAI,KAAjB,EAAwB,CAAxB,CAAd;AACH;;AAED,OAAO,GAAP","file":"two-stream-compiled.js","sourcesContent":["var log = console.log,\n    assert = require( 'assert' ),\n    BlockStream = require(\"../block-stream.js\"),\n    isize = 0, tsize = 0, fsize = 0, psize = 0, i = 0,\n    filter = null, paper = null, stack = null,\n\n// a source data buffer\ntsize = 1 * 1024; // <- 1K\nstack = new Buffer( tsize );\nfor ( ; i < tsize; i++) stack[i] = \"x\".charCodeAt(0);\n\nisize = 1 * 1024; // <- initial packet size with 4K no bug!\nfsize = 2 * 1024 ; // <- first block-stream size \npsize = Math.ceil( isize / 6 ); // <- second block-stream size\n\nfexpected = Math.ceil( tsize / fsize ); // <- packets expected for first \npexpected = Math.ceil( tsize / psize ); // <- packets expected for second\n\n\nfilter = new BlockStream( fsize, { nopad : true } );\npaper = new BlockStream( psize, { nopad : true } );\n\n\nvar fcounter = 0;\nfilter.on( 'data', function (c) {\n  // verify that they're not null-padded\n  for (var i = 0; i < c.length; i ++) {\n    assert.strictEqual(c[i], \"x\".charCodeAt(0))\n  }\n    ++fcounter;\n} );\n\nvar pcounter = 0;\npaper.on( 'data', function (c) {\n  // verify that they're not null-padded\n  for (var i = 0; i < c.length; i ++) {\n    assert.strictEqual(c[i], \"x\".charCodeAt(0))\n  }\n    ++pcounter;\n} );\n\nfilter.pipe( paper );\n\nfilter.on( 'end', function () {\n  log(\"fcounter: %s === %s\", fcounter, fexpected)\n    assert.strictEqual( fcounter, fexpected );\n} );\n\npaper.on( 'end', function () {\n  log(\"pcounter: %s === %s\", pcounter, pexpected);\n    assert.strictEqual( pcounter, pexpected );\n} );\n\n\nfor ( i = 0, j = isize; j <= tsize; j += isize ) {\n    filter.write( stack.slice( j - isize, j ) );\n}\n\nfilter.end();\n"]}