{"version":3,"sources":["basic.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,KAAR,EAAe,IAA1B;AACA,IAAI,SAAS,QAAQ,cAAR,CAAb;;AAEA,KAAK,OAAL,EAAc,UAAU,CAAV,EAAa;AACzB,WAAS,SAAT,CAAoB,EAApB,EAAwB;AACtB,QAAI,SAAS,KAAb;AACA,WAAO,YAAY;AACjB,UAAI,MAAJ,EAAY;AACZ,eAAS,IAAT;AACA,aAAO,GAAG,KAAH,CAAS,IAAT,EAAe,SAAf,CAAP;AACD,KAJD;AAKD;AACD,YAAU,OAAV,GAAoB,EAApB;AACA,MAAI,OAAO,OAAO,SAAP,CAAX;AACA,IAAE,KAAF,CAAQ,KAAK,OAAb,EAAsB,UAAU,OAAhC;;AAEA,MAAI,SAAS,CAAb;AACA,WAAS,GAAT,GAAgB;AACd,MAAE,KAAF,CAAQ,MAAR,EAAgB,CAAhB;AACA;AACD;;AAED,MAAI,MAAJ,GAAa,IAAb;;AAEA,MAAI,gBAAgB,KAAK,GAAL,CAApB;;AAEA,kB;AACA,kB;AACA,IAAE,KAAF,CAAQ,MAAR,EAAgB,CAAhB;;;AAGA,IAAE,KAAF,CAAQ,cAAc,MAAtB,EAA8B,IAA9B;;AAEA,MAAI,OAAO,EAAX;AACA,MAAI,UAAU,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AACtC,SAAK,IAAL,CAAU,MAAM,cAAhB;AACA,WAAO,YAAY;AACjB,WAAK,IAAL,CAAU,MAAM,YAAhB;AACA,UAAI,MAAM,GAAG,KAAH,CAAS,IAAT,EAAe,SAAf,CAAV;AACA,WAAK,IAAL,CAAU,MAAM,WAAhB;AACD,KAJD;AAKD,GAPa,CAAd;;AASA,MAAI,IAAI,QAAQ,KAAR,EAAe,YAAY;AACjC,MAAE,IAAF,CAAO,IAAP,EAAa,CAAE,iBAAF,EAAqB,eAArB,CAAb;AACD,GAFO,CAAR;AAGA;AACA,IAAE,IAAF,CAAO,IAAP,EAAa,CAAE,iBAAF,EAAqB,eAArB,EAAsC,cAAtC,CAAb;;AAEA,IAAE,GAAF;AACD,CA/CD","file":"basic-compiled.js","sourcesContent":["var test = require('tap').test\nvar wrappy = require('../wrappy.js')\n\ntest('basic', function (t) {\n  function onceifier (cb) {\n    var called = false\n    return function () {\n      if (called) return\n      called = true\n      return cb.apply(this, arguments)\n    }\n  }\n  onceifier.iAmOnce = {}\n  var once = wrappy(onceifier)\n  t.equal(once.iAmOnce, onceifier.iAmOnce)\n\n  var called = 0\n  function boo () {\n    t.equal(called, 0)\n    called++\n  }\n  // has some rando property\n  boo.iAmBoo = true\n\n  var onlyPrintOnce = once(boo)\n\n  onlyPrintOnce() // prints 'boo'\n  onlyPrintOnce() // does nothing\n  t.equal(called, 1)\n\n  // random property is retained!\n  t.equal(onlyPrintOnce.iAmBoo, true)\n\n  var logs = []\n  var logwrap = wrappy(function (msg, cb) {\n    logs.push(msg + ' wrapping cb')\n    return function () {\n      logs.push(msg + ' before cb')\n      var ret = cb.apply(this, arguments)\n      logs.push(msg + ' after cb')\n    }\n  })\n\n  var c = logwrap('foo', function () {\n    t.same(logs, [ 'foo wrapping cb', 'foo before cb' ])\n  })\n  c()\n  t.same(logs, [ 'foo wrapping cb', 'foo before cb', 'foo after cb' ])\n\n  t.end()\n})\n"]}