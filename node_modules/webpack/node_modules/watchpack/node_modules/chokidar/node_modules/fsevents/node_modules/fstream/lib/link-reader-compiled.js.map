{"version":3,"sources":["link-reader.js"],"names":[],"mappings":";;;;;;AAMA,OAAO,OAAP,GAAiB,UAAjB;;AAEA,IAAI,KAAK,QAAQ,aAAR,CAAT;AACA,IAAI,WAAW,QAAQ,UAAR,CAAf;AACA,IAAI,SAAS,QAAQ,aAAR,CAAb;;AAEA,SAAS,UAAT,EAAqB,MAArB;;AAEA,SAAS,UAAT,CAAqB,KAArB,EAA4B;AAC1B,MAAI,OAAO,IAAX;AACA,MAAI,EAAE,gBAAgB,UAAlB,CAAJ,EAAmC;AACjC,UAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,MAAI,EAAG,MAAM,IAAN,KAAe,MAAf,IAAyB,MAAM,IAAhC,IACH,MAAM,IAAN,KAAe,cAAf,IAAiC,MAAM,YADtC,CAAJ,EAC0D;AACxD,UAAM,IAAI,KAAJ,CAAU,mBAAmB,MAAM,IAAnC,CAAN;AACD;;AAED,SAAO,IAAP,CAAY,IAAZ,EAAkB,KAAlB;AACD;;;;;;AAMD,WAAW,SAAX,CAAqB,KAArB,GAA6B,UAAU,WAAV,EAAuB;AAClD,MAAI,OAAO,IAAX;AACA,KAAG,QAAH,CAAY,KAAK,KAAjB,EAAwB,UAAU,EAAV,EAAc,QAAd,EAAwB;AAC9C,QAAI,EAAJ,EAAQ,OAAO,KAAK,KAAL,CAAW,EAAX,CAAP;AACR,SAAK,QAAL,GAAgB,KAAK,KAAL,CAAW,QAAX,GAAsB,QAAtC;AACA,SAAK,IAAL,CAAU,UAAV,EAAsB,QAAtB;AACA,WAAO,SAAP,CAAiB,KAAjB,CAAuB,IAAvB,CAA4B,IAA5B,EAAkC,WAAlC;AACD,GALD;AAMD,CARD;;AAUA,WAAW,SAAX,CAAqB,KAArB,GAA6B,YAAY;AACvC,MAAI,OAAO,IAAX;AACA,MAAI,KAAK,OAAT,EAAkB;;;AAGlB,MAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,SAAK,IAAL,CAAU,KAAV;AACA,SAAK,IAAL,CAAU,OAAV;AACA,SAAK,MAAL,GAAc,IAAd;AACD;AACF,CAVD","file":"link-reader-compiled.js","sourcesContent":["// Basically just a wrapper around an fs.readlink\n//\n// XXX: Enhance this to support the Link type, by keeping\n// a lookup table of {<dev+inode>:<path>}, so that hardlinks\n// can be preserved in tarballs.\n\nmodule.exports = LinkReader\n\nvar fs = require('graceful-fs')\nvar inherits = require('inherits')\nvar Reader = require('./reader.js')\n\ninherits(LinkReader, Reader)\n\nfunction LinkReader (props) {\n  var self = this\n  if (!(self instanceof LinkReader)) {\n    throw new Error('LinkReader must be called as constructor.')\n  }\n\n  if (!((props.type === 'Link' && props.Link) ||\n    (props.type === 'SymbolicLink' && props.SymbolicLink))) {\n    throw new Error('Non-link type ' + props.type)\n  }\n\n  Reader.call(self, props)\n}\n\n// When piping a LinkReader into a LinkWriter, we have to\n// already have the linkpath property set, so that has to\n// happen *before* the \"ready\" event, which means we need to\n// override the _stat method.\nLinkReader.prototype._stat = function (currentStat) {\n  var self = this\n  fs.readlink(self._path, function (er, linkpath) {\n    if (er) return self.error(er)\n    self.linkpath = self.props.linkpath = linkpath\n    self.emit('linkpath', linkpath)\n    Reader.prototype._stat.call(self, currentStat)\n  })\n}\n\nLinkReader.prototype._read = function () {\n  var self = this\n  if (self._paused) return\n  // basically just a no-op, since we got all the info we need\n  // from the _stat method\n  if (!self._ended) {\n    self.emit('end')\n    self.emit('close')\n    self._ended = true\n  }\n}\n"]}