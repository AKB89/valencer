{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,aAAR,CAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,QAAQ,GAAR,CAAY,gBAAZ;AACA,IAAI,QAAQ,CAAZ;;AAEA,SAAS,IAAT,CAAe,IAAf,EAAqB,MAArB,EAA6B;AAC3B;AACA,MAAI,SAAS,OAAO,IAAP,CAAb;AACA,SAAO,SAAP,CAAiB,MAAjB,EAAyB,MAAzB,EACE,YAAU,KAAK,OAAL,CAAa,IAAb,CAAV,GAA6B,QAA7B,GAAwC,KAAK,OAAL,CAAa,MAAb,CAAxC,GAA+D,IAA/D,GACA,UADA,GACW,KAAK,OAAL,CAAa,MAAb,CAFb;AAGA,WAAS,OAAO,KAAP,CAAa,OAAb,EAAsB,IAAtB,CAAT;AACA,SAAO,SAAP,CAAiB,OAAO,KAAP,CAAa,OAAb,EAAsB,IAAtB,CAAjB,EAA8C,MAA9C,EACE,YAAU,KAAK,GAAL,CAAS,KAAK,SAAd,EAAyB,IAAzB,CAA8B,GAA9B,CAAV,GAA6C,QAA7C,GAAwD,KAAK,OAAL,CAAa,MAAb,CAAxD,GAA+E,IAA/E,GACA,UADA,GACW,KAAK,OAAL,CAAa,MAAb,CAFb;AAGA,UAAQ,GAAR,CAAY,UAAU,KAAK,IAAL,CAAU,GAAV,CAAtB;AACD;;AAED,KAAK,CAAE,MAAF,EAAU,MAAV,EAAkB,OAAlB,EAA2B,OAA3B,EAAoC,OAApC,CAAL,EACA,EAAE,KAAK,MAAP;AACE,QAAM,MADR;AAEE,OAAK,OAFP;AAGE,QAAM,OAHR;AAIE,SAAO;AAJT,CADA;AAOA,KAAK,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAAL,EACA,EAAE,MAAM,MAAR;AACE,QAAM,MADR;AAEE,OAAK,MAFP;AAGE,QAAM,MAHR;AAIE,OAAK,MAJP;AAKE,QAAM;AALR,CADA;AAQA,KAAK,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,EAAmB,MAAnB,EAA2B,OAA3B,EAAoC,MAApC,CAAL,EACA,EAAE,GAAG,GAAL;AACE,MAAI,IADN;AAEE,OAAK,KAFP;AAGE,QAAM,MAHR;AAIE,SAAO,OAJT;AAKE,MAAI,MALN;AAME,OAAK,MANP;AAOE,QAAM;AAPR,CADA;;AAWA,QAAQ,GAAR,CAAY,OAAZ,EAAqB,KAArB","file":"test-compiled.js","sourcesContent":["var abbrev = require('./abbrev.js')\nvar assert = require(\"assert\")\nvar util = require(\"util\")\n\nconsole.log(\"TAP version 13\")\nvar count = 0\n\nfunction test (list, expect) {\n  count++\n  var actual = abbrev(list)\n  assert.deepEqual(actual, expect,\n    \"abbrev(\"+util.inspect(list)+\") === \" + util.inspect(expect) + \"\\n\"+\n    \"actual: \"+util.inspect(actual))\n  actual = abbrev.apply(exports, list)\n  assert.deepEqual(abbrev.apply(exports, list), expect,\n    \"abbrev(\"+list.map(JSON.stringify).join(\",\")+\") === \" + util.inspect(expect) + \"\\n\"+\n    \"actual: \"+util.inspect(actual))\n  console.log('ok - ' + list.join(' '))\n}\n\ntest([ \"ruby\", \"ruby\", \"rules\", \"rules\", \"rules\" ],\n{ rub: 'ruby'\n, ruby: 'ruby'\n, rul: 'rules'\n, rule: 'rules'\n, rules: 'rules'\n})\ntest([\"fool\", \"foom\", \"pool\", \"pope\"],\n{ fool: 'fool'\n, foom: 'foom'\n, poo: 'pool'\n, pool: 'pool'\n, pop: 'pope'\n, pope: 'pope'\n})\ntest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"acde\"],\n{ a: 'a'\n, ab: 'ab'\n, abc: 'abc'\n, abcd: 'abcd'\n, abcde: 'abcde'\n, ac: 'acde'\n, acd: 'acde'\n, acde: 'acde'\n})\n\nconsole.log(\"1..%d\", count)\n"]}