{"version":3,"sources":["dropper-pause.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,SAAR,CAAlB;;AAEA,IAAI,aAAa,CAAC,EAAD,EAAK,EAAL,EAAS,IAAT,CAAjB;IACI,aAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,GAAvB,CADjB;IAEI,cAAc,CAAC,CAAD,EAAI,EAAJ,EAAQ,GAAR,CAFlB;IAGI,MAAM,QAAQ,KAAR,CAHV;;AAKA,YAAY,OAAZ,CAAoB,UAAU,UAAV,EAAsB;AAC1C,aAAW,OAAX,CAAmB,UAAU,SAAV,EAAqB;AACxC,eAAW,OAAX,CAAmB,UAAU,SAAV,EAAqB;AACtC,UAAI,IAAJ,CAAS,eAAe,SAAf,GACA,aADA,GACc,SADd,GAEA,cAFA,GAEe,UAFxB,EAEoC,UAAU,CAAV,EAAa;AAC/C,YAAI,IAAI,IAAI,WAAJ,CAAgB,SAAhB,EAA2B,EAAC,OAAO,IAAR,EAA3B,CAAR;;AAEA,YAAI,eAAe,CAAnB;AACA,YAAI,cAAc,CAAlB;AACA,YAAI,WAAW,CAAf;;AAEA,UAAE,EAAF,CAAK,MAAL,EAAa,UAAU,CAAV,EAAa;AACxB;;AAEA;AACA,yBAAe,EAAE,MAAjB;;;AAGA,cAAI,SAAS,EAAE,QAAF,EAAb;;AAEA,YAAE,KAAF;AACA,qBAAW,YAAY;AACrB;;AAEA,gBAAI,QAAQ,EAAE,QAAF,EAAZ;AACA,cAAE,KAAF,CAAQ,KAAR,EAAe,MAAf,EAAuB,wBAAvB;;;AAGA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAoC;AAClC,gBAAE,CAAF,IAAO,IAAI,UAAJ,CAAe,CAAf,CAAP;AACD;AACD,cAAE,MAAF;AACD,WAXD,EAWG,GAXH;AAYD,SAtBD;;AAwBA,UAAE,EAAF,CAAK,KAAL,EAAY,YAAY;;AAEtB,cAAI,eAAe,KAAK,IAAL,CAAU,YAAY,UAAZ,GAA0B,CAA1B,GAA8B,SAAxC,CAAnB;AACA,cAAI,cAAc,YAAY,UAAZ,GAAyB,CAA3C;AACA,YAAE,KAAF,CAAQ,WAAR,EAAqB,WAArB,EACQ,WAAW,WAAX,GAAyB,aAAzB,GAAyC,SADjD;AAEA,YAAE,KAAF,CAAQ,YAAR,EAAsB,YAAtB,EACQ,YAAY,YAAZ,GAA2B,aAA3B,GAA2C,SADnD;;;AAIA,qBAAW,SAAS,IAAT,GAAiB;AAC1B,gBAAI,WAAW,CAAf,EAAkB,OAAO,WAAW,IAAX,CAAP;AAClB,cAAE,GAAF;AACD,WAHD,EAGG,GAHH;AAID,SAdD;;AAgBA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAApB,EAAgC,GAAhC,EAAsC;AACpC,cAAI,IAAI,IAAI,MAAJ,CAAW,SAAX,CAAR;AACA,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAApB,EAA+B,GAA/B,EAAqC,EAAE,CAAF,IAAO,IAAI,UAAJ,CAAe,CAAf,CAAP;AACrC,cAAI,IAAI,IAAI,MAAJ,CAAW,SAAX,CAAR;AACA,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAApB,EAA+B,GAA/B,EAAqC,EAAE,CAAF,IAAO,IAAI,UAAJ,CAAe,CAAf,CAAP;AACrC,YAAE,KAAF,CAAQ,CAAR;AACA,YAAE,KAAF,CAAQ,CAAR;AACD;AACD,UAAE,GAAF;AACD,OA1DD;AA2DD,KA5DD;AA4DI,GA7DJ;AA6DO,CA9DP","file":"dropper-pause-compiled.js","sourcesContent":["var BlockStream = require(\"dropper\")\n\nvar blockSizes = [16, 25, 1024]\n  , writeSizes = [4, 8, 15, 16, 17, 64, 100]\n  , writeCounts = [1, 10, 100]\n  , tap = require(\"tap\")\n\nwriteCounts.forEach(function (writeCount) {\nblockSizes.forEach(function (blockSize) {\nwriteSizes.forEach(function (writeSize) {\n  tap.test(\"writeSize=\" + writeSize +\n           \" blockSize=\"+blockSize +\n           \" writeCount=\"+writeCount, function (t) {\n    var f = new BlockStream(blockSize, {nopad: true })\n\n    var actualChunks = 0\n    var actualBytes = 0\n    var timeouts = 0\n\n    f.on(\"data\", function (c) {\n      timeouts ++\n\n      actualChunks ++\n      actualBytes += c.length\n\n      // make sure that no data gets corrupted, and basic sanity\n      var before = c.toString()\n      // simulate a slow write operation\n      f.pause()\n      setTimeout(function () {\n        timeouts --\n\n        var after = c.toString()\n        t.equal(after, before, \"should not change data\")\n\n        // now corrupt it, to find leaks.\n        for (var i = 0; i < c.length; i ++) {\n          c[i] = \"x\".charCodeAt(0)\n        }\n        f.resume()\n      }, 100)\n    })\n\n    f.on(\"end\", function () {\n      // round up to the nearest block size\n      var expectChunks = Math.ceil(writeSize * writeCount  * 2 / blockSize)\n      var expectBytes = writeSize * writeCount * 2\n      t.equal(actualBytes, expectBytes,\n              \"bytes=\" + expectBytes + \" writeSize=\" + writeSize)\n      t.equal(actualChunks, expectChunks,\n              \"chunks=\" + expectChunks + \" writeSize=\" + writeSize)\n\n      // wait for all the timeout checks to finish, then end the test\n      setTimeout(function WAIT () {\n        if (timeouts > 0) return setTimeout(WAIT)\n        t.end()\n      }, 100)\n    })\n\n    for (var i = 0; i < writeCount; i ++) {\n      var a = new Buffer(writeSize);\n      for (var j = 0; j < writeSize; j ++) a[j] = \"a\".charCodeAt(0)\n      var b = new Buffer(writeSize);\n      for (var j = 0; j < writeSize; j ++) b[j] = \"b\".charCodeAt(0)\n      f.write(a)\n      f.write(b)\n    }\n    f.end()\n  })\n}) }) })\n"]}