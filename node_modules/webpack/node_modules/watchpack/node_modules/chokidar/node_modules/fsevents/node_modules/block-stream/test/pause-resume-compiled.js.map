{"version":3,"sources":["pause-resume.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,oBAAR,CAAlB;;AAEA,IAAI,aAAa,CAAC,EAAD,CAAjB;IACI,aAAa,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADjB;IAEI,cAAc,CAAC,CAAD,EAAI,EAAJ,C;AAFlB;IAGI,MAAM,QAAQ,KAAR,CAHV;;AAKA,YAAY,OAAZ,CAAoB,UAAU,UAAV,EAAsB;AAC1C,aAAW,OAAX,CAAmB,UAAU,SAAV,EAAqB;AACxC,eAAW,OAAX,CAAmB,UAAU,SAAV,EAAqB;AACtC,UAAI,IAAJ,CAAS,eAAe,SAAf,GACA,aADA,GACc,SADd,GAEA,cAFA,GAEe,UAFxB,EAEoC,UAAU,CAAV,EAAa;AAC/C,YAAI,IAAI,IAAI,WAAJ,CAAgB,SAAhB,CAAR;;AAEA,YAAI,eAAe,CAAnB;AACA,YAAI,cAAc,CAAlB;AACA,YAAI,WAAW,CAAf;AACA,YAAI,SAAS,KAAb;;AAEA,UAAE,EAAF,CAAK,MAAL,EAAa,UAAU,CAAV,EAAa;AACxB;AACA,YAAE,KAAF,CAAQ,MAAR,EAAgB,yCAAhB;;AAEA;AACA,yBAAe,EAAE,MAAjB;;;AAGA,cAAI,SAAS,EAAE,QAAF,EAAb;;AAEA,mBAAS,IAAT;AACA,YAAE,KAAF;AACA,kBAAQ,QAAR,CAAiB,YAAY;AAC3B,gBAAI,QAAQ,EAAE,QAAF,EAAZ;AACA,cAAE,KAAF,CAAQ,KAAR,EAAe,MAAf,EAAuB,wBAAvB;;;AAGA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAoC;AAClC,gBAAE,CAAF,IAAO,IAAI,UAAJ,CAAe,CAAf,CAAP;AACD;AACD,qBAAS,KAAT;AACA,cAAE,MAAF;AACA;AACD,WAXD;AAYD,SAxBD;;AA0BA,UAAE,EAAF,CAAK,KAAL,EAAY,YAAY;;AAEtB,cAAI,eAAe,KAAK,IAAL,CAAU,YAAY,UAAZ,GAA0B,CAA1B,GAA8B,SAAxC,CAAnB;AACA,cAAI,cAAc,eAAe,SAAjC;AACA,YAAE,KAAF,CAAQ,WAAR,EAAqB,WAArB,EACQ,WAAW,WAAX,GAAyB,aAAzB,GAAyC,SADjD;AAEA,YAAE,KAAF,CAAQ,YAAR,EAAsB,YAAtB,EACQ,YAAY,YAAZ,GAA2B,aAA3B,GAA2C,SADnD;;;AAIA,qBAAW,SAAS,IAAT,GAAiB;AAC1B,gBAAI,WAAW,CAAf,EAAkB,OAAO,WAAW,IAAX,CAAP;AAClB,cAAE,GAAF;AACD,WAHD,EAGG,GAHH;AAID,SAdD;;AAgBA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAApB,EAAgC,GAAhC,EAAsC;AACpC,cAAI,IAAI,IAAI,MAAJ,CAAW,SAAX,CAAR;AACA,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAApB,EAA+B,GAA/B,EAAqC,EAAE,CAAF,IAAO,IAAI,UAAJ,CAAe,CAAf,CAAP;AACrC,cAAI,IAAI,IAAI,MAAJ,CAAW,SAAX,CAAR;AACA,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAApB,EAA+B,GAA/B,EAAqC,EAAE,CAAF,IAAO,IAAI,UAAJ,CAAe,CAAf,CAAP;AACrC,YAAE,KAAF,CAAQ,CAAR;AACA,YAAE,KAAF,CAAQ,CAAR;AACD;AACD,UAAE,GAAF;AACD,OA7DD;AA8DD,KA/DD;AA+DI,GAhEJ;AAgEO,CAjEP","file":"pause-resume-compiled.js","sourcesContent":["var BlockStream = require(\"../block-stream.js\")\n\nvar blockSizes = [16]\n  , writeSizes = [15, 16, 17]\n  , writeCounts = [1, 10]//, 100]\n  , tap = require(\"tap\")\n\nwriteCounts.forEach(function (writeCount) {\nblockSizes.forEach(function (blockSize) {\nwriteSizes.forEach(function (writeSize) {\n  tap.test(\"writeSize=\" + writeSize +\n           \" blockSize=\"+blockSize +\n           \" writeCount=\"+writeCount, function (t) {\n    var f = new BlockStream(blockSize)\n\n    var actualChunks = 0\n    var actualBytes = 0\n    var timeouts = 0\n    var paused = false\n\n    f.on(\"data\", function (c) {\n      timeouts ++\n      t.notOk(paused, \"should not be paused when emitting data\")\n\n      actualChunks ++\n      actualBytes += c.length\n\n      // make sure that no data gets corrupted, and basic sanity\n      var before = c.toString()\n      // simulate a slow write operation\n      paused = true\n      f.pause()\n      process.nextTick(function () {\n        var after = c.toString()\n        t.equal(after, before, \"should not change data\")\n\n        // now corrupt it, to find leaks.\n        for (var i = 0; i < c.length; i ++) {\n          c[i] = \"x\".charCodeAt(0)\n        }\n        paused = false\n        f.resume()\n        timeouts --\n      })\n    })\n\n    f.on(\"end\", function () {\n      // round up to the nearest block size\n      var expectChunks = Math.ceil(writeSize * writeCount  * 2 / blockSize)\n      var expectBytes = expectChunks * blockSize\n      t.equal(actualBytes, expectBytes,\n              \"bytes=\" + expectBytes + \" writeSize=\" + writeSize)\n      t.equal(actualChunks, expectChunks,\n              \"chunks=\" + expectChunks + \" writeSize=\" + writeSize)\n\n      // wait for all the timeout checks to finish, then end the test\n      setTimeout(function WAIT () {\n        if (timeouts > 0) return setTimeout(WAIT)\n        t.end()\n      }, 200)\n    })\n\n    for (var i = 0; i < writeCount; i ++) {\n      var a = new Buffer(writeSize);\n      for (var j = 0; j < writeSize; j ++) a[j] = \"a\".charCodeAt(0)\n      var b = new Buffer(writeSize);\n      for (var j = 0; j < writeSize; j ++) b[j] = \"b\".charCodeAt(0)\n      f.write(a)\n      f.write(b)\n    }\n    f.end()\n  })\n}) }) })\n"]}