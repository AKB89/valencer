{"version":3,"sources":["read-file-order.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,KAAR,CAAjB;IACE,KAAK,QAAQ,IAAR,CADP;;;AAIA,IAAI,IAAI,QAAQ,aAAR,CAAR;AACA,EAAE,OAAF,CAAU,EAAE,cAAc,CAAC,WAAD,CAAhB,EAAV;AACA,EAAE,OAAF,CAAU,EAAE,WAAW,CAAC,GAAD,EAAM,YAAN,CAAb,EAAV;;;AAGA,IAAI,WACF,CAAE,IAAF,EACE,MADF,EAEE,QAFF,EAGE,YAHF,CADF;;AAMA,IAAI,mBAAmB,GAAG,QAA1B;IACE,gBAAgB,CADlB;IAEE,SAFF;;;;AAMA,GAAG,QAAH,GAAc,UAAU,QAAV,EAAoB,OAApB,EAA6B,QAA7B,EAAuC;AACnD,MAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,eAAW,OAAX;AACA,cAAU,KAAV;AACD;;AAED;;AAEA,UAAQ,QAAR,CAAiB,YAAY;AAC3B,QAAI,gBAAgB,CAApB,EAAuB;AACrB,UAAI,CAAC,SAAL,EAAgB;AACd,eAAO,YAAY,UAAU,EAAV,EAAc;AAC/B,2BAAiB,QAAjB,EAA2B,OAA3B,EAAoC,UAAU,GAAV,EAAe,IAAf,EAAqB;AACvD,qBAAS,GAAT,EAAc,IAAd;AACA,gBAAI,EAAJ,EAAQ;AACT,WAHD;AAID,SALD;AAMD;;AAED,UAAI,SAAS,OAAT,CAAiB,YAAjB,MAAmC,CAAC,CAAxC,EAA2C;AACzC,kBAAU,YAAY;AACpB,2BAAiB,QAAjB,EAA2B,OAA3B,EAAoC,QAApC;AACD,SAFD;AAGD,OAJD,MAIO;AACL,yBAAiB,QAAjB,EAA2B,OAA3B,EAAoC,UAAU,GAAV,EAAe,IAAf,EAAqB;AACvD,mBAAS,GAAT,EAAc,IAAd;AACA;AACD,SAHD;AAID;AACF,KApBD,MAoBO;AACL,uBAAiB,QAAjB,EAA2B,OAA3B,EAAoC,QAApC;AACA,sBAAgB,CAAhB;AACD;AACF,GAzBD;AA0BD,CAlCD;;AAoCA,QAAQ,KAAR,EAAe,IAAf,CAAoB,iBAApB,EAAuC,UAAU,CAAV,EAAa;AAClD,IAAE,IAAF,CAAO,OAAP;;AAEA,aAAW,EAAE,MAAM,YAAY,WAApB;AACE,iBAAa,CAAC,YAAD,EAAe,SAAf,CADf,EAAX,EAEG,EAFH,CAEM,YAFN,EAEoB,UAAU,CAAV,EAAa;AAC7B,YAAQ,KAAR,CAAc,cAAd,EAA8B,CAA9B;AACD,GAJH,EAKG,EALH,CAKM,OALN,EAKe,UAAU,CAAV,EAAa;AACxB,QAAI,IAAI,EAAE,IAAF,CAAO,MAAP,CAAc,EAAE,IAAF,CAAO,IAAP,CAAY,MAA1B,CAAR;AACA,QAAI,IAAI,SAAS,OAAT,CAAiB,CAAjB,CAAR;AACA,QAAI,MAAM,CAAC,CAAX,EAAc;AACZ,QAAE,IAAF,CAAO,uBAAP,EAAgC,EAAC,GAAG,CAAJ,EAAhC;AACD,KAFD,MAEO;AACL,QAAE,IAAF,CAAO,CAAP;AACA,eAAS,MAAT,CAAgB,CAAhB,EAAmB,CAAnB;AACD;AACF,GAdH,EAeG,EAfH,CAeM,OAfN,EAee,YAAY;AACvB,OAAG,QAAH,GAAc,gBAAd;AACA,MAAE,KAAF,CAAQ,SAAS,MAAjB,EAAyB,mCAAzB;AACA,MAAE,GAAF;AACD,GAnBH;AAoBD,CAvBD","file":"read-file-order-compiled.js","sourcesContent":["var IgnoreFile = require(\"../\")\n, fs = require('fs')\n\n// set the ignores just for this test\nvar c = require(\"./common.js\")\nc.ignores({ \".gitignore\": [\"a/b/c/abc\"] })\nc.ignores({ \".ignore\": [\"*\", \"!a/b/c/abc\"] })\n\n// the only files we expect to see\nvar expected =\n  [ \"/a\"\n  , \"/a/b\"\n  , \"/a/b/c\"\n  , \"/a/b/c/abc\" ]\n\nvar originalReadFile = fs.readFile\n, parallelCount = 0\n, firstCall\n\n// Overwrite fs.readFile so that when .gitignore and .ignore are read in\n// parallel, .ignore will always be read first.\nfs.readFile = function (filename, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n    options = false\n  }\n\n  parallelCount++\n\n  process.nextTick(function () {\n    if (parallelCount > 1) {\n      if (!firstCall) {\n        return firstCall = function (cb) {\n          originalReadFile(filename, options, function (err, data) {\n            callback(err, data)\n            if (cb) cb()\n          })\n        }\n      }\n\n      if (filename.indexOf('.gitignore') !== -1) {\n        firstCall(function () {\n          originalReadFile(filename, options, callback)\n        })\n      } else {\n        originalReadFile(filename, options, function (err, data) {\n          callback(err, data)\n          firstCall()\n        })\n      }\n    } else {\n      originalReadFile(filename, options, callback)\n      parallelCount = 0\n    }\n  })\n}\n\nrequire(\"tap\").test(\"read file order\", function (t) {\n  t.pass(\"start\")\n\n  IgnoreFile({ path: __dirname + \"/fixtures\"\n             , ignoreFiles: [\".gitignore\", \".ignore\"] })\n    .on(\"ignoreFile\", function (e) {\n      console.error(\"ignore file!\", e)\n    })\n    .on(\"child\", function (e) {\n      var p = e.path.substr(e.root.path.length)\n      var i = expected.indexOf(p)\n      if (i === -1) {\n        t.fail(\"unexpected file found\", {f: p})\n      } else {\n        t.pass(p)\n        expected.splice(i, 1)\n      }\n    })\n    .on(\"close\", function () {\n      fs.readFile = originalReadFile\n      t.notOk(expected.length, \"all expected files should be seen\")\n      t.end()\n    })\n})\n"]}