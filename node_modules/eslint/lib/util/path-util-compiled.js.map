{"version":3,"sources":["path-util.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,IAAI,OAAO,QAAQ,MAAR,CAAX;IACI,aAAa,QAAQ,kBAAR,CADjB;;;;;;;;;;;;AAaA,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AAClC,QAAI,qBAAqB,KAAK,SAAL,CAAe,QAAf,CAAzB;AACA,QAAI,gBAAgB,mBAAmB,OAAnB,CAA2B,KAA3B,EAAkC,GAAlC,CAApB;;AAEA,WAAO,aAAP;AACH;;;;;;;;;;;;;;;;;;;;;;AAsBD,SAAS,eAAT,CAAyB,QAAzB,EAAmC,OAAnC,EAA4C;AACxC,QAAI,YAAJ;;AAEA,QAAI,CAAC,WAAW,QAAX,CAAL,EAA2B;AACvB,mBAAW,KAAK,OAAL,CAAa,QAAb,CAAX;AACH;AACD,QAAI,OAAJ,EAAa;AACT,YAAI,CAAC,WAAW,OAAX,CAAL,EAA0B;AACtB,kBAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACH;AACD,uBAAe,KAAK,QAAL,CAAc,OAAd,EAAuB,QAAvB,CAAf;AACH,KALD,MAKO;AACH,uBAAe,SAAS,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAf;AACH;AACD,WAAO,YAAP;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB;AACb,wBAAoB,kBADP;AAEb,qBAAiB;AAFJ,CAAjB","file":"path-util-compiled.js","sourcesContent":["/**\n * @fileoverview Common helpers for operations on filenames and paths\n * @author Ian VanSchooten\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar path = require(\"path\"),\n    isAbsolute = require(\"path-is-absolute\");\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\n/**\n * Replace Windows with posix style paths\n *\n * @param {string} filepath   Path to convert\n * @returns {string}          Converted filepath\n */\nfunction convertPathToPosix(filepath) {\n    var normalizedFilepath = path.normalize(filepath);\n    var posixFilepath = normalizedFilepath.replace(/\\\\/g, \"/\");\n\n    return posixFilepath;\n}\n\n/**\n * Converts an absolute filepath to a relative path from a given base path\n *\n * For example, if the filepath is `/my/awesome/project/foo.bar`,\n * and the base directory is `/my/awesome/project/`,\n * then this function should return `foo.bar`.\n *\n * path.relative() does something similar, but it requires a baseDir (`from` argument).\n * This function makes it optional and just removes a leading slash if the baseDir is not given.\n *\n * It does not take into account symlinks (for now).\n *\n * @param {string} filepath  Path to convert to relative path.  If already relative,\n *                           it will be assumed to be relative to process.cwd(),\n *                           converted to absolute, and then processed.\n * @param {string} [baseDir] Absolute base directory to resolve the filepath from.\n *                           If not provided, all this function will do is remove\n *                           a leading slash.\n * @returns {string} Relative filepath\n */\nfunction getRelativePath(filepath, baseDir) {\n    var relativePath;\n\n    if (!isAbsolute(filepath)) {\n        filepath = path.resolve(filepath);\n    }\n    if (baseDir) {\n        if (!isAbsolute(baseDir)) {\n            throw new Error(\"baseDir should be an absolute path\");\n        }\n        relativePath = path.relative(baseDir, filepath);\n    } else {\n        relativePath = filepath.replace(/^\\//, \"\");\n    }\n    return relativePath;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    convertPathToPosix: convertPathToPosix,\n    getRelativePath: getRelativePath\n};\n"]}