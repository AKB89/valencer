{"version":3,"sources":["node-event-generator.js"],"names":[],"mappings":";;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAS,kBAAT,CAA4B,OAA5B,EAAqC;AACjC,OAAK,OAAL,GAAe,OAAf;AACH;;AAED,mBAAmB,SAAnB,GAA+B;AAC3B,eAAa,kBADc;;;;;;;AAQ3B,aAAW,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AAChC,SAAK,OAAL,CAAa,IAAb,CAAkB,KAAK,IAAvB,EAA6B,IAA7B;AACH,GAV0B;;;;;;;AAiB3B,aAAW,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AAChC,SAAK,OAAL,CAAa,IAAb,CAAkB,KAAK,IAAL,GAAY,OAA9B,EAAuC,IAAvC;AACH;AAnB0B,CAA/B;;AAsBA,OAAO,OAAP,GAAiB,kBAAjB","file":"node-event-generator-compiled.js","sourcesContent":["/**\n * @fileoverview The event generator for AST nodes.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * The event generator for AST nodes.\n * This implements below interface.\n *\n * ```ts\n * interface EventGenerator {\n *     emitter: EventEmitter;\n *     enterNode(node: ASTNode): void;\n *     leaveNode(node: ASTNode): void;\n * }\n * ```\n *\n * @param {EventEmitter} emitter - An event emitter which is the destination of events.\n * @returns {NodeEventGenerator} new instance.\n */\nfunction NodeEventGenerator(emitter) {\n    this.emitter = emitter;\n}\n\nNodeEventGenerator.prototype = {\n    constructor: NodeEventGenerator,\n\n    /**\n     * Emits an event of entering AST node.\n     * @param {ASTNode} node - A node which was entered.\n     * @returns {void}\n     */\n    enterNode: function enterNode(node) {\n        this.emitter.emit(node.type, node);\n    },\n\n    /**\n     * Emits an event of leaving AST node.\n     * @param {ASTNode} node - A node which was left.\n     * @returns {void}\n     */\n    leaveNode: function leaveNode(node) {\n        this.emitter.emit(node.type + \":exit\", node);\n    }\n};\n\nmodule.exports = NodeEventGenerator;\n"]}