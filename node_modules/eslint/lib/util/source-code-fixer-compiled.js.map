{"version":3,"sources":["source-code-fixer.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,IAAI,QAAQ,QAAQ,OAAR,EAAiB,mBAAjB,CAAZ;;;;;;AAMA,IAAI,MAAM,QAAV;;;;;;;;;AASA,SAAS,yBAAT,CAAmC,CAAnC,EAAsC,CAAtC,EAAyC;AACrC,QAAI,WAAW,EAAE,IAAF,GAAS,EAAE,IAA1B;;AAEA,QAAI,aAAa,CAAjB,EAAoB;AAChB,eAAO,EAAE,MAAF,GAAW,EAAE,MAApB;AACH,KAFD,MAEO;AACH,eAAO,QAAP;AACH;AACJ;;;;;;;;;;AAUD,SAAS,eAAT,GAA2B;AACvB,WAAO,MAAP,CAAc,IAAd;AACH;;;;;;;;;AASD,gBAAgB,UAAhB,GAA6B,UAAS,UAAT,EAAqB,QAArB,EAA+B;;AAExD,UAAM,gBAAN;;AAEA,QAAI,CAAC,UAAL,EAAiB;AACb,cAAM,uBAAN;AACA,eAAO;AACH,mBAAO,KADJ;AAEH,sBAAU,QAFP;AAGH,oBAAQ;AAHL,SAAP;AAKH;;;AAGD,QAAI,oBAAoB,EAAxB;QACI,QAAQ,EADZ;QAEI,OAAO,WAAW,IAFtB;QAGI,aAAa,KAAK,MAAL,GAAc,CAH/B;QAII,SAAU,WAAW,MAAX,GAAoB,GAApB,GAA0B,EAJxC;;AAMA,aAAS,OAAT,CAAiB,UAAS,OAAT,EAAkB;AAC/B,YAAI,QAAQ,cAAR,CAAuB,KAAvB,CAAJ,EAAmC;AAC/B,kBAAM,IAAN,CAAW,OAAX;AACH,SAFD,MAEO;AACH,8BAAkB,IAAlB,CAAuB,OAAvB;AACH;AACJ,KAND;;AAQA,QAAI,MAAM,MAAV,EAAkB;AACd,cAAM,sBAAN;;;AAGA,cAAM,IAAN,CAAW,UAAS,CAAT,EAAY,CAAZ,EAAe;AACtB,mBAAO,EAAE,GAAF,CAAM,KAAN,CAAY,CAAZ,IAAiB,EAAE,GAAF,CAAM,KAAN,CAAY,CAAZ,CAAjB,IAAmC,EAAE,GAAF,CAAM,KAAN,CAAY,CAAZ,IAAiB,EAAE,GAAF,CAAM,KAAN,CAAY,CAAZ,CAA3D;AACH,SAFD;;;AAKA,YAAI,QAAQ,KAAK,KAAL,CAAW,EAAX,CAAZ;;AAEA,cAAM,OAAN,CAAc,UAAS,OAAT,EAAkB;AAC5B,gBAAI,MAAM,QAAQ,GAAlB;AACA,gBAAI,QAAQ,IAAI,KAAJ,CAAU,CAAV,CAAZ;AACA,gBAAI,MAAM,IAAI,KAAJ,CAAU,CAAV,CAAV;AACA,gBAAI,gBAAgB,IAAI,IAAxB;;AAEA,gBAAI,MAAM,UAAV,EAAsB;AAClB,oBAAI,QAAQ,CAAZ,EAAe;;;AAGX,6BAAS,EAAT;AACA,4BAAQ,CAAR;AACH;;AAED,oBAAI,UAAU,CAAV,IAAe,cAAc,CAAd,MAAqB,GAAxC,EAA6C;;;AAGzC,6BAAS,GAAT;AACA,oCAAgB,cAAc,KAAd,CAAoB,CAApB,CAAhB;AACH;;AAED,sBAAM,MAAN,CAAa,KAAb,EAAoB,MAAM,KAA1B,EAAiC,aAAjC;AACA,6BAAa,KAAb;AACH,aAjBD,MAiBO;AACH,kCAAkB,IAAlB,CAAuB,OAAvB;AACH;AACJ,SA1BD;;AA4BA,eAAO;AACH,mBAAO,IADJ;AAEH,sBAAU,kBAAkB,IAAlB,CAAuB,yBAAvB,CAFP;AAGH,oBAAQ,SAAS,MAAM,IAAN,CAAW,EAAX;AAHd,SAAP;AAKH,KA5CD,MA4CO;AACH,cAAM,mBAAN;AACA,eAAO;AACH,mBAAO,KADJ;AAEH,sBAAU,QAFP;AAGH,oBAAQ,SAAS;AAHd,SAAP;AAKH;AACJ,CAhFD;;AAkFA,OAAO,OAAP,GAAiB,eAAjB","file":"source-code-fixer-compiled.js","sourcesContent":["/**\n * @fileoverview An object that caches and applies source code fixes.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar debug = require(\"debug\")(\"eslint:text-fixer\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar BOM = \"\\uFEFF\";\n\n/**\n * Compares items in a messages array by line and column.\n * @param {Message} a The first message.\n * @param {Message} b The second message.\n * @returns {int} -1 if a comes before b, 1 if a comes after b, 0 if equal.\n * @private\n */\nfunction compareMessagesByLocation(a, b) {\n    var lineDiff = a.line - b.line;\n\n    if (lineDiff === 0) {\n        return a.column - b.column;\n    } else {\n        return lineDiff;\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Utility for apply fixes to source code.\n * @constructor\n */\nfunction SourceCodeFixer() {\n    Object.freeze(this);\n}\n\n/**\n * Applies the fixes specified by the messages to the given text. Tries to be\n * smart about the fixes and won't apply fixes over the same area in the text.\n * @param {SourceCode} sourceCode The source code to apply the changes to.\n * @param {Message[]} messages The array of messages reported by ESLint.\n * @returns {Object} An object containing the fixed text and any unfixed messages.\n */\nSourceCodeFixer.applyFixes = function(sourceCode, messages) {\n\n    debug(\"Applying fixes\");\n\n    if (!sourceCode) {\n        debug(\"No source code to fix\");\n        return {\n            fixed: false,\n            messages: messages,\n            output: \"\"\n        };\n    }\n\n    // clone the array\n    var remainingMessages = [],\n        fixes = [],\n        text = sourceCode.text,\n        lastFixPos = text.length + 1,\n        prefix = (sourceCode.hasBOM ? BOM : \"\");\n\n    messages.forEach(function(problem) {\n        if (problem.hasOwnProperty(\"fix\")) {\n            fixes.push(problem);\n        } else {\n            remainingMessages.push(problem);\n        }\n    });\n\n    if (fixes.length) {\n        debug(\"Found fixes to apply\");\n\n        // sort in reverse order of occurrence\n        fixes.sort(function(a, b) {\n            return b.fix.range[1] - a.fix.range[1] || b.fix.range[0] - a.fix.range[0];\n        });\n\n        // split into array of characters for easier manipulation\n        var chars = text.split(\"\");\n\n        fixes.forEach(function(problem) {\n            var fix = problem.fix;\n            var start = fix.range[0];\n            var end = fix.range[1];\n            var insertionText = fix.text;\n\n            if (end < lastFixPos) {\n                if (start < 0) {\n\n                    // Remove BOM.\n                    prefix = \"\";\n                    start = 0;\n                }\n\n                if (start === 0 && insertionText[0] === BOM) {\n\n                    // Set BOM.\n                    prefix = BOM;\n                    insertionText = insertionText.slice(1);\n                }\n\n                chars.splice(start, end - start, insertionText);\n                lastFixPos = start;\n            } else {\n                remainingMessages.push(problem);\n            }\n        });\n\n        return {\n            fixed: true,\n            messages: remainingMessages.sort(compareMessagesByLocation),\n            output: prefix + chars.join(\"\")\n        };\n    } else {\n        debug(\"No fixes to apply\");\n        return {\n            fixed: false,\n            messages: messages,\n            output: prefix + text\n        };\n    }\n};\n\nmodule.exports = SourceCodeFixer;\n"]}