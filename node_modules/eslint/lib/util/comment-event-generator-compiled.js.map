{"version":3,"sources":["comment-event-generator.js"],"names":[],"mappings":";;;;;AAKA;;;;;;;;;;;;;;;;AAeA,SAAS,YAAT,CAAsB,QAAtB,EAAgC,OAAhC,EAAyC,IAAzC,EAA+C,SAA/C,EAA0D;AACtD,QAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACrB,iBAAS,OAAT,CAAiB,UAAS,IAAT,EAAe;AAC5B,gBAAI,QAAQ,KAAK,OAAL,CAAa,KAAK,GAAlB,CAAZ;;AAEA,gBAAI,SAAS,CAAb,EAAgB;AACZ,qBAAK,MAAL,CAAY,KAAZ,EAAmB,CAAnB;AACH,aAFD,MAEO;AACH,qBAAK,IAAL,CAAU,KAAK,GAAf;AACA,wBAAQ,IAAR,CAAa,KAAK,IAAL,GAAY,SAAzB,EAAoC,IAApC;AACH;AACJ,SATD;AAUH;AACJ;;;;;;;;AAQD,SAAS,iBAAT,CAA2B,SAA3B,EAAsC,QAAtC,EAAgD;AAC5C,iBACI,QADJ,EAEI,UAAU,OAFd,EAGI,UAAU,gBAHd,EAII,SAJJ;AAKH;;;;;;;;AAQD,SAAS,gBAAT,CAA0B,SAA1B,EAAqC,QAArC,EAA+C;AAC3C,iBACI,QADJ,EAEI,UAAU,OAFd,EAGI,UAAU,eAHd,EAII,cAJJ;AAKH;;;;;;;;;;;;;;;AAeD,SAAS,qBAAT,CAA+B,sBAA/B,EAAuD,UAAvD,EAAmE;AAC/D,SAAK,QAAL,GAAgB,sBAAhB;AACA,SAAK,OAAL,GAAe,uBAAuB,OAAtC;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,gBAAL,GAAwB,EAAxB;AACA,SAAK,eAAL,GAAuB,EAAvB;AACH;;AAED,sBAAsB,SAAtB,GAAkC;AAC9B,iBAAa,qBADiB;;;;;;;AAQ9B,eAAW,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AAChC,YAAI,WAAW,KAAK,UAAL,CAAgB,WAAhB,CAA4B,IAA5B,CAAf;;AAEA,0BAAkB,IAAlB,EAAwB,SAAS,OAAjC;AACA,aAAK,QAAL,CAAc,SAAd,CAAwB,IAAxB;AACA,0BAAkB,IAAlB,EAAwB,SAAS,QAAjC;AACH,KAd6B;;;;;;;AAqB9B,eAAW,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AAChC,YAAI,WAAW,KAAK,UAAL,CAAgB,WAAhB,CAA4B,IAA5B,CAAf;;AAEA,yBAAiB,IAAjB,EAAuB,SAAS,QAAhC;AACA,aAAK,QAAL,CAAc,SAAd,CAAwB,IAAxB;AACA,yBAAiB,IAAjB,EAAuB,SAAS,OAAhC;AACH;AA3B6B,CAAlC;;AA8BA,OAAO,OAAP,GAAiB,qBAAjB","file":"comment-event-generator-compiled.js","sourcesContent":["/**\n * @fileoverview The event generator for comments.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Check collection of comments to prevent double event for comment as\n * leading and trailing, then emit event if passing\n * @param {ASTNode[]} comments - Collection of comment nodes\n * @param {EventEmitter} emitter - The event emitter which is the destination of events.\n * @param {Object[]} locs - List of locations of previous comment nodes\n * @param {string} eventName - Event name postfix\n * @returns {void}\n */\nfunction emitComments(comments, emitter, locs, eventName) {\n    if (comments.length > 0) {\n        comments.forEach(function(node) {\n            var index = locs.indexOf(node.loc);\n\n            if (index >= 0) {\n                locs.splice(index, 1);\n            } else {\n                locs.push(node.loc);\n                emitter.emit(node.type + eventName, node);\n            }\n        });\n    }\n}\n\n/**\n * Shortcut to check and emit enter of comment nodes\n * @param {CommentEventGenerator} generator - A generator to emit.\n * @param {ASTNode[]} comments - Collection of comment nodes\n * @returns {void}\n */\nfunction emitCommentsEnter(generator, comments) {\n    emitComments(\n        comments,\n        generator.emitter,\n        generator.commentLocsEnter,\n        \"Comment\");\n}\n\n/**\n * Shortcut to check and emit exit of comment nodes\n * @param {CommentEventGenerator} generator - A generator to emit.\n * @param {ASTNode[]} comments Collection of comment nodes\n * @returns {void}\n */\nfunction emitCommentsExit(generator, comments) {\n    emitComments(\n        comments,\n        generator.emitter,\n        generator.commentLocsExit,\n        \"Comment:exit\");\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * The event generator for comments.\n * This is the decorator pattern.\n * This generates events of comments before/after events which are generated the original generator.\n *\n * @param {EventGenerator} originalEventGenerator - An event generator which is the decoration target.\n * @param {SourceCode} sourceCode - A source code which has comments.\n * @returns {CommentEventGenerator} new instance.\n */\nfunction CommentEventGenerator(originalEventGenerator, sourceCode) {\n    this.original = originalEventGenerator;\n    this.emitter = originalEventGenerator.emitter;\n    this.sourceCode = sourceCode;\n    this.commentLocsEnter = [];\n    this.commentLocsExit = [];\n}\n\nCommentEventGenerator.prototype = {\n    constructor: CommentEventGenerator,\n\n    /**\n     * Emits an event of entering comments.\n     * @param {ASTNode} node - A node which was entered.\n     * @returns {void}\n     */\n    enterNode: function enterNode(node) {\n        var comments = this.sourceCode.getComments(node);\n\n        emitCommentsEnter(this, comments.leading);\n        this.original.enterNode(node);\n        emitCommentsEnter(this, comments.trailing);\n    },\n\n    /**\n     * Emits an event of leaving comments.\n     * @param {ASTNode} node - A node which was left.\n     * @returns {void}\n     */\n    leaveNode: function leaveNode(node) {\n        var comments = this.sourceCode.getComments(node);\n\n        emitCommentsExit(this, comments.trailing);\n        this.original.leaveNode(node);\n        emitCommentsExit(this, comments.leading);\n    }\n};\n\nmodule.exports = CommentEventGenerator;\n"]}