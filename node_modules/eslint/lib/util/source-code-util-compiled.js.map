{"version":3,"sources":["source-code-util.js"],"names":[],"mappings":"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","file":"source-code-util-compiled.js","sourcesContent":["/**\n * @fileoverview Tools for obtaining SourceCode objects.\n * @author Ian VanSchooten\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar lodash = require(\"lodash\"),\n    debug = require(\"debug\"),\n    CLIEngine = require(\"../cli-engine\"),\n    eslint = require(\"../eslint\"),\n    globUtil = require(\"./glob-util\"),\n    defaultOptions = require(\"../../conf/cli-options\");\n\ndebug = debug(\"eslint:source-code-util\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Get the SourceCode object for a single file\n * @param   {string}     filename The fully resolved filename to get SourceCode from.\n * @param   {Object}     options  A CLIEngine options object.\n * @returns {Array}               Array of the SourceCode object representing the file\n *                                and fatal error message.\n */\nfunction getSourceCodeOfFile(filename, options) {\n    debug(\"getting sourceCode of\", filename);\n    var opts = lodash.assign({}, options, { rules: {}});\n    var cli = new CLIEngine(opts);\n    var results = cli.executeOnFiles([filename]);\n\n    if (results && results.results[0] && results.results[0].messages[0] && results.results[0].messages[0].fatal) {\n        var msg = results.results[0].messages[0];\n\n        throw new Error(\"(\" + filename + \":\" + msg.line + \":\" + msg.column + \") \" + msg.message);\n    }\n    var sourceCode = eslint.getSourceCode();\n\n    return sourceCode;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\n/**\n * This callback is used to measure execution status in a progress bar\n * @callback progressCallback\n * @param {number} The total number of times the callback will be called.\n */\n\n/**\n * Gets the SourceCode of a single file, or set of files.\n * @param   {string[]|string}  patterns   A filename, directory name, or glob,\n *                                        or an array of them\n * @param   {Object}           [options]  A CLIEngine options object. If not provided,\n *                                        the default cli options will be used.\n * @param   {progressCallback} [cb]       Callback for reporting execution status\n * @returns {Object}                      The SourceCode of all processed files.\n */\nfunction getSourceCodeOfFiles(patterns, options, cb) {\n    var sourceCodes = {},\n        filenames,\n        opts;\n\n    if (typeof patterns === \"string\") {\n        patterns = [patterns];\n    }\n\n    defaultOptions = lodash.assign({}, defaultOptions, {cwd: process.cwd()});\n\n    if (typeof options === \"undefined\") {\n        opts = defaultOptions;\n    } else if (typeof options === \"function\") {\n        cb = options;\n        opts = defaultOptions;\n    } else if (typeof options === \"object\") {\n        opts = lodash.assign({}, defaultOptions, options);\n    }\n    debug(\"constructed options:\", opts);\n    patterns = globUtil.resolveFileGlobPatterns(patterns, opts);\n\n    filenames = globUtil.listFilesToProcess(patterns, opts).reduce(function(files, fileInfo) {\n        return !fileInfo.ignored ? files.concat(fileInfo.filename) : files;\n    }, []);\n    if (filenames.length === 0) {\n        debug(\"Did not find any files matching pattern(s): \" + patterns);\n    }\n    filenames.forEach(function(filename) {\n        var sourceCode = getSourceCodeOfFile(filename, opts);\n\n        if (sourceCode) {\n            debug(\"got sourceCode of\", filename);\n            sourceCodes[filename] = sourceCode;\n        }\n        if (cb) {\n            cb(filenames.length); // eslint-disable-line callback-return\n        }\n    });\n    return sourceCodes;\n}\n\nmodule.exports = {\n    getSourceCodeOfFiles: getSourceCodeOfFiles\n};\n"]}