{"version":3,"sources":["glob-util.js"],"names":[],"mappings":"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","file":"glob-util-compiled.js","sourcesContent":["/**\n * @fileoverview Utilities for working with globs and the filesystem.\n * @author Ian VanSchooten\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar debug = require(\"debug\"),\n    fs = require(\"fs\"),\n    path = require(\"path\"),\n    glob = require(\"glob\"),\n    shell = require(\"shelljs\"),\n\n    pathUtil = require(\"./path-util\"),\n    IgnoredPaths = require(\"../ignored-paths\");\n\ndebug = debug(\"eslint:glob-util\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if a provided path is a directory and returns a glob string matching\n * all files under that directory if so, the path itself otherwise.\n *\n * Reason for this is that `glob` needs `/**` to collect all the files under a\n * directory where as our previous implementation without `glob` simply walked\n * a directory that is passed. So this is to maintain backwards compatibility.\n *\n * Also makes sure all path separators are POSIX style for `glob` compatibility.\n *\n * @param {object}   [options]                    An options object\n * @param {string[]} [options.extensions=[\".js\"]] An array of accepted extensions\n * @param {string}   [options.cwd=process.cwd()]  The cwd to use to resolve relative pathnames\n * @returns {Function} A function that takes a pathname and returns a glob that\n *                     matches all files with the provided extensions if\n *                     pathname is a directory.\n */\nfunction processPath(options) {\n    var cwd = (options && options.cwd) || process.cwd();\n    var extensions = (options && options.extensions) || [\".js\"];\n\n    extensions = extensions.map(function(ext) {\n        return ext.charAt(0) === \".\" ? ext.substr(1) : ext;\n    });\n\n    var suffix = \"/**\";\n\n    if (extensions.length === 1) {\n        suffix += \"/*.\" + extensions[0];\n    } else {\n        suffix += \"/*.{\" + extensions.join(\",\") + \"}\";\n    }\n\n    /**\n     * A function that converts a directory name to a glob pattern\n     *\n     * @param {string} pathname The directory path to be modified\n     * @returns {string} The glob path or the file path itself\n     * @private\n     */\n    return function(pathname) {\n        var newPath = pathname;\n        var resolvedPath = path.resolve(cwd, pathname);\n\n        if (shell.test(\"-d\", resolvedPath)) {\n            newPath = pathname.replace(/[\\/\\\\]$/, \"\") + suffix;\n        }\n\n        return pathUtil.convertPathToPosix(newPath);\n    };\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Resolves any directory patterns into glob-based patterns for easier handling.\n * @param   {string[]} patterns    File patterns (such as passed on the command line).\n * @param   {Object} options       An options object.\n * @returns {string[]} The equivalent glob patterns and filepath strings.\n */\nfunction resolveFileGlobPatterns(patterns, options) {\n\n    var processPathExtensions = processPath(options);\n\n    return patterns.map(processPathExtensions);\n}\n\n/**\n * Build a list of absolute filesnames on which ESLint will act.\n * Ignored files are excluded from the results, as are duplicates.\n *\n * @param   {string[]} globPatterns            Glob patterns.\n * @param   {Object}   [options]               An options object.\n * @param   {string}   [options.cwd]           CWD (considered for relative filenames)\n * @param   {boolean}  [options.ignore]        False disables use of .eslintignore.\n * @param   {string}   [options.ignorePath]    The ignore file to use instead of .eslintignore.\n * @param   {string}   [options.ignorePattern] A pattern of files to ignore.\n * @returns {string[]} Resolved absolute filenames.\n */\nfunction listFilesToProcess(globPatterns, options) {\n    var ignoredPaths,\n        files = [],\n        added = {},\n        globOptions;\n\n    var cwd = (options && options.cwd) || process.cwd();\n\n    /**\n     * Executes the linter on a file defined by the `filename`. Skips\n     * unsupported file extensions and any files that are already linted.\n     * @param {string} filename The file to be processed\n     * @param {boolean} shouldWarnIgnored Whether or not a report should be made if\n     *                                    the file is ignored\n     * @returns {void}\n     */\n    function addFile(filename, shouldWarnIgnored) {\n        var ignored = false;\n        var isSilentlyIgnored;\n\n        if (ignoredPaths.contains(filename, \"default\")) {\n            ignored = (options.ignore !== false) && shouldWarnIgnored;\n            isSilentlyIgnored = !shouldWarnIgnored;\n        }\n\n        if (options.ignore !== false) {\n            if (ignoredPaths.contains(filename, \"custom\")) {\n                if (shouldWarnIgnored) {\n                    ignored = true;\n                } else {\n                    isSilentlyIgnored = true;\n                }\n            }\n        }\n\n        if (isSilentlyIgnored && !ignored) {\n            return;\n        }\n\n        if (added[filename]) {\n            return;\n        }\n        files.push({filename: filename, ignored: ignored});\n        added[filename] = true;\n    }\n\n    options = options || { ignore: true, dotfiles: true };\n    ignoredPaths = new IgnoredPaths(options);\n    globOptions = {\n        nodir: true,\n        cwd: cwd\n    };\n\n    debug(\"Creating list of files to process.\");\n    globPatterns.forEach(function(pattern) {\n        var file = path.resolve(cwd, pattern);\n\n        if (shell.test(\"-f\", file)) {\n            addFile(fs.realpathSync(file), !shell.test(\"-d\", file));\n        } else {\n            glob.sync(pattern, globOptions).forEach(function(globMatch) {\n                addFile(path.resolve(cwd, globMatch), false);\n            });\n        }\n    });\n\n    return files;\n}\n\nmodule.exports = {\n    resolveFileGlobPatterns: resolveFileGlobPatterns,\n    listFilesToProcess: listFilesToProcess\n};\n"]}