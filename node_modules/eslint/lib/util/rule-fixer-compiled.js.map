{"version":3,"sources":["rule-fixer.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;;;;;;;AAmBA,SAAS,YAAT,CAAsB,KAAtB,EAA6B,IAA7B,EAAmC;AAC/B,WAAO;AACH,eAAO,CAAC,KAAD,EAAQ,KAAR,CADJ;AAEH,cAAM;AAFH,KAAP;AAIH;;;;;;;;;;AAUD,SAAS,SAAT,GAAqB;AACjB,WAAO,MAAP,CAAc,IAAd;AACH;;AAED,UAAU,SAAV,GAAsB;AAClB,iBAAa,SADK;;;;;;;;;AAUlB,qBAAiB,UAAS,WAAT,EAAsB,IAAtB,EAA4B;AACzC,eAAO,KAAK,oBAAL,CAA0B,YAAY,KAAtC,EAA6C,IAA7C,CAAP;AACH,KAZiB;;;;;;;;;;AAsBlB,0BAAsB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AACxC,eAAO,aAAa,MAAM,CAAN,CAAb,EAAuB,IAAvB,CAAP;AACH,KAxBiB;;;;;;;;;AAiClB,sBAAkB,UAAS,WAAT,EAAsB,IAAtB,EAA4B;AAC1C,eAAO,KAAK,qBAAL,CAA2B,YAAY,KAAvC,EAA8C,IAA9C,CAAP;AACH,KAnCiB;;;;;;;;;;AA6ClB,2BAAuB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AACzC,eAAO,aAAa,MAAM,CAAN,CAAb,EAAuB,IAAvB,CAAP;AACH,KA/CiB;;;;;;;;;AAwDlB,iBAAa,UAAS,WAAT,EAAsB,IAAtB,EAA4B;AACrC,eAAO,KAAK,gBAAL,CAAsB,YAAY,KAAlC,EAAyC,IAAzC,CAAP;AACH,KA1DiB;;;;;;;;;;AAoElB,sBAAkB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AACpC,eAAO;AACH,mBAAO,KADJ;AAEH,kBAAM;AAFH,SAAP;AAIH,KAzEiB;;;;;;;;AAiFlB,YAAQ,UAAS,WAAT,EAAsB;AAC1B,eAAO,KAAK,WAAL,CAAiB,YAAY,KAA7B,CAAP;AACH,KAnFiB;;;;;;;;;AA4FlB,iBAAa,UAAS,KAAT,EAAgB;AACzB,eAAO;AACH,mBAAO,KADJ;AAEH,kBAAM;AAFH,SAAP;AAIH;;AAjGiB,CAAtB;;AAsGA,OAAO,OAAP,GAAiB,SAAjB","file":"rule-fixer-compiled.js","sourcesContent":["/**\n * @fileoverview An object that creates fix commands for rules.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// none!\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Creates a fix command that inserts text at the specified index in the source text.\n * @param {int} index The 0-based index at which to insert the new text.\n * @param {string} text The text to insert.\n * @returns {Object} The fix command.\n * @private\n */\nfunction insertTextAt(index, text) {\n    return {\n        range: [index, index],\n        text: text\n    };\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Creates code fixing commands for rules.\n * @constructor\n */\nfunction RuleFixer() {\n    Object.freeze(this);\n}\n\nRuleFixer.prototype = {\n    constructor: RuleFixer,\n\n    /**\n     * Creates a fix command that inserts text after the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to insert after.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextAfter: function(nodeOrToken, text) {\n        return this.insertTextAfterRange(nodeOrToken.range, text);\n    },\n\n    /**\n     * Creates a fix command that inserts text after the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextAfterRange: function(range, text) {\n        return insertTextAt(range[1], text);\n    },\n\n    /**\n     * Creates a fix command that inserts text before the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to insert before.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextBefore: function(nodeOrToken, text) {\n        return this.insertTextBeforeRange(nodeOrToken.range, text);\n    },\n\n    /**\n     * Creates a fix command that inserts text before the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextBeforeRange: function(range, text) {\n        return insertTextAt(range[0], text);\n    },\n\n    /**\n     * Creates a fix command that replaces text at the node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to remove.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    replaceText: function(nodeOrToken, text) {\n        return this.replaceTextRange(nodeOrToken.range, text);\n    },\n\n    /**\n     * Creates a fix command that replaces text at the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    replaceTextRange: function(range, text) {\n        return {\n            range: range,\n            text: text\n        };\n    },\n\n    /**\n     * Creates a fix command that removes the node or token from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to remove.\n     * @returns {Object} The fix command.\n     */\n    remove: function(nodeOrToken) {\n        return this.removeRange(nodeOrToken.range);\n    },\n\n    /**\n     * Creates a fix command that removes the specified range of text from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to remove, first item is start of range, second\n     *      is end of range.\n     * @returns {Object} The fix command.\n     */\n    removeRange: function(range) {\n        return {\n            range: range,\n            text: \"\"\n        };\n    }\n\n};\n\n\nmodule.exports = RuleFixer;\n"]}