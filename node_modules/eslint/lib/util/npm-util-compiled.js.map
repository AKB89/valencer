{"version":3,"sources":["npm-util.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,KAAK,QAAQ,IAAR,CAAT;IACI,OAAO,QAAQ,MAAR,CADX;IAEI,QAAQ,QAAQ,SAAR,CAFZ;IAGI,MAAM,QAAQ,YAAR,CAHV;;;;;;;;;;;;;AAgBA,SAAS,eAAT,CAAyB,QAAzB,EAAmC;AAC/B,QAAI,MAAM,KAAK,OAAL,CAAa,YAAY,QAAQ,GAAR,EAAzB,CAAV;;AAEA,OAAG;AACC,YAAI,UAAU,KAAK,IAAL,CAAU,GAAV,EAAe,cAAf,CAAd;;AAEA,YAAI,CAAC,GAAG,UAAH,CAAc,OAAd,CAAL,EAA6B;AACzB,kBAAM,KAAK,IAAL,CAAU,GAAV,EAAe,IAAf,CAAN;AACA;AACH;AACD,eAAO,OAAP;AACH,KARD,QAQS,QAAQ,KAAK,OAAL,CAAa,GAAb,EAAkB,IAAlB,CARjB;AASA,WAAO,IAAP;AACH;;;;;;;;;;;AAWD,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AAClC,QAAI,MAAM,OAAN,CAAc,QAAd,CAAJ,EAA6B;AACzB,mBAAW,SAAS,IAAT,CAAc,GAAd,CAAX;AACH;AACD,UAAM,IAAN,CAAW,sBAAsB,QAAjC,EAA2C,EAAC,OAAO,SAAR,EAA3C;AACH;;;;;;;;;;;;;AAaD,SAAS,KAAT,CAAe,QAAf,EAAyB,GAAzB,EAA8B;AAC1B,QAAI,OAAO,EAAX;AACA,QAAI,UAAW,GAAD,GAAQ,gBAAgB,IAAI,QAApB,CAAR,GAAwC,iBAAtD;AACA,QAAI,QAAJ;;AAEA,QAAI,CAAC,OAAL,EAAc;AACV,cAAM,IAAI,KAAJ,CAAU,mEAAV,CAAN;AACH;;AAED,QAAI;AACA,mBAAW,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,OAAhB,EAAyB,MAAzB,CAAX,CAAX;AACH,KAFD,CAEE,OAAO,CAAP,EAAU;AACR,YAAI,IAAJ,CAAS,mFAAT;AACA,cAAM,IAAI,KAAJ,CAAU,CAAV,CAAN;AACH;;AAED,QAAI,IAAI,eAAJ,IAAuB,OAAO,SAAS,eAAhB,KAAoC,QAA/D,EAAyE;AACrE,eAAO,KAAK,MAAL,CAAY,OAAO,IAAP,CAAY,SAAS,eAArB,CAAZ,CAAP;AACH;AACD,QAAI,IAAI,YAAJ,IAAoB,OAAO,SAAS,YAAhB,KAAiC,QAAzD,EAAmE;AAC/D,eAAO,KAAK,MAAL,CAAY,OAAO,IAAP,CAAY,SAAS,YAArB,CAAZ,CAAP;AACH;AACD,WAAO,SAAS,MAAT,CAAgB,UAAS,MAAT,EAAiB,GAAjB,EAAsB;AACzC,eAAO,GAAP,IAAc,KAAK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAArC;AACA,eAAO,MAAP;AACH,KAHM,EAGJ,EAHI,CAAP;AAIH;;;;;;;;;;;;;AAaD,SAAS,SAAT,CAAmB,QAAnB,EAA6B,OAA7B,EAAsC;AAClC,WAAO,MAAM,QAAN,EAAgB,EAAC,cAAc,IAAf,EAAqB,UAAU,OAA/B,EAAhB,CAAP;AACH;;;;;;;;;;;;AAYD,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AAC5B,WAAO,MAAM,QAAN,EAAgB,EAAC,iBAAiB,IAAlB,EAAhB,CAAP;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB;AACb,wBAAoB,kBADP;AAEb,eAAW,SAFE;AAGb,kBAAc;AAHD,CAAjB","file":"npm-util-compiled.js","sourcesContent":["/**\n * @fileoverview Utility for executing npm commands.\n * @author Ian VanSchooten\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar fs = require(\"fs\"),\n    path = require(\"path\"),\n    shell = require(\"shelljs\"),\n    log = require(\"../logging\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Find the closest package.json file, starting at process.cwd (by default),\n * and working up to root.\n *\n * @param   {string} [startDir=process.cwd()] Starting directory\n * @returns {string}                          Absolute path to closest package.json file\n */\nfunction findPackageJson(startDir) {\n    var dir = path.resolve(startDir || process.cwd());\n\n    do {\n        var pkgfile = path.join(dir, \"package.json\");\n\n        if (!fs.existsSync(pkgfile)) {\n            dir = path.join(dir, \"..\");\n            continue;\n        }\n        return pkgfile;\n    } while (dir !== path.resolve(dir, \"..\"));\n    return null;\n}\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\n/**\n * Install node modules synchronously and save to devDependencies in package.json\n * @param   {string|string[]} packages Node module or modules to install\n * @returns {void}\n */\nfunction installSyncSaveDev(packages) {\n    if (Array.isArray(packages)) {\n        packages = packages.join(\" \");\n    }\n    shell.exec(\"npm i --save-dev \" + packages, {stdio: \"inherit\"});\n}\n\n/**\n * Check whether node modules are include in a project's package.json.\n *\n * @param   {string[]} packages           Array of node module names\n * @param   {Object}  opt                 Options Object\n * @param   {boolean} opt.dependencies    Set to true to check for direct dependencies\n * @param   {boolean} opt.devDependencies Set to true to check for development dependencies\n * @param   {boolean} opt.startdir        Directory to begin searching from\n * @returns {Object}                      An object whose keys are the module names\n *                                        and values are booleans indicating installation.\n */\nfunction check(packages, opt) {\n    var deps = [];\n    var pkgJson = (opt) ? findPackageJson(opt.startDir) : findPackageJson();\n    var fileJson;\n\n    if (!pkgJson) {\n        throw new Error(\"Could not find a package.json file. Run 'npm init' to create one.\");\n    }\n\n    try {\n        fileJson = JSON.parse(fs.readFileSync(pkgJson, \"utf8\"));\n    } catch (e) {\n        log.info(\"Could not read package.json file. Please check that the file contains valid JSON.\");\n        throw new Error(e);\n    }\n\n    if (opt.devDependencies && typeof fileJson.devDependencies === \"object\") {\n        deps = deps.concat(Object.keys(fileJson.devDependencies));\n    }\n    if (opt.dependencies && typeof fileJson.dependencies === \"object\") {\n        deps = deps.concat(Object.keys(fileJson.dependencies));\n    }\n    return packages.reduce(function(status, pkg) {\n        status[pkg] = deps.indexOf(pkg) !== -1;\n        return status;\n    }, {});\n}\n\n/**\n * Check whether node modules are included in the dependencies of a project's\n * package.json.\n *\n * Convienience wrapper around check().\n *\n * @param   {string[]} packages  Array of node modules to check.\n * @param   {string}   rootDir   The directory contianing a package.json\n * @returns {Object}             An object whose keys are the module names\n *                               and values are booleans indicating installation.\n */\nfunction checkDeps(packages, rootDir) {\n    return check(packages, {dependencies: true, startDir: rootDir});\n}\n\n/**\n * Check whether node modules are included in the devDependencies of a project's\n * package.json.\n *\n * Convienience wrapper around check().\n *\n * @param   {string[]} packages  Array of node modules to check.\n * @returns {Object}             An object whose keys are the module names\n *                               and values are booleans indicating installation.\n */\nfunction checkDevDeps(packages) {\n    return check(packages, {devDependencies: true});\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    installSyncSaveDev: installSyncSaveDev,\n    checkDeps: checkDeps,\n    checkDevDeps: checkDevDeps\n};\n"]}