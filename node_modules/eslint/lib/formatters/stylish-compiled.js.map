{"version":3,"sources":["stylish.js"],"names":[],"mappings":";;;;AAIA;;AAEA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;IACI,QAAQ,QAAQ,YAAR,CADZ;;;;;;;;;;;;AAaA,SAAS,SAAT,CAAmB,IAAnB,EAAyB,KAAzB,EAAgC;AAC5B,WAAQ,UAAU,CAAV,GAAc,IAAd,GAAqB,OAAO,GAApC;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB,UAAS,OAAT,EAAkB;;AAE/B,QAAI,SAAS,IAAb;QACI,QAAQ,CADZ;QAEI,SAAS,CAFb;QAGI,WAAW,CAHf;QAII,eAAe,QAJnB;;AAMA,YAAQ,OAAR,CAAgB,UAAS,MAAT,EAAiB;AAC7B,YAAI,WAAW,OAAO,QAAtB;;AAEA,YAAI,SAAS,MAAT,KAAoB,CAAxB,EAA2B;AACvB;AACH;;AAED,iBAAS,SAAS,MAAlB;AACA,kBAAU,MAAM,SAAN,CAAgB,OAAO,QAAvB,IAAmC,IAA7C;;AAEA,kBAAU,MACN,SAAS,GAAT,CAAa,UAAS,OAAT,EAAkB;AAC3B,gBAAI,WAAJ;;AAEA,gBAAI,QAAQ,KAAR,IAAiB,QAAQ,QAAR,KAAqB,CAA1C,EAA6C;AACzC,8BAAc,MAAM,GAAN,CAAU,OAAV,CAAd;AACA,+BAAe,KAAf;AACA;AACH,aAJD,MAIO;AACH,8BAAc,MAAM,MAAN,CAAa,SAAb,CAAd;AACA;AACH;;AAED,mBAAO,CACH,EADG,EAEH,QAAQ,IAAR,IAAgB,CAFb,EAGH,QAAQ,MAAR,IAAkB,CAHf,EAIH,WAJG,EAKH,QAAQ,OAAR,CAAgB,OAAhB,CAAwB,KAAxB,EAA+B,EAA/B,CALG,EAMH,MAAM,GAAN,CAAU,QAAQ,MAAR,IAAkB,EAA5B,CANG,CAAP;AAQH,SApBD,CADM,EAsBN;AACI,mBAAO,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,CADX;AAEI,0BAAc,sBAAS,GAAT,EAAc;AACxB,uBAAO,MAAM,UAAN,CAAiB,GAAjB,EAAsB,MAA7B;AACH;AAJL,SAtBM,EA4BR,KA5BQ,CA4BF,IA5BE,EA4BI,GA5BJ,CA4BQ,UAAS,EAAT,EAAa;AAC3B,mBAAO,GAAG,OAAH,CAAW,eAAX,EAA4B,UAAS,CAAT,EAAY,EAAZ,EAAgB,EAAhB,EAAoB;AACnD,uBAAO,MAAM,GAAN,CAAU,KAAK,GAAL,GAAW,EAArB,CAAP;AACH,aAFM,CAAP;AAGH,SAhCS,EAgCP,IAhCO,CAgCF,IAhCE,IAgCM,MAhChB;AAiCH,KA3CD;;AA6CA,QAAI,QAAQ,CAAZ,EAAe;AACX,kBAAU,MAAM,YAAN,EAAoB,IAApB,CAAyB,CAC/B,IAD+B,EACpB,KADoB,EACb,UAAU,UAAV,EAAsB,KAAtB,CADa,EAE/B,IAF+B,EAEzB,MAFyB,EAEjB,UAAU,QAAV,EAAoB,MAApB,CAFiB,EAEY,IAFZ,EAG/B,QAH+B,EAGrB,UAAU,UAAV,EAAsB,QAAtB,CAHqB,EAGY,KAHZ,EAIjC,IAJiC,CAI5B,EAJ4B,CAAzB,CAAV;AAKH;;AAED,WAAO,QAAQ,CAAR,GAAY,MAAZ,GAAqB,EAA5B;AACH,CA9DD","file":"stylish-compiled.js","sourcesContent":["/**\n * @fileoverview Stylish reporter\n * @author Sindre Sorhus\n */\n\"use strict\";\n\nvar chalk = require(\"chalk\"),\n    table = require(\"text-table\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\nfunction pluralize(word, count) {\n    return (count === 1 ? word : word + \"s\");\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = function(results) {\n\n    var output = \"\\n\",\n        total = 0,\n        errors = 0,\n        warnings = 0,\n        summaryColor = \"yellow\";\n\n    results.forEach(function(result) {\n        var messages = result.messages;\n\n        if (messages.length === 0) {\n            return;\n        }\n\n        total += messages.length;\n        output += chalk.underline(result.filePath) + \"\\n\";\n\n        output += table(\n            messages.map(function(message) {\n                var messageType;\n\n                if (message.fatal || message.severity === 2) {\n                    messageType = chalk.red(\"error\");\n                    summaryColor = \"red\";\n                    errors++;\n                } else {\n                    messageType = chalk.yellow(\"warning\");\n                    warnings++;\n                }\n\n                return [\n                    \"\",\n                    message.line || 0,\n                    message.column || 0,\n                    messageType,\n                    message.message.replace(/\\.$/, \"\"),\n                    chalk.dim(message.ruleId || \"\")\n                ];\n            }),\n            {\n                align: [\"\", \"r\", \"l\"],\n                stringLength: function(str) {\n                    return chalk.stripColor(str).length;\n                }\n            }\n        ).split(\"\\n\").map(function(el) {\n            return el.replace(/(\\d+)\\s+(\\d+)/, function(m, p1, p2) {\n                return chalk.dim(p1 + \":\" + p2);\n            });\n        }).join(\"\\n\") + \"\\n\\n\";\n    });\n\n    if (total > 0) {\n        output += chalk[summaryColor].bold([\n            \"\\u2716 \", total, pluralize(\" problem\", total),\n            \" (\", errors, pluralize(\" error\", errors), \", \",\n            warnings, pluralize(\" warning\", warnings), \")\\n\"\n        ].join(\"\"));\n    }\n\n    return total > 0 ? output : \"\";\n};\n"]}