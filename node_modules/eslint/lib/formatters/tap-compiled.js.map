{"version":3,"sources":["tap.js"],"names":[],"mappings":";;;;AAIA;;AAEA,IAAI,OAAO,QAAQ,SAAR,CAAX;;;;;;;;;;;AAWA,SAAS,cAAT,CAAwB,OAAxB,EAAiC;AAC7B,QAAI,QAAQ,KAAR,IAAiB,QAAQ,QAAR,KAAqB,CAA1C,EAA6C;AACzC,eAAO,OAAP;AACH,KAFD,MAEO;AACH,eAAO,SAAP;AACH;AACJ;;;;;;;AAOD,SAAS,iBAAT,CAA2B,UAA3B,EAAuC;AACnC,QAAI,SAAS,IAAb;AACA,QAAI,SAAS,SAAS,OAAtB;;AAEA,cAAU,SAAS,KAAK,QAAL,CAAc,UAAd,EAA0B,KAA1B,CAAgC,IAAhC,EAAsC,IAAtC,CAA2C,OAAO,MAAlD,CAAnB;AACA,cAAU,OAAV;AACA,WAAO,MAAP;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB,UAAS,OAAT,EAAkB;AAC/B,QAAI,SAAS,wBAAwB,QAAQ,MAAhC,GAAyC,IAAtD;;AAEA,YAAQ,OAAR,CAAgB,UAAS,MAAT,EAAiB,EAAjB,EAAqB;AACjC,YAAI,WAAW,OAAO,QAAtB;AACA,YAAI,aAAa,IAAjB;AACA,YAAI,cAAc,EAAlB;;AAEA,YAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACrB,yBAAa,QAAb;;AAEA,qBAAS,OAAT,CAAiB,UAAS,OAAT,EAAkB;AAC/B,oBAAI,aAAa;AACb,6BAAS,QAAQ,OADJ;AAEb,8BAAU,eAAe,OAAf,CAFG;AAGb,0BAAM;AACF,8BAAM,QAAQ,IAAR,IAAgB,CADpB;AAEF,gCAAQ,QAAQ,MAAR,IAAkB,CAFxB;AAGF,gCAAQ,QAAQ,MAAR,IAAkB;AAHxB;AAHO,iBAAjB;;;;;AAaA,oBAAI,aAAa,WAAjB,EAA8B;AAC1B,wBAAI,OAAO,YAAY,QAAnB,KAAgC,WAApC,EAAiD;AAC7C,oCAAY,QAAZ,GAAuB,EAAvB;AACH;AACD,gCAAY,QAAZ,CAAqB,IAArB,CAA0B,UAA1B;AACH,iBALD,MAKO;AACH,kCAAc,UAAd;AACH;AACJ,aAtBD;AAuBH;;AAED,kBAAU,aAAa,GAAb,IAAoB,KAAK,CAAzB,IAA8B,KAA9B,GAAsC,OAAO,QAA7C,GAAwD,IAAlE;;;AAGA,YAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACrB,sBAAU,kBAAkB,WAAlB,CAAV;AACH;AAEJ,KAxCD;;AA0CA,WAAO,MAAP;AACH,CA9CD","file":"tap-compiled.js","sourcesContent":["/**\n * @fileoverview TAP reporter\n * @author Jonathan Kingston\n */\n\"use strict\";\n\nvar yaml = require(\"js-yaml\");\n\n//------------------------------------------------------------------------------\n// Helper Functions\n//------------------------------------------------------------------------------\n\n/**\n * Returns a canonical error level string based upon the error message passed in.\n * @param {object} message Individual error message provided by eslint\n * @returns {String} Error level string\n */\nfunction getMessageType(message) {\n    if (message.fatal || message.severity === 2) {\n        return \"error\";\n    } else {\n        return \"warning\";\n    }\n}\n\n/**\n * Takes in a JavaScript object and outputs a TAP diagnostics string\n * @param {object} diagnostic JavaScript object to be embedded as YAML into output.\n * @returns {string} diagnostics string with YAML embedded - TAP version 13 compliant\n */\nfunction outputDiagnostics(diagnostic) {\n    var prefix = \"  \";\n    var output = prefix + \"---\\n\";\n\n    output += prefix + yaml.safeDump(diagnostic).split(\"\\n\").join(\"\\n\" + prefix);\n    output += \"...\\n\";\n    return output;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = function(results) {\n    var output = \"TAP version 13\\n1..\" + results.length + \"\\n\";\n\n    results.forEach(function(result, id) {\n        var messages = result.messages;\n        var testResult = \"ok\";\n        var diagnostics = {};\n\n        if (messages.length > 0) {\n            testResult = \"not ok\";\n\n            messages.forEach(function(message) {\n                var diagnostic = {\n                    message: message.message,\n                    severity: getMessageType(message),\n                    data: {\n                        line: message.line || 0,\n                        column: message.column || 0,\n                        ruleId: message.ruleId || \"\"\n                    }\n                };\n\n                // If we have multiple messages place them under a messages key\n                // The first error will be logged as message key\n                // This is to adhere to TAP 13 loosely defined specification of having a message key\n                if (\"message\" in diagnostics) {\n                    if (typeof diagnostics.messages === \"undefined\") {\n                        diagnostics.messages = [];\n                    }\n                    diagnostics.messages.push(diagnostic);\n                } else {\n                    diagnostics = diagnostic;\n                }\n            });\n        }\n\n        output += testResult + \" \" + (id + 1) + \" - \" + result.filePath + \"\\n\";\n\n        // If we have an error include diagnostics\n        if (messages.length > 0) {\n            output += outputDiagnostics(diagnostics);\n        }\n\n    });\n\n    return output;\n};\n"]}