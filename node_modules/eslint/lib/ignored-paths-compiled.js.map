{"version":3,"sources":["ignored-paths.js"],"names":[],"mappings":"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","file":"ignored-paths-compiled.js","sourcesContent":["/**\n * @fileoverview Responsible for loading ignore config files and managing ignore patterns\n * @author Jonathan Rajavuori\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar lodash = require(\"lodash\"),\n    fs = require(\"fs\"),\n    path = require(\"path\"),\n    debug = require(\"debug\"),\n    ignore = require(\"ignore\"),\n    pathUtil = require(\"./util/path-util\");\n\ndebug = debug(\"eslint:ignored-paths\");\n\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nvar ESLINT_IGNORE_FILENAME = \".eslintignore\";\nvar DEFAULT_IGNORE_PATTERNS = [\n    \"/node_modules/*\",\n    \"/bower_components/*\"\n];\nvar DEFAULT_OPTIONS = {\n    dotfiles: false,\n    cwd: process.cwd()\n};\n\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\n/**\n * Find an ignore file in the current directory.\n * @param {stirng} cwd Current working directory\n * @returns {string} Path of ignore file or an empty string.\n */\nfunction findIgnoreFile(cwd) {\n    cwd = cwd || DEFAULT_OPTIONS.cwd;\n\n    var ignoreFilePath = path.resolve(cwd, ESLINT_IGNORE_FILENAME);\n\n    return fs.existsSync(ignoreFilePath) ? ignoreFilePath : \"\";\n}\n\n/**\n * Merge options with defaults\n * @param {object} options Options to merge with DEFAULT_OPTIONS constant\n * @returns {object} Merged options\n */\nfunction mergeDefaultOptions(options) {\n    options = (options || {});\n    return lodash.assign({}, DEFAULT_OPTIONS, options);\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * IgnoredPaths\n * @constructor\n * @class IgnoredPaths\n * @param {Object} options object containing 'ignore', 'ignorePath' and 'patterns' properties\n */\nfunction IgnoredPaths(options) {\n\n    options = mergeDefaultOptions(options);\n\n    /**\n     * add pattern to node-ignore instance\n     * @param {object} ig, instance of node-ignore\n     * @param {string} pattern, pattern do add to ig\n     * @returns {array} raw ignore rules\n     */\n    function addPattern(ig, pattern) {\n        return ig.addPattern(pattern);\n    }\n\n    /**\n     * add ignore file to node-ignore instance\n     * @param {object} ig, instance of node-ignore\n     * @param {string} filepath, file to add to ig\n     * @returns {array} raw ignore rules\n     */\n    function addIgnoreFile(ig, filepath) {\n        ig.ignoreFiles.push(filepath);\n        return ig.add(fs.readFileSync(filepath, \"utf8\"));\n    }\n\n    this.defaultPatterns = DEFAULT_IGNORE_PATTERNS.concat(options.patterns || []);\n    this.baseDir = options.cwd;\n\n    this.ig = {\n        custom: ignore(),\n        default: ignore()\n    };\n\n    // Add a way to keep track of ignored files.  This was present in node-ignore\n    // 2.x, but dropped for now as of 3.0.10.\n    this.ig.custom.ignoreFiles = [];\n    this.ig.default.ignoreFiles = [];\n\n    if (options.dotfiles !== true) {\n\n        /*\n         * ignore files beginning with a dot, but not files in a parent or\n         * ancestor directory (which in relative format will begin with `../`).\n         */\n        addPattern(this.ig.default, [\".*\", \"!../\"]);\n    }\n\n    addPattern(this.ig.default, this.defaultPatterns);\n\n    if (options.ignore !== false) {\n        var ignorePath;\n\n        if (options.ignorePath) {\n            debug(\"Using specific ignore file\");\n\n            try {\n                fs.statSync(options.ignorePath);\n                ignorePath = options.ignorePath;\n            } catch (e) {\n                e.message = \"Cannot read ignore file: \" + options.ignorePath + \"\\nError: \" + e.message;\n                throw e;\n            }\n        } else {\n            debug(\"Looking for ignore file in \" + options.cwd);\n            ignorePath = findIgnoreFile(options.cwd);\n\n            try {\n                fs.statSync(ignorePath);\n                debug(\"Loaded ignore file \" + ignorePath);\n            } catch (e) {\n                debug(\"Could not find ignore file in cwd\");\n                this.options = options;\n            }\n        }\n\n        if (ignorePath) {\n            debug(\"Adding \" + ignorePath);\n            this.baseDir = path.dirname(path.resolve(options.cwd, ignorePath));\n            addIgnoreFile(this.ig.custom, ignorePath);\n            addIgnoreFile(this.ig.default, ignorePath);\n        }\n\n        if (options.ignorePattern) {\n            addPattern(this.ig.custom, options.ignorePattern);\n            addPattern(this.ig.default, options.ignorePattern);\n        }\n    }\n\n    this.options = options;\n\n}\n\n/**\n * Determine whether a file path is included in the default or custom ignore patterns\n * @param {string} filepath Path to check\n * @param {string} [category=null] check 'default', 'custom' or both (null)\n * @returns {boolean} true if the file path matches one or more patterns, false otherwise\n */\nIgnoredPaths.prototype.contains = function(filepath, category) {\n\n    var result = false;\n    var absolutePath = path.resolve(this.options.cwd, filepath);\n    var relativePath = pathUtil.getRelativePath(absolutePath, this.options.cwd);\n\n    if ((typeof category === \"undefined\") || (category === \"default\")) {\n        result = result || (this.ig.default.filter([relativePath]).length === 0);\n    }\n\n    if ((typeof category === \"undefined\") || (category === \"custom\")) {\n        result = result || (this.ig.custom.filter([relativePath]).length === 0);\n    }\n\n    return result;\n\n};\n\nmodule.exports = IgnoredPaths;\n"]}