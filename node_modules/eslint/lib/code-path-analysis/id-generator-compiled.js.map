{"version":3,"sources":["id-generator.js"],"names":[],"mappings":";;;;;;;;;AASA;;;;;;;;;;;;;AAYA,SAAS,WAAT,CAAqB,MAArB,EAA6B;AACzB,OAAK,MAAL,GAAc,OAAO,MAAP,CAAd;AACA,OAAK,CAAL,GAAS,CAAT;AACH;;;;;;;AAOD,YAAY,SAAZ,CAAsB,IAAtB,GAA6B,YAAW;AACpC,OAAK,CAAL,GAAS,IAAI,KAAK,CAAT,GAAa,CAAtB;;;AAGA,MAAI,KAAK,CAAL,GAAS,CAAb,EAAgB;AACZ,SAAK,CAAL,GAAS,CAAT;AACH;;AAED,SAAO,KAAK,MAAL,GAAc,KAAK,CAA1B;AACH,CATD;;AAWA,OAAO,OAAP,GAAiB,WAAjB","file":"id-generator-compiled.js","sourcesContent":["/**\n * @fileoverview A class of identifiers generator for code path segments.\n *\n * Each rule uses the identifier of code path segments to store additional\n * information of the code path.\n *\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * A generator for unique ids.\n *\n * @constructor\n * @param {string} prefix - Optional. A prefix of generated ids.\n */\nfunction IdGenerator(prefix) {\n    this.prefix = String(prefix);\n    this.n = 0;\n}\n\n/**\n * Generates id.\n *\n * @returns {string} A generated id.\n */\nIdGenerator.prototype.next = function() {\n    this.n = 1 + this.n | 0;\n\n    /* istanbul ignore if */\n    if (this.n < 0) {\n        this.n = 1;\n    }\n\n    return this.prefix + this.n;\n};\n\nmodule.exports = IdGenerator;\n"]}