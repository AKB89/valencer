{"version":3,"sources":["debug-helpers.js"],"names":[],"mappings":"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","file":"debug-helpers-compiled.js","sourcesContent":["/**\n * @fileoverview Helpers to debug for code path analysis.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar debug = require(\"debug\")(\"eslint:code-path\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets id of a given segment.\n * @param {CodePathSegment} segment - A segment to get.\n * @returns {string} Id of the segment.\n */\n/* istanbul ignore next */\nfunction getId(segment) { // eslint-disable-line require-jsdoc\n    return segment.id + (segment.reachable ? \"\" : \"!\");\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n\n    /**\n     * A flag that debug dumping is enabled or not.\n     * @type {boolean}\n     */\n    enabled: debug.enabled,\n\n    /**\n     * Dumps given objects.\n     *\n     * @param {...any} args - objects to dump.\n     * @returns {void}\n     */\n    dump: debug,\n\n    /**\n     * Dumps the current analyzing state.\n     *\n     * @param {ASTNode} node - A node to dump.\n     * @param {CodePathState} state - A state to dump.\n     * @param {boolean} leaving - A flag whether or not it's leaving\n     * @returns {void}\n     */\n    dumpState: !debug.enabled ? debug : /* istanbul ignore next */ function(node, state, leaving) {\n        for (var i = 0; i < state.currentSegments.length; ++i) {\n            var segInternal = state.currentSegments[i].internal;\n\n            if (leaving) {\n                segInternal.exitNodes.push(node);\n            } else {\n                segInternal.nodes.push(node);\n            }\n        }\n\n        debug(\n            state.currentSegments.map(getId).join(\",\") + \") \" +\n            node.type + (leaving ? \":exit\" : \"\")\n        );\n    },\n\n    /**\n     * Dumps a DOT code of a given code path.\n     * The DOT code can be visialized with Graphvis.\n     *\n     * @param {CodePath} codePath - A code path to dump.\n     * @returns {void}\n     * @see http://www.graphviz.org\n     * @see http://www.webgraphviz.com\n     */\n    dumpDot: !debug.enabled ? debug : /* istanbul ignore next */ function(codePath) {\n        var text =\n            \"\\n\" +\n            \"digraph {\\n\" +\n            \"node[shape=box,style=\\\"rounded,filled\\\",fillcolor=white];\\n\" +\n            \"initial[label=\\\"\\\",shape=circle,style=filled,fillcolor=black,width=0.25,height=0.25];\\n\";\n\n        if (codePath.returnedSegments.length > 0) {\n            text += \"final[label=\\\"\\\",shape=doublecircle,style=filled,fillcolor=black,width=0.25,height=0.25];\\n\";\n        }\n        if (codePath.thrownSegments.length > 0) {\n            text += \"thrown[label=\\\"âœ˜\\\",shape=circle,width=0.3,height=0.3,fixedsize];\\n\";\n        }\n\n        var traceMap = Object.create(null);\n        var arrows = this.makeDotArrows(codePath, traceMap);\n\n        for (var id in traceMap) { // eslint-disable-line guard-for-in\n            var segment = traceMap[id];\n\n            text += id + \"[\";\n\n            if (segment.reachable) {\n                text += \"label=\\\"\";\n            } else {\n                text += \"style=\\\"rounded,dashed,filled\\\",fillcolor=\\\"#FF9800\\\",label=\\\"<<unreachable>>\\\\n\";\n            }\n\n            if (segment.internal.nodes.length > 0) {\n                text += segment.internal.nodes.map(function(node) {\n                    switch (node.type) {\n                        case \"Identifier\": return node.type + \" (\" + node.name + \")\";\n                        case \"Literal\": return node.type + \" (\" + node.value + \")\";\n                        default: return node.type;\n                    }\n                }).join(\"\\\\n\");\n            } else if (segment.internal.exitNodes.length > 0) {\n                text += segment.internal.exitNodes.map(function(node) {\n                    switch (node.type) {\n                        case \"Identifier\": return node.type + \":exit (\" + node.name + \")\";\n                        case \"Literal\": return node.type + \":exit (\" + node.value + \")\";\n                        default: return node.type + \":exit\";\n                    }\n                }).join(\"\\\\n\");\n            } else {\n                text += \"????\";\n            }\n\n            text += \"\\\"];\\n\";\n        }\n\n        text += arrows + \"\\n\";\n        text += \"}\";\n        debug(\"DOT\", text);\n    },\n\n    /**\n     * Makes a DOT code of a given code path.\n     * The DOT code can be visialized with Graphvis.\n     *\n     * @param {CodePath} codePath - A code path to make DOT.\n     * @param {object} traceMap - Optional. A map to check whether or not segments had been done.\n     * @returns {string} A DOT code of the code path.\n     */\n    makeDotArrows: function(codePath, traceMap) {\n        var stack = [[codePath.initialSegment, 0]];\n        var done = traceMap || Object.create(null);\n        var lastId = codePath.initialSegment.id;\n        var text = \"initial->\" + codePath.initialSegment.id;\n\n        while (stack.length > 0) {\n            var item = stack.pop();\n            var segment = item[0];\n            var index = item[1];\n\n            if (done[segment.id] && index === 0) {\n                continue;\n            }\n            done[segment.id] = segment;\n\n            var nextSegment = segment.allNextSegments[index];\n\n            if (!nextSegment) {\n                continue;\n            }\n\n            if (lastId === segment.id) {\n                text += \"->\" + nextSegment.id;\n            } else {\n                text += \";\\n\" + segment.id + \"->\" + nextSegment.id;\n            }\n            lastId = nextSegment.id;\n\n            stack.unshift([segment, 1 + index]);\n            stack.push([nextSegment, 0]);\n        }\n\n        codePath.returnedSegments.forEach(function(finalSegment) {\n            if (lastId === finalSegment.id) {\n                text += \"->final\";\n            } else {\n                text += \";\\n\" + finalSegment.id + \"->final\";\n            }\n            lastId = null;\n        });\n\n        codePath.thrownSegments.forEach(function(finalSegment) {\n            if (lastId === finalSegment.id) {\n                text += \"->thrown\";\n            } else {\n                text += \";\\n\" + finalSegment.id + \"->thrown\";\n            }\n            lastId = null;\n        });\n\n        return text + \";\";\n    }\n};\n"]}