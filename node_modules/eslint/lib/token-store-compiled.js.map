{"version":3,"sources":["token-store.js"],"names":[],"mappings":"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","file":"token-store-compiled.js","sourcesContent":["/**\n * @fileoverview Object to handle access and retrieval of tokens.\n * @author Brandon Mills\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Implementation\n//------------------------------------------------------------------------------\n\nmodule.exports = function(tokens) {\n    var api = {},\n        starts = Object.create(null),\n        ends = Object.create(null),\n        index, length, range;\n\n    /**\n     * Gets tokens in a given interval.\n     * @param {int} start Inclusive index of the first token. 0 if negative.\n     * @param {int} end Exclusive index of the last token.\n     * @returns {Token[]} Tokens in the interval.\n     */\n    function get(start, end) {\n        var result = [],\n            i;\n\n        for (i = Math.max(0, start); i < end && i < length; i++) {\n            result.push(tokens[i]);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets the index in the tokens array of the last token belonging to a node.\n     * Usually a node ends exactly at a token, but due to ASI, sometimes a\n     * node's range extends beyond its last token.\n     * @param {ASTNode} node The node for which to find the last token's index.\n     * @returns {int} Index in the tokens array of the node's last token.\n     */\n    function lastTokenIndex(node) {\n        var end = node.range[1],\n            cursor = ends[end];\n\n        // If the node extends beyond its last token, get the token before the\n        // next token\n        if (typeof cursor === \"undefined\") {\n            cursor = starts[end] - 1;\n        }\n\n        // If there isn't a next token, the desired token is the last one in the\n        // array\n        if (isNaN(cursor)) {\n            cursor = length - 1;\n        }\n\n        return cursor;\n    }\n\n    // Map tokens' start and end range to the index in the tokens array\n    for (index = 0, length = tokens.length; index < length; index++) {\n        range = tokens[index].range;\n        starts[range[0]] = index;\n        ends[range[1]] = index;\n    }\n\n    /**\n     * Gets a number of tokens that precede a given node or token in the token\n     * stream.\n     * @param {(ASTNode|Token)} node The AST node or token.\n     * @param {int} [beforeCount=0] The number of tokens before the node or\n     *     token to retrieve.\n     * @returns {Token[]} Array of objects representing tokens.\n     */\n    api.getTokensBefore = function(node, beforeCount) {\n        var first = starts[node.range[0]];\n\n        return get(first - (beforeCount || 0), first);\n    };\n\n    /**\n     * Gets the token that precedes a given node or token in the token stream.\n     * @param {(ASTNode|Token)} node The AST node or token.\n     * @param {int} [skip=0] A number of tokens to skip before the given node or\n     *     token.\n     * @returns {Token} An object representing the token.\n     */\n    api.getTokenBefore = function(node, skip) {\n        return tokens[starts[node.range[0]] - (skip || 0) - 1];\n    };\n\n    /**\n     * Gets a number of tokens that follow a given node or token in the token\n     * stream.\n     * @param {(ASTNode|Token)} node The AST node or token.\n     * @param {int} [afterCount=0] The number of tokens after the node or token\n     *     to retrieve.\n     * @returns {Token[]} Array of objects representing tokens.\n     */\n    api.getTokensAfter = function(node, afterCount) {\n        var start = lastTokenIndex(node) + 1;\n\n        return get(start, start + (afterCount || 0));\n    };\n\n    /**\n     * Gets the token that follows a given node or token in the token stream.\n     * @param {(ASTNode|Token)} node The AST node or token.\n     * @param {int} [skip=0] A number of tokens to skip after the given node or\n     *     token.\n     * @returns {Token} An object representing the token.\n     */\n    api.getTokenAfter = function(node, skip) {\n        return tokens[lastTokenIndex(node) + (skip || 0) + 1];\n    };\n\n    /**\n     * Gets all tokens that are related to the given node.\n     * @param {ASTNode} node The AST node.\n     * @param {int} [beforeCount=0] The number of tokens before the node to retrieve.\n     * @param {int} [afterCount=0] The number of tokens after the node to retrieve.\n     * @returns {Token[]} Array of objects representing tokens.\n     */\n    api.getTokens = function(node, beforeCount, afterCount) {\n        return get(\n            starts[node.range[0]] - (beforeCount || 0),\n            lastTokenIndex(node) + (afterCount || 0) + 1\n        );\n    };\n\n    /**\n     * Gets the first `count` tokens of the given node's token stream.\n     * @param {ASTNode} node The AST node.\n     * @param {int} [count=0] The number of tokens of the node to retrieve.\n     * @returns {Token[]} Array of objects representing tokens.\n     */\n    api.getFirstTokens = function(node, count) {\n        var first = starts[node.range[0]];\n\n        return get(\n            first,\n            Math.min(lastTokenIndex(node) + 1, first + (count || 0))\n        );\n    };\n\n    /**\n     * Gets the first token of the given node's token stream.\n     * @param {ASTNode} node The AST node.\n     * @param {int} [skip=0] A number of tokens to skip.\n     * @returns {Token} An object representing the token.\n     */\n    api.getFirstToken = function(node, skip) {\n        return tokens[starts[node.range[0]] + (skip || 0)];\n    };\n\n    /**\n     * Gets the last `count` tokens of the given node.\n     * @param {ASTNode} node The AST node.\n     * @param {int} [count=0] The number of tokens of the node to retrieve.\n     * @returns {Token[]} Array of objects representing tokens.\n     */\n    api.getLastTokens = function(node, count) {\n        var last = lastTokenIndex(node) + 1;\n\n        return get(Math.max(starts[node.range[0]], last - (count || 0)), last);\n    };\n\n    /**\n     * Gets the last token of the given node's token stream.\n     * @param {ASTNode} node The AST node.\n     * @param {int} [skip=0] A number of tokens to skip.\n     * @returns {Token} An object representing the token.\n     */\n    api.getLastToken = function(node, skip) {\n        return tokens[lastTokenIndex(node) - (skip || 0)];\n    };\n\n    /**\n     * Gets all of the tokens between two non-overlapping nodes.\n     * @param {ASTNode} left Node before the desired token range.\n     * @param {ASTNode} right Node after the desired token range.\n     * @param {int} [padding=0] Number of extra tokens on either side of center.\n     * @returns {Token[]} Tokens between left and right plus padding.\n     */\n    api.getTokensBetween = function(left, right, padding) {\n        padding = padding || 0;\n        return get(\n            lastTokenIndex(left) + 1 - padding,\n            starts[right.range[0]] + padding\n        );\n    };\n\n    /**\n     * Gets the token starting at the specified index.\n     * @param {int} startIndex Index of the start of the token's range.\n     * @returns {Token} The token starting at index, or null if no such token.\n     */\n    api.getTokenByRangeStart = function(startIndex) {\n        return (tokens[starts[startIndex]] || null);\n    };\n\n    return api;\n};\n"]}