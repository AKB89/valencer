{"version":3,"sources":["event-generator-tester.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;AAQA,IAAI,SAAS,QAAQ,QAAR,CAAb;;;;;;AAMA,OAAO,OAAP,GAAiB;;;;;;;;AAQb,cAAW,OAAO,QAAP,KAAoB,UAArB,GAAmC,QAAnC,G,0BAAyE,UAAS,IAAT,EAAe,MAAf,EAAuB;AACtG,eAAO,OAAO,KAAP,CAAa,IAAb,CAAP;AACH,KAVY;;;;;;;;AAkBb,QAAK,OAAO,EAAP,KAAc,UAAf,GAA6B,EAA7B,G,0BAA6D,UAAS,IAAT,EAAe,MAAf,EAAuB;AACpF,eAAO,OAAO,KAAP,CAAa,IAAb,CAAP;AACH,KApBY;;;;;;;AA2Bb,iCAA6B,qCAAS,QAAT,EAAmB;AAC5C,aAAK,QAAL,CAAc,2CAAd,EAA2D,YAAW;AAClE,iBAAK,EAAL,CAAQ,iCAAR,EAA2C,YAAW;AAClD,uBAAO,KAAP,SAAoB,SAAS,OAA7B,GAAsC,QAAtC;AACA,uBAAO,KAAP,SAAoB,SAAS,OAAT,CAAiB,IAArC,GAA2C,UAA3C;AACH,aAHD;;AAKA,iBAAK,EAAL,CAAQ,mCAAR,EAA6C,YAAW;AACpD,uBAAO,KAAP,SAAoB,SAAS,SAA7B,GAAwC,UAAxC;AACH,aAFD;;AAIA,iBAAK,EAAL,CAAQ,mCAAR,EAA6C,YAAW;AACpD,uBAAO,KAAP,SAAoB,SAAS,SAA7B,GAAwC,UAAxC;AACH,aAFD;AAGH,SAb0D,CAazD,IAbyD,CAapD,IAboD,CAA3D;AAcH;AA1CY,CAAjB","file":"event-generator-tester-compiled.js","sourcesContent":["/**\n * @fileoverview Helpers to test EventGenerator interface.\n * @author Toru Nagashima\n */\n\"use strict\";\n\n/* global describe, it */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar assert = require(\"assert\");\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n\n    /**\n     * Overrideable `describe` function to test.\n     * @param {string} text - A description.\n     * @param {function} method - A test logic.\n     * @returns {any} The returned value with the test logic.\n     */\n    describe: (typeof describe === \"function\") ? describe : /* istanbul ignore next */ function(text, method) {\n        return method.apply(this);\n    },\n\n    /**\n     * Overrideable `it` function to test.\n     * @param {string} text - A description.\n     * @param {function} method - A test logic.\n     * @returns {any} The returned value with the test logic.\n     */\n    it: (typeof it === \"function\") ? it : /* istanbul ignore next */ function(text, method) {\n        return method.apply(this);\n    },\n\n    /**\n     * Does some tests to check a given object implements the EventGenerator interface.\n     * @param {object} instance - An object to check.\n     * @returns {void}\n     */\n    testEventGeneratorInterface: function(instance) {\n        this.describe(\"should implement EventGenerator interface\", function() {\n            this.it(\"should have `emitter` property.\", function() {\n                assert.equal(typeof instance.emitter, \"object\");\n                assert.equal(typeof instance.emitter.emit, \"function\");\n            });\n\n            this.it(\"should have `enterNode` property.\", function() {\n                assert.equal(typeof instance.enterNode, \"function\");\n            });\n\n            this.it(\"should have `leaveNode` property.\", function() {\n                assert.equal(typeof instance.leaveNode, \"function\");\n            });\n        }.bind(this));\n    }\n};\n"]}