{"version":3,"sources":["rule-tester.js"],"names":[],"mappings":"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","file":"rule-tester-compiled.js","sourcesContent":["/**\n * @fileoverview Mocha test wrapper\n * @author Ilya Volodin\n */\n\"use strict\";\n\n/* global describe, it */\n\n/*\n * This is a wrapper around mocha to allow for DRY unittests for eslint\n * Format:\n * RuleTester.add(\"{ruleName}\", {\n *      valid: [\n *          \"{code}\",\n *          { code: \"{code}\", options: {options}, global: {globals}, globals: {globals}, parser: \"{parser}\", settings: {settings} }\n *      ],\n *      invalid: [\n *          { code: \"{code}\", errors: {numErrors} },\n *          { code: \"{code}\", errors: [\"{errorMessage}\"] },\n *          { code: \"{code}\", options: {options}, global: {globals}, parser: \"{parser}\", settings: {settings}, errors: [{ message: \"{errorMessage}\", type: \"{errorNodeType}\"}] }\n *      ]\n *  });\n *\n * Variables:\n * {code} - String that represents the code to be tested\n * {options} - Arguments that are passed to the configurable rules.\n * {globals} - An object representing a list of variables that are\n *             registered as globals\n * {parser} - String representing the parser to use\n * {settings} - An object representing global settings for all rules\n * {numErrors} - If failing case doesn't need to check error message,\n *               this integer will specify how many errors should be\n *               received\n * {errorMessage} - Message that is returned by the rule on failure\n * {errorNodeType} - AST node type that is returned by they rule as\n *                   a cause of the failure.\n */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar lodash = require(\"lodash\"),\n    assert = require(\"assert\"),\n    util = require(\"util\"),\n    validator = require(\"../config/config-validator\"),\n    validate = require(\"is-my-json-valid\"),\n    eslint = require(\"../eslint\"),\n    rules = require(\"../rules\"),\n    metaSchema = require(\"../../conf/json-schema-schema.json\"),\n    SourceCodeFixer = require(\"../util/source-code-fixer\");\n\n//------------------------------------------------------------------------------\n// Private Members\n//------------------------------------------------------------------------------\n\n/*\n * testerDefaultConfig must not be modified as it allows to reset the tester to\n * the initial default configuration\n */\nvar testerDefaultConfig = { rules: {} };\nvar defaultConfig = { rules: {} };\n\n/*\n * List every parameters possible on a test case that are not related to eslint\n * configuration\n */\nvar RuleTesterParameters = [\n    \"code\",\n    \"filename\",\n    \"options\",\n    \"args\",\n    \"errors\"\n];\n\nvar validateSchema = validate(metaSchema, { verbose: true });\n\nvar hasOwnProperty = Function.call.bind(Object.hasOwnProperty);\n\n/**\n * Clones a given value deeply.\n * Note: This ignores `parent` property.\n *\n * @param {any} x - A value to clone.\n * @returns {any} A cloned value.\n */\nfunction cloneDeeplyExcludesParent(x) {\n    if (typeof x === \"object\" && x !== null) {\n        if (Array.isArray(x)) {\n            return x.map(cloneDeeplyExcludesParent);\n        }\n\n        var retv = {};\n\n        for (var key in x) {\n            if (key !== \"parent\" && hasOwnProperty(x, key)) {\n                retv[key] = cloneDeeplyExcludesParent(x[key]);\n            }\n        }\n\n        return retv;\n    }\n\n    return x;\n}\n\n/**\n * Freezes a given value deeply.\n *\n * @param {any} x - A value to freeze.\n * @returns {void}\n */\nfunction freezeDeeply(x) {\n    if (typeof x === \"object\" && x !== null) {\n        if (Array.isArray(x)) {\n            x.forEach(freezeDeeply);\n        } else {\n            for (var key in x) {\n                if (key !== \"parent\" && hasOwnProperty(x, key)) {\n                    freezeDeeply(x[key]);\n                }\n            }\n        }\n        Object.freeze(x);\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Creates a new instance of RuleTester.\n * @param {Object} [testerConfig] Optional, extra configuration for the tester\n * @constructor\n */\nfunction RuleTester(testerConfig) {\n\n    /**\n     * The configuration to use for this tester. Combination of the tester\n     * configuration and the default configuration.\n     * @type {Object}\n     */\n    this.testerConfig = lodash.merge(\n\n        // we have to clone because merge uses the first argument for recipient\n        lodash.cloneDeep(defaultConfig),\n        testerConfig\n    );\n}\n\n/**\n * Set the configuration to use for all future tests\n * @param {Object} config the configuration to use.\n * @returns {void}\n */\nRuleTester.setDefaultConfig = function(config) {\n    if (typeof config !== \"object\") {\n        throw new Error(\"RuleTester.setDefaultConfig: config must be an object\");\n    }\n    defaultConfig = config;\n\n    // Make sure the rules object exists since it is assumed to exist later\n    defaultConfig.rules = defaultConfig.rules || {};\n};\n\n/**\n * Get the current configuration used for all tests\n * @returns {Object} the current configuration\n */\nRuleTester.getDefaultConfig = function() {\n    return defaultConfig;\n};\n\n/**\n * Reset the configuration to the initial configuration of the tester removing\n * any changes made until now.\n * @returns {void}\n */\nRuleTester.resetDefaultConfig = function() {\n    defaultConfig = lodash.cloneDeep(testerDefaultConfig);\n};\n\n// default separators for testing\nRuleTester.describe = (typeof describe === \"function\") ? describe : /* istanbul ignore next */ function(text, method) {\n    return method.apply(this);\n};\n\nRuleTester.it = (typeof it === \"function\") ? it : /* istanbul ignore next */ function(text, method) {\n    return method.apply(this);\n};\n\nRuleTester.prototype = {\n\n    /**\n     * Define a rule for one particular run of tests.\n     * @param {string} name The name of the rule to define.\n     * @param {Function} rule The rule definition.\n     * @returns {void}\n     */\n    defineRule: function(name, rule) {\n        eslint.defineRule(name, rule);\n    },\n\n    /**\n     * Adds a new rule test to execute.\n     * @param {string} ruleName The name of the rule to run.\n     * @param {Function} rule The rule to test.\n     * @param {Object} test The collection of tests to run.\n     * @returns {void}\n     */\n    run: function(ruleName, rule, test) {\n\n        var testerConfig = this.testerConfig,\n            result = {};\n\n        /* eslint-disable no-shadow */\n\n        /**\n         * Run the rule for the given item\n         * @param {string} ruleName name of the rule\n         * @param {string|object} item Item to run the rule against\n         * @returns {object} Eslint run result\n         * @private\n         */\n        function runRuleForItem(ruleName, item) {\n            var config = lodash.cloneDeep(testerConfig),\n                code, filename, schema, beforeAST, afterAST;\n\n            if (typeof item === \"string\") {\n                code = item;\n            } else {\n                code = item.code;\n\n                // Assumes everything on the item is a config except for the\n                // parameters used by this tester\n                var itemConfig = lodash.omit(item, RuleTesterParameters);\n\n                // Create the config object from the tester config and this item\n                // specific configurations.\n                config = lodash.merge(\n                    config,\n                    itemConfig\n                );\n            }\n\n            if (item.filename) {\n                filename = item.filename;\n            }\n\n            if (item.options) {\n                var options = item.options.concat();\n\n                options.unshift(1);\n                config.rules[ruleName] = options;\n            } else {\n                config.rules[ruleName] = 1;\n            }\n\n            eslint.defineRule(ruleName, rule);\n\n            schema = validator.getRuleOptionsSchema(ruleName);\n\n            if (schema) {\n                validateSchema(schema);\n\n                if (validateSchema.errors) {\n                    throw new Error([\n                        \"Schema for rule \" + ruleName + \" is invalid:\"\n                    ].concat(validateSchema.errors.map(function(error) {\n                        return \"\\t\" + error.field + \": \" + error.message;\n                    })).join(\"\\n\"));\n                }\n            }\n\n            validator.validate(config, \"rule-tester\");\n\n            /*\n             * Setup AST getters.\n             * The goal is to check whether or not AST was modified when\n             * running the rule under test.\n             */\n            eslint.reset();\n            eslint.on(\"Program\", function(node) {\n                beforeAST = cloneDeeplyExcludesParent(node);\n\n                eslint.on(\"Program:exit\", function(node) {\n                    afterAST = cloneDeeplyExcludesParent(node);\n                });\n            });\n\n            // Freezes rule-context properties.\n            var originalGet = rules.get;\n\n            try {\n                rules.get = function(ruleId) {\n                    var rule = originalGet(ruleId);\n\n                    if (typeof rule === \"function\") {\n                        return function(context) {\n                            Object.freeze(context);\n                            freezeDeeply(context.options);\n                            freezeDeeply(context.settings);\n                            freezeDeeply(context.parserOptions);\n\n                            return rule(context);\n                        };\n                    } else {\n                        return {\n                            meta: rule.meta,\n                            create: function(context) {\n                                Object.freeze(context);\n                                freezeDeeply(context.options);\n                                freezeDeeply(context.settings);\n                                freezeDeeply(context.parserOptions);\n\n                                return rule.create(context);\n                            }\n                        };\n                    }\n                };\n\n                return {\n                    messages: eslint.verify(code, config, filename, true),\n                    beforeAST: beforeAST,\n                    afterAST: afterAST\n                };\n            } finally {\n                rules.get = originalGet;\n            }\n        }\n\n        /**\n         * Check if the AST was changed\n         * @param {ASTNode} beforeAST AST node before running\n         * @param {ASTNode} afterAST AST node after running\n         * @returns {void}\n         * @private\n         */\n        function assertASTDidntChange(beforeAST, afterAST) {\n            if (!lodash.isEqual(beforeAST, afterAST)) {\n\n                // Not using directly to avoid performance problem in node 6.1.0. See #6111\n                assert.deepEqual(beforeAST, afterAST, \"Rule should not modify AST.\");\n            }\n        }\n\n        /**\n         * Check if the template is valid or not\n         * all valid cases go through this\n         * @param {string} ruleName name of the rule\n         * @param {string|object} item Item to run the rule against\n         * @returns {void}\n         * @private\n         */\n        function testValidTemplate(ruleName, item) {\n            var result = runRuleForItem(ruleName, item);\n            var messages = result.messages;\n\n            assert.equal(messages.length, 0, util.format(\"Should have no errors but had %d: %s\",\n                        messages.length, util.inspect(messages)));\n\n            assertASTDidntChange(result.beforeAST, result.afterAST);\n        }\n\n        /**\n         * Check if the template is invalid or not\n         * all invalid cases go through this.\n         * @param {string} ruleName name of the rule\n         * @param {string|object} item Item to run the rule against\n         * @returns {void}\n         * @private\n         */\n        function testInvalidTemplate(ruleName, item) {\n            assert.ok(item.errors || item.errors === 0,\n                \"Did not specify errors for an invalid test of \" + ruleName);\n\n            var result = runRuleForItem(ruleName, item);\n            var messages = result.messages;\n\n\n\n            if (typeof item.errors === \"number\") {\n                assert.equal(messages.length, item.errors, util.format(\"Should have %d error%s but had %d: %s\",\n                    item.errors, item.errors === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));\n            } else {\n                assert.equal(messages.length, item.errors.length,\n                    util.format(\"Should have %d error%s but had %d: %s\",\n                    item.errors.length, item.errors.length === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));\n\n                for (var i = 0, l = item.errors.length; i < l; i++) {\n                    assert.ok(!(\"fatal\" in messages[i]), \"A fatal parsing error occurred: \" + messages[i].message);\n                    assert.equal(messages[i].ruleId, ruleName, \"Error rule name should be the same as the name of the rule being tested\");\n\n                    if (typeof item.errors[i] === \"string\") {\n\n                        // Just an error message.\n                        assert.equal(messages[i].message, item.errors[i], \"Error message should be \" + item.errors[i]);\n                    } else if (typeof item.errors[i] === \"object\") {\n\n                        /*\n                         * Error object.\n                         * This may have a message, node type, line, and/or\n                         * column.\n                         */\n                        if (item.errors[i].message) {\n                            assert.equal(messages[i].message, item.errors[i].message, \"Error message should be \" + item.errors[i].message);\n                        }\n\n                        if (item.errors[i].type) {\n                            assert.equal(messages[i].nodeType, item.errors[i].type, \"Error type should be \" + item.errors[i].type);\n                        }\n\n                        if (item.errors[i].hasOwnProperty(\"line\")) {\n                            assert.equal(messages[i].line, item.errors[i].line, \"Error line should be \" + item.errors[i].line);\n                        }\n\n                        if (item.errors[i].hasOwnProperty(\"column\")) {\n                            assert.equal(messages[i].column, item.errors[i].column, \"Error column should be \" + item.errors[i].column);\n                        }\n                    } else {\n\n                        // Only string or object errors are valid.\n                        assert.fail(messages[i], null, \"Error should be a string or object.\");\n                    }\n                }\n\n                if (item.hasOwnProperty(\"output\")) {\n                    var fixResult = SourceCodeFixer.applyFixes(eslint.getSourceCode(), messages);\n\n                    assert.equal(fixResult.output, item.output, \"Output is incorrect.\");\n                }\n\n            }\n\n            assertASTDidntChange(result.beforeAST, result.afterAST);\n        }\n\n        /*\n         * This creates a mocha test suite and pipes all supplied info through\n         * one of the templates above.\n         */\n        RuleTester.describe(ruleName, function() {\n            RuleTester.describe(\"valid\", function() {\n                test.valid.forEach(function(valid) {\n                    RuleTester.it(valid.code || valid, function() {\n                        testValidTemplate(ruleName, valid);\n                    });\n                });\n            });\n\n            RuleTester.describe(\"invalid\", function() {\n                test.invalid.forEach(function(invalid) {\n                    RuleTester.it(invalid.code, function() {\n                        testInvalidTemplate(ruleName, invalid);\n                    });\n                });\n            });\n        });\n\n        return result.suite;\n    }\n};\n\n\nmodule.exports = RuleTester;\n"]}