{"version":3,"sources":["rules.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,YAAY,QAAQ,cAAR,CAAhB;;;;;;AAMA,IAAI,QAAQ,OAAO,MAAP,CAAc,IAAd,CAAZ;;;;;;;;;;;;AAYA,SAAS,MAAT,CAAgB,MAAhB,EAAwB,UAAxB,EAAoC;AAChC,UAAM,MAAN,IAAgB,UAAhB;AACH;;;;;;;;AAQD,SAAS,IAAT,CAAc,QAAd,EAAwB,GAAxB,EAA6B;AACzB,QAAI,WAAW,UAAU,QAAV,EAAoB,GAApB,CAAf;;AAEA,WAAO,IAAP,CAAY,QAAZ,EAAsB,OAAtB,CAA8B,UAAS,MAAT,EAAiB;AAC3C,eAAO,MAAP,EAAe,SAAS,MAAT,CAAf;AACH,KAFD;AAGH;;;;;;;;AAQD,SAAS,YAAT,CAAsB,WAAtB,EAAmC,UAAnC,EAA+C;AAC3C,WAAO,IAAP,CAAY,WAAZ,EAAyB,OAAzB,CAAiC,UAAS,MAAT,EAAiB;AAC9C,YAAI,kBAAkB,aAAa,GAAb,GAAmB,MAAzC;YACI,OAAO,YAAY,MAAZ,CADX;;AAGA,eAAO,eAAP,EAAwB,IAAxB;AACH,KALD;AAMH;;;;;;;AAOD,SAAS,GAAT,CAAa,MAAb,EAAqB;AACjB,QAAI,OAAO,MAAM,MAAN,CAAP,KAAyB,QAA7B,EAAuC;AACnC,eAAO,QAAQ,MAAM,MAAN,CAAR,CAAP;AACH,KAFD,MAEO;AACH,eAAO,MAAM,MAAN,CAAP;AACH;AACJ;;;;;;;AAOD,SAAS,SAAT,GAAqB;AACjB,YAAQ,OAAO,MAAP,CAAc,IAAd,CAAR;AACH;;AAED,OAAO,OAAP,GAAiB;AACb,YAAQ,MADK;AAEb,UAAM,IAFO;AAGb,YAAQ,YAHK;AAIb,SAAK,GAJQ;AAKb,eAAW,SALE;;;;;;AAWb,eAAW,qBAAW;AAClB;AACA;AACH;AAdY,CAAjB;;;;;;;AAsBA","file":"rules-compiled.js","sourcesContent":["/**\n * @fileoverview Defines a storage for rules.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar loadRules = require(\"./load-rules\");\n\n//------------------------------------------------------------------------------\n// Privates\n//------------------------------------------------------------------------------\n\nvar rules = Object.create(null);\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Registers a rule module for rule id in storage.\n * @param {string} ruleId Rule id (file name).\n * @param {Function} ruleModule Rule handler.\n * @returns {void}\n */\nfunction define(ruleId, ruleModule) {\n    rules[ruleId] = ruleModule;\n}\n\n/**\n * Loads and registers all rules from passed rules directory.\n * @param {string} [rulesDir] Path to rules directory, may be relative. Defaults to `lib/rules`.\n * @param {string} cwd Current working directory\n * @returns {void}\n */\nfunction load(rulesDir, cwd) {\n    var newRules = loadRules(rulesDir, cwd);\n\n    Object.keys(newRules).forEach(function(ruleId) {\n        define(ruleId, newRules[ruleId]);\n    });\n}\n\n/**\n * Registers all given rules of a plugin.\n * @param {Object} pluginRules A key/value map of rule definitions.\n * @param {string} pluginName The name of the plugin without prefix (`eslint-plugin-`).\n * @returns {void}\n */\nfunction importPlugin(pluginRules, pluginName) {\n    Object.keys(pluginRules).forEach(function(ruleId) {\n        var qualifiedRuleId = pluginName + \"/\" + ruleId,\n            rule = pluginRules[ruleId];\n\n        define(qualifiedRuleId, rule);\n    });\n}\n\n/**\n * Access rule handler by id (file name).\n * @param {string} ruleId Rule id (file name).\n * @returns {Function} Rule handler.\n */\nfunction get(ruleId) {\n    if (typeof rules[ruleId] === \"string\") {\n        return require(rules[ruleId]);\n    } else {\n        return rules[ruleId];\n    }\n}\n\n/**\n * Reset rules storage.\n * Should be used only in tests.\n * @returns {void}\n */\nfunction testClear() {\n    rules = Object.create(null);\n}\n\nmodule.exports = {\n    define: define,\n    load: load,\n    import: importPlugin,\n    get: get,\n    testClear: testClear,\n\n    /**\n     * Resets rules to its starting state. Use for tests only.\n     * @returns {void}\n     */\n    testReset: function() {\n        testClear();\n        load();\n    }\n};\n\n//------------------------------------------------------------------------------\n// Initialization\n//------------------------------------------------------------------------------\n\n// loads built-in rules\nload();\n"]}