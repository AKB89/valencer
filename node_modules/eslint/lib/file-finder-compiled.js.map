{"version":3,"sources":["file-finder.js"],"names":[],"mappings":"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","file":"file-finder-compiled.js","sourcesContent":["/**\n * @fileoverview Util class to find config files.\n * @author Aliaksei Shytkin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar fs = require(\"fs\"),\n    path = require(\"path\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Get the entries for a directory. Including a try-catch may be detrimental to\n * function performance, so move it out here a separate function.\n * @param {string} directory The directory to search in.\n * @returns {string[]} The entries in the directory or an empty array on error.\n * @private\n */\nfunction getDirectoryEntries(directory) {\n    try {\n        return fs.readdirSync(directory);\n    } catch (ex) {\n        return [];\n    }\n}\n\n//------------------------------------------------------------------------------\n// API\n//------------------------------------------------------------------------------\n\n/**\n * FileFinder\n * @constructor\n * @param {string[]} files The basename(s) of the file(s) to find.\n * @param {stirng} cwd Current working directory\n */\nfunction FileFinder(files, cwd) {\n    this.fileNames = Array.isArray(files) ? files : [files];\n    this.cwd = cwd || process.cwd();\n    this.cache = {};\n}\n\n/**\n * Create a hash of filenames from a directory listing\n * @param {string[]} entries Array of directory entries.\n * @param {string} directory Path to a current directory.\n * @param {string[]} supportedConfigs List of support filenames.\n * @returns {Object} Hashmap of filenames\n */\nfunction normalizeDirectoryEntries(entries, directory, supportedConfigs) {\n    var fileHash = {};\n\n    entries.forEach(function(entry) {\n        if (supportedConfigs.indexOf(entry) >= 0) {\n            var resolvedEntry = path.resolve(directory, entry);\n\n            if (fs.statSync(resolvedEntry).isFile()) {\n                fileHash[entry] = resolvedEntry;\n            }\n        }\n    });\n    return fileHash;\n}\n\n/**\n * Find one instance of a specified file name in directory or in a parent directory.\n * Cache the results.\n * Does not check if a matching directory entry is a file, and intentionally\n * only searches for the first file name in this.fileNames.\n * Is currently used by lib/ignored_paths.js to find an .eslintignore file.\n * @param {string} directory The directory to start the search from.\n * @returns {string} Path of the file found, or an empty string if not found.\n */\nFileFinder.prototype.findInDirectoryOrParents = function(directory) {\n    var cache = this.cache,\n        child,\n        dirs,\n        filePath,\n        i,\n        names,\n        searched;\n\n    if (!directory) {\n        directory = this.cwd;\n    }\n\n    if (cache.hasOwnProperty(directory)) {\n        return cache[directory];\n    }\n\n    dirs = [];\n    searched = 0;\n    names = this.fileNames;\n\n    (function() {\n        while (directory !== child) {\n            dirs[searched++] = directory;\n            var filesMap = normalizeDirectoryEntries(getDirectoryEntries(directory), directory, names);\n\n            if (Object.keys(filesMap).length) {\n                for (var k = 0; k < names.length; k++) {\n                    if (filesMap[names[k]]) {\n                        filePath = filesMap[names[k]];\n                        return;\n                    }\n                }\n            }\n\n            child = directory;\n\n            // Assign parent directory to directory.\n            directory = path.dirname(directory);\n        }\n    }());\n\n    for (i = 0; i < searched; i++) {\n        cache[dirs[i]] = filePath;\n    }\n\n    return filePath || String();\n};\n\n/**\n * Find all instances of files with the specified file names, in directory and\n * parent directories. Cache the results.\n * Does not check if a matching directory entry is a file.\n * Searches for all the file names in this.fileNames.\n * Is currently used by lib/config.js to find .eslintrc and package.json files.\n * @param  {string} directory The directory to start the search from.\n * @returns {string[]} The file paths found.\n */\nFileFinder.prototype.findAllInDirectoryAndParents = function(directory) {\n    var cache = this.cache,\n        child,\n        dirs,\n        fileNames,\n        filePath,\n        i,\n        j,\n        searched;\n\n    if (!directory) {\n        directory = this.cwd;\n    }\n\n    if (cache.hasOwnProperty(directory)) {\n        return cache[directory];\n    }\n\n    dirs = [];\n    searched = 0;\n    fileNames = this.fileNames;\n\n    do {\n        dirs[searched++] = directory;\n        cache[directory] = [];\n\n        var filesMap = normalizeDirectoryEntries(getDirectoryEntries(directory), directory, fileNames);\n\n        if (Object.keys(filesMap).length) {\n            for (var k = 0; k < fileNames.length; k++) {\n\n                if (filesMap[fileNames[k]]) {\n                    filePath = filesMap[fileNames[k]];\n\n                    // Add the file path to the cache of each directory searched.\n                    for (j = 0; j < searched; j++) {\n                        cache[dirs[j]].push(filePath);\n                    }\n\n                    break;\n                }\n            }\n        }\n        child = directory;\n\n        // Assign parent directory to directory.\n        directory = path.dirname(directory);\n\n        if (directory === child) {\n            return cache[dirs[0]];\n        }\n    } while (!cache.hasOwnProperty(directory));\n\n    // Add what has been cached previously to the cache of each directory searched.\n    for (i = 0; i < searched; i++) {\n        dirs.push.apply(cache[dirs[i]], cache[directory]);\n    }\n\n    return cache[dirs[0]];\n};\n\nmodule.exports = FileFinder;\n"]}