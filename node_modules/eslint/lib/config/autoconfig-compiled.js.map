{"version":3,"sources":["autoconfig.js"],"names":[],"mappings":"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","file":"autoconfig-compiled.js","sourcesContent":["/**\n * @fileoverview Used for creating a suggested configuration based on project code.\n * @author Ian VanSchooten\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar lodash = require(\"lodash\"),\n    debug = require(\"debug\"),\n    eslint = require(\"../eslint\"),\n    configRule = require(\"./config-rule\"),\n    ConfigOps = require(\"./config-ops\"),\n    recConfig = require(\"../../conf/eslint.json\");\n\n//------------------------------------------------------------------------------\n// Data\n//------------------------------------------------------------------------------\n\nvar MAX_CONFIG_COMBINATIONS = 17, // 16 combinations + 1 for severity only\n    RECOMMENDED_CONFIG_NAME = \"eslint:recommended\";\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\ndebug = debug(\"eslint:autoconfig\");\n\n/**\n * Information about a rule configuration, in the context of a Registry.\n *\n * @typedef {Object}     registryItem\n * @param   {ruleConfig} config        A valid configuration for the rule\n * @param   {number}     specificity   The number of elements in the ruleConfig array\n * @param   {number}     errorCount    The number of errors encountered when linting with the config\n */\n\n /**\n  * This callback is used to measure execution status in a progress bar\n  * @callback progressCallback\n  * @param {number} The total number of times the callback will be called.\n  */\n\n/**\n * Create registryItems for rules\n * @param   {rulesConfig} rulesConfig Hash of rule names and arrays of ruleConfig items\n * @returns {Object}                  registryItems for each rule in provided rulesConfig\n */\nfunction makeRegistryItems(rulesConfig) {\n    return Object.keys(rulesConfig).reduce(function(accumulator, ruleId) {\n        accumulator[ruleId] = rulesConfig[ruleId].map(function(config) {\n            return {\n                config: config,\n                specificity: config.length || 1,\n                errorCount: void 0\n            };\n        });\n        return accumulator;\n    }, {});\n}\n\n/**\n* Creates an object in which to store rule configs and error counts\n*\n* Unless a rulesConfig is provided at construction, the registry will not contain\n* any rules, only methods.  This will be useful for building up registries manually.\n*\n* @constructor\n* @class   Registry\n* @param   {rulesConfig} [rulesConfig] Hash of rule names and arrays of possible configurations\n*/\nfunction Registry(rulesConfig) {\n    this.rules = (rulesConfig) ? makeRegistryItems(rulesConfig) : {};\n}\n\nRegistry.prototype = {\n\n    constructor: Registry,\n\n    /**\n     * Populate the registry with core rule configs.\n     *\n     * It will set the registry's `rule` property to an object having rule names\n     * as keys and an array of registryItems as values.\n     *\n     * @returns {void}\n     */\n    populateFromCoreRules: function() {\n        var rulesConfig = configRule.createCoreRuleConfigs();\n\n        this.rules = makeRegistryItems(rulesConfig);\n    },\n\n    /**\n     * Creates sets of rule configurations which can be used for linting\n     * and initializes registry errors to zero for those configurations (side effect).\n     *\n     * This combines as many rules together as possible, such that the first sets\n     * in the array will have the highest number of rules configured, and later sets\n     * will have fewer and fewer, as not all rules have the same number of possible\n     * configurations.\n     *\n     * The length of the returned array will be <= MAX_CONFIG_COMBINATIONS.\n     *\n     * @param   {Object}   registry The autoconfig registry\n     * @returns {Object[]}          \"rules\" configurations to use for linting\n     */\n    buildRuleSets: function() {\n        var idx = 0,\n            ruleIds = Object.keys(this.rules),\n            ruleSets = [];\n\n        /**\n         * Add a rule configuration from the registry to the ruleSets\n         *\n         * This is broken out into its own function so that it doesn't need to be\n         * created inside of the while loop.\n         *\n         * @param   {string} rule The ruleId to add.\n         * @returns {void}\n         */\n        var addRuleToRuleSet = function(rule) {\n\n            /*\n             * This check ensures that there is a rule configuration and that\n             * it has fewer than the max combinations allowed.\n             * If it has too many configs, we will only use the most basic of\n             * the possible configurations.\n             */\n            var hasFewCombos = (this.rules[rule].length <= MAX_CONFIG_COMBINATIONS);\n\n            if (this.rules[rule][idx] && (hasFewCombos || this.rules[rule][idx].specificity <= 2)) {\n\n                /*\n                 * If the rule has too many possible combinations, only take\n                 * simple ones, avoiding objects.\n                 */\n                if (!hasFewCombos && typeof this.rules[rule][idx].config[1] === \"object\") {\n                    return;\n                }\n\n                ruleSets[idx] = ruleSets[idx] || {};\n                ruleSets[idx][rule] = this.rules[rule][idx].config;\n\n                /*\n                 * Initialize errorCount to zero, since this is a config which\n                 * will be linted.\n                 */\n                this.rules[rule][idx].errorCount = 0;\n            }\n        }.bind(this);\n\n        while (ruleSets.length === idx) {\n            ruleIds.forEach(addRuleToRuleSet);\n            idx += 1;\n        }\n\n        return ruleSets;\n    },\n\n    /**\n     * Remove all items from the registry with a non-zero number of errors\n     *\n     * Note: this also removes rule configurations which were not linted\n     * (meaning, they have an undefined errorCount).\n     *\n     * @returns {void}\n     */\n    stripFailingConfigs: function() {\n        var ruleIds = Object.keys(this.rules),\n            newRegistry = new Registry();\n\n        newRegistry.rules = lodash.assign({}, this.rules);\n        ruleIds.forEach(function(ruleId) {\n            var errorFreeItems = newRegistry.rules[ruleId].filter(function(registryItem) {\n                return (registryItem.errorCount === 0);\n            });\n\n            if (errorFreeItems.length > 0) {\n                newRegistry.rules[ruleId] = errorFreeItems;\n            } else {\n                delete newRegistry.rules[ruleId];\n            }\n        });\n\n        return newRegistry;\n    },\n\n    /**\n     * Removes rule configurations which were not included in a ruleSet\n     *\n     * @returns {void}\n     */\n    stripExtraConfigs: function() {\n        var ruleIds = Object.keys(this.rules),\n            newRegistry = new Registry();\n\n        newRegistry.rules = lodash.assign({}, this.rules);\n        ruleIds.forEach(function(ruleId) {\n            newRegistry.rules[ruleId] = newRegistry.rules[ruleId].filter(function(registryItem) {\n                return (typeof registryItem.errorCount !== \"undefined\");\n            });\n        });\n\n        return newRegistry;\n    },\n\n    /**\n     * Creates a registry of rules which had no error-free configs.\n     * The new registry is intended to be analyzed to determine whether its rules\n     * should be disabled or set to warning.\n     *\n     * @returns {Registry}  A registry of failing rules.\n     */\n    getFailingRulesRegistry: function() {\n        var ruleIds = Object.keys(this.rules),\n            failingRegistry = new Registry();\n\n        ruleIds.forEach(function(ruleId) {\n            var failingConfigs = this.rules[ruleId].filter(function(registryItem) {\n                return (registryItem.errorCount > 0);\n            });\n\n            if (failingConfigs && failingConfigs.length === this.rules[ruleId].length) {\n                failingRegistry.rules[ruleId] = failingConfigs;\n            }\n        }.bind(this));\n\n        return failingRegistry;\n    },\n\n    /**\n     * Create an eslint config for any rules which only have one configuration\n     * in the registry.\n     *\n     * @returns {Object} An eslint config with rules section populated\n     */\n    createConfig: function() {\n        var ruleIds = Object.keys(this.rules),\n            config = {rules: {}};\n\n        ruleIds.forEach(function(ruleId) {\n            if (this.rules[ruleId].length === 1) {\n                config.rules[ruleId] = this.rules[ruleId][0].config;\n            }\n        }.bind(this));\n\n        return config;\n    },\n\n    /**\n     * Return a cloned registry containing only configs with a desired specificity\n     *\n     * @param   {number} specificity Only keep configs with this specificity\n     * @returns {Registry}           A registry of rules\n     */\n    filterBySpecificity: function(specificity) {\n        var ruleIds = Object.keys(this.rules),\n            newRegistry = new Registry();\n\n        newRegistry.rules = lodash.assign({}, this.rules);\n        ruleIds.forEach(function(ruleId) {\n            newRegistry.rules[ruleId] = this.rules[ruleId].filter(function(registryItem) {\n                return (registryItem.specificity === specificity);\n            });\n        }.bind(this));\n\n        return newRegistry;\n    },\n\n    /**\n     * Lint SourceCodes against all configurations in the registry, and record results\n     *\n     * @param   {Object[]} sourceCodes  SourceCode objects for each filename\n     * @param   {Object}   config       ESLint config object\n     * @param   {progressCallback} [cb] Optional callback for reporting execution status\n     * @returns {Registry}              New registry with errorCount populated\n     */\n    lintSourceCode: function(sourceCodes, config, cb) {\n        var totalFilesLinting,\n            lintConfig,\n            ruleSets,\n            ruleSetIdx,\n            filenames,\n            lintedRegistry;\n\n        lintedRegistry = new Registry();\n        lintedRegistry.rules = lodash.assign({}, this.rules);\n\n        ruleSets = lintedRegistry.buildRuleSets();\n\n        lintedRegistry = lintedRegistry.stripExtraConfigs();\n\n        debug(\"Linting with all possible rule combinations\");\n\n        filenames = Object.keys(sourceCodes);\n\n        totalFilesLinting = filenames.length * ruleSets.length;\n\n        filenames.forEach(function(filename) {\n            debug(\"Linting file: \" + filename);\n\n            ruleSetIdx = 0;\n\n            ruleSets.forEach(function(ruleSet) {\n                lintConfig = lodash.assign({}, config, {rules: ruleSet});\n                var lintResults = eslint.verify(sourceCodes[filename], lintConfig);\n\n                lintResults.forEach(function(result) {\n\n                    // It is possible that the error is from a configuration comment\n                    // in a linted file, in which case there may not be a config\n                    // set in this ruleSetIdx. (https://github.com/eslint/eslint/issues/5992)\n                    if (lintedRegistry.rules[result.ruleId][ruleSetIdx]) {\n                        lintedRegistry.rules[result.ruleId][ruleSetIdx].errorCount += 1;\n                    }\n                });\n\n                ruleSetIdx += 1;\n\n                if (cb) {\n                    cb(totalFilesLinting);  // eslint-disable-line callback-return\n                }\n            });\n\n            // Deallocate for GC\n            sourceCodes[filename] = null;\n        });\n\n        return lintedRegistry;\n    }\n};\n\n/**\n * Extract rule configuration into eslint:recommended where possible.\n *\n * This will return a new config with `\"extends\": \"eslint:recommended\"` and\n * only the rules which have configurations different from the recommended config.\n *\n * @param   {Object} config config object\n * @returns {Object}        config object using `\"extends\": \"eslint:recommended\"`\n */\nfunction extendFromRecommended(config) {\n    var newConfig = lodash.assign({}, config);\n\n    ConfigOps.normalizeToStrings(newConfig);\n\n    var recRules = Object.keys(recConfig.rules).filter(function(ruleId) {\n        return ConfigOps.isErrorSeverity(recConfig.rules[ruleId]);\n    });\n\n    recRules.forEach(function(ruleId) {\n        if (lodash.isEqual(recConfig.rules[ruleId], newConfig.rules[ruleId])) {\n            delete newConfig.rules[ruleId];\n        }\n    });\n    newConfig.extends = RECOMMENDED_CONFIG_NAME;\n    return newConfig;\n}\n\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    Registry: Registry,\n    extendFromRecommended: extendFromRecommended\n};\n"]}