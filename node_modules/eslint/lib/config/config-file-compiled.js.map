{"version":3,"sources":["config-file.js"],"names":[],"mappings":"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","file":"config-file-compiled.js","sourcesContent":["/**\n * @fileoverview Helper to locate and load configuration files.\n * @author Nicholas C. Zakas\n */\n\n/* eslint no-use-before-define: 0 */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar debug = require(\"debug\"),\n    fs = require(\"fs\"),\n    path = require(\"path\"),\n    ConfigOps = require(\"./config-ops\"),\n    validator = require(\"./config-validator\"),\n    Plugins = require(\"./plugins\"),\n    pathUtil = require(\"../util/path-util\"),\n    ModuleResolver = require(\"../util/module-resolver\"),\n    pathIsInside = require(\"path-is-inside\"),\n    stripComments = require(\"strip-json-comments\"),\n    stringify = require(\"json-stable-stringify\"),\n    isAbsolutePath = require(\"path-is-absolute\"),\n    defaultOptions = require(\"../../conf/eslint.json\"),\n    requireUncached = require(\"require-uncached\");\n\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines sort order for object keys for json-stable-stringify\n *\n * see: https://github.com/substack/json-stable-stringify#cmp\n *\n * @param   {Object} a The first comparison object ({key: akey, value: avalue})\n * @param   {Object} b The second comparison object ({key: bkey, value: bvalue})\n * @returns {number}   1 or -1, used in stringify cmp method\n */\nfunction sortByKey(a, b) {\n    return a.key > b.key ? 1 : -1;\n}\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\nvar CONFIG_FILES = [\n    \".eslintrc.js\",\n    \".eslintrc.yaml\",\n    \".eslintrc.yml\",\n    \".eslintrc.json\",\n    \".eslintrc\",\n    \"package.json\"\n];\n\nvar resolver = new ModuleResolver();\n\ndebug = debug(\"eslint:config-file\");\n\n/**\n * Convenience wrapper for synchronously reading file contents.\n * @param {string} filePath The filename to read.\n * @returns {string} The file contents.\n * @private\n */\nfunction readFile(filePath) {\n    return fs.readFileSync(filePath, \"utf8\");\n}\n\n/**\n * Determines if a given string represents a filepath or not using the same\n * conventions as require(), meaning that the first character must be nonalphanumeric\n * and not the @ sign which is used for scoped packages to be considered a file path.\n * @param {string} filePath The string to check.\n * @returns {boolean} True if it's a filepath, false if not.\n * @private\n */\nfunction isFilePath(filePath) {\n    return isAbsolutePath(filePath) || !/\\w|@/.test(filePath.charAt(0));\n}\n\n/**\n * Loads a YAML configuration from a file.\n * @param {string} filePath The filename to load.\n * @returns {Object} The configuration object from the file.\n * @throws {Error} If the file cannot be read.\n * @private\n */\nfunction loadYAMLConfigFile(filePath) {\n    debug(\"Loading YAML config file: \" + filePath);\n\n    // lazy load YAML to improve performance when not used\n    var yaml = require(\"js-yaml\");\n\n    try {\n\n        // empty YAML file can be null, so always use\n        return yaml.safeLoad(readFile(filePath)) || {};\n    } catch (e) {\n        debug(\"Error reading YAML file: \" + filePath);\n        e.message = \"Cannot read config file: \" + filePath + \"\\nError: \" + e.message;\n        throw e;\n    }\n}\n\n/**\n * Loads a JSON configuration from a file.\n * @param {string} filePath The filename to load.\n * @returns {Object} The configuration object from the file.\n * @throws {Error} If the file cannot be read.\n * @private\n */\nfunction loadJSONConfigFile(filePath) {\n    debug(\"Loading JSON config file: \" + filePath);\n\n    try {\n        return JSON.parse(stripComments(readFile(filePath)));\n    } catch (e) {\n        debug(\"Error reading JSON file: \" + filePath);\n        e.message = \"Cannot read config file: \" + filePath + \"\\nError: \" + e.message;\n        throw e;\n    }\n}\n\n/**\n * Loads a legacy (.eslintrc) configuration from a file.\n * @param {string} filePath The filename to load.\n * @returns {Object} The configuration object from the file.\n * @throws {Error} If the file cannot be read.\n * @private\n */\nfunction loadLegacyConfigFile(filePath) {\n    debug(\"Loading config file: \" + filePath);\n\n    // lazy load YAML to improve performance when not used\n    var yaml = require(\"js-yaml\");\n\n    try {\n        return yaml.safeLoad(stripComments(readFile(filePath))) || /* istanbul ignore next */ {};\n    } catch (e) {\n        debug(\"Error reading YAML file: \" + filePath);\n        e.message = \"Cannot read config file: \" + filePath + \"\\nError: \" + e.message;\n        throw e;\n    }\n}\n\n/**\n * Loads a JavaScript configuration from a file.\n * @param {string} filePath The filename to load.\n * @returns {Object} The configuration object from the file.\n * @throws {Error} If the file cannot be read.\n * @private\n */\nfunction loadJSConfigFile(filePath) {\n    debug(\"Loading JS config file: \" + filePath);\n    try {\n        return requireUncached(filePath);\n    } catch (e) {\n        debug(\"Error reading JavaScript file: \" + filePath);\n        e.message = \"Cannot read config file: \" + filePath + \"\\nError: \" + e.message;\n        throw e;\n    }\n}\n\n/**\n * Loads a configuration from a package.json file.\n * @param {string} filePath The filename to load.\n * @returns {Object} The configuration object from the file.\n * @throws {Error} If the file cannot be read.\n * @private\n */\nfunction loadPackageJSONConfigFile(filePath) {\n    debug(\"Loading package.json config file: \" + filePath);\n    try {\n        return loadJSONConfigFile(filePath).eslintConfig || null;\n    } catch (e) {\n        debug(\"Error reading package.json file: \" + filePath);\n        e.message = \"Cannot read config file: \" + filePath + \"\\nError: \" + e.message;\n        throw e;\n    }\n}\n\n/**\n * Loads a configuration file regardless of the source. Inspects the file path\n * to determine the correctly way to load the config file.\n * @param {Object} file The path to the configuration.\n * @returns {Object} The configuration information.\n * @private\n */\nfunction loadConfigFile(file) {\n    var config,\n        filePath = file.filePath;\n\n    switch (path.extname(filePath)) {\n        case \".js\":\n            config = loadJSConfigFile(filePath);\n            if (file.configName) {\n                config = config.configs[file.configName];\n            }\n            break;\n\n        case \".json\":\n            if (path.basename(filePath) === \"package.json\") {\n                config = loadPackageJSONConfigFile(filePath);\n                if (config === null) {\n                    return null;\n                }\n            } else {\n                config = loadJSONConfigFile(filePath);\n            }\n            break;\n\n        case \".yaml\":\n        case \".yml\":\n            config = loadYAMLConfigFile(filePath);\n            break;\n\n        default:\n            config = loadLegacyConfigFile(filePath);\n    }\n\n    return ConfigOps.merge(ConfigOps.createEmptyConfig(), config);\n}\n\n/**\n * Writes a configuration file in JSON format.\n * @param {Object} config The configuration object to write.\n * @param {string} filePath The filename to write to.\n * @returns {void}\n * @private\n */\nfunction writeJSONConfigFile(config, filePath) {\n    debug(\"Writing JSON config file: \" + filePath);\n\n    var content = stringify(config, {cmp: sortByKey, space: 4});\n\n    fs.writeFileSync(filePath, content, \"utf8\");\n}\n\n/**\n * Writes a configuration file in YAML format.\n * @param {Object} config The configuration object to write.\n * @param {string} filePath The filename to write to.\n * @returns {void}\n * @private\n */\nfunction writeYAMLConfigFile(config, filePath) {\n    debug(\"Writing YAML config file: \" + filePath);\n\n    // lazy load YAML to improve performance when not used\n    var yaml = require(\"js-yaml\");\n\n    var content = yaml.safeDump(config, {sortKeys: true});\n\n    fs.writeFileSync(filePath, content, \"utf8\");\n}\n\n/**\n * Writes a configuration file in JavaScript format.\n * @param {Object} config The configuration object to write.\n * @param {string} filePath The filename to write to.\n * @returns {void}\n * @private\n */\nfunction writeJSConfigFile(config, filePath) {\n    debug(\"Writing JS config file: \" + filePath);\n\n    var content = \"module.exports = \" + stringify(config, {cmp: sortByKey, space: 4}) + \";\";\n\n    fs.writeFileSync(filePath, content, \"utf8\");\n}\n\n/**\n * Writes a configuration file.\n * @param {Object} config The configuration object to write.\n * @param {string} filePath The filename to write to.\n * @returns {void}\n * @throws {Error} When an unknown file type is specified.\n * @private\n */\nfunction write(config, filePath) {\n    switch (path.extname(filePath)) {\n        case \".js\":\n            writeJSConfigFile(config, filePath);\n            break;\n\n        case \".json\":\n            writeJSONConfigFile(config, filePath);\n            break;\n\n        case \".yaml\":\n        case \".yml\":\n            writeYAMLConfigFile(config, filePath);\n            break;\n\n        default:\n            throw new Error(\"Can't write to unknown file type.\");\n    }\n}\n\n/**\n * Determines the base directory for node packages referenced in a config file.\n * This does not include node_modules in the path so it can be used for all\n * references relative to a config file.\n * @param {string} configFilePath The config file referencing the file.\n * @returns {string} The base directory for the file path.\n * @private\n */\nfunction getBaseDir(configFilePath) {\n\n    // calculates the path of the project including ESLint as dependency\n    var projectPath = path.resolve(__dirname, \"../../../\");\n\n    if (configFilePath && pathIsInside(configFilePath, projectPath)) {\n\n        // be careful of https://github.com/substack/node-resolve/issues/78\n        return path.join(path.resolve(configFilePath));\n    }\n\n    /*\n     * default to ESLint project path since it's unlikely that plugins will be\n     * in this directory\n     */\n    return path.join(projectPath);\n}\n\n/**\n * Determines the lookup path, including node_modules, for package\n * references relative to a config file.\n * @param {string} configFilePath The config file referencing the file.\n * @returns {string} The lookup path for the file path.\n * @private\n */\nfunction getLookupPath(configFilePath) {\n    var basedir = getBaseDir(configFilePath);\n\n    return path.join(basedir, \"node_modules\");\n}\n\n/**\n * Applies values from the \"extends\" field in a configuration file.\n * @param {Object} config The configuration information.\n * @param {string} filePath The file path from which the configuration information\n *      was loaded.\n * @param {string} [relativeTo] The path to resolve relative to.\n * @returns {Object} A new configuration object with all of the \"extends\" fields\n *      loaded and merged.\n * @private\n */\nfunction applyExtends(config, filePath, relativeTo) {\n    var configExtends = config.extends;\n\n    // normalize into an array for easier handling\n    if (!Array.isArray(config.extends)) {\n        configExtends = [config.extends];\n    }\n\n    // Make the last element in an array take the highest precedence\n    config = configExtends.reduceRight(function(previousValue, parentPath) {\n\n        if (parentPath === \"eslint:recommended\") {\n\n            /*\n             * Add an explicit substitution for eslint:recommended to conf/eslint.json\n             * this lets us use the eslint.json file as the recommended rules\n             */\n            parentPath = path.resolve(__dirname, \"../../conf/eslint.json\");\n        } else if (isFilePath(parentPath)) {\n\n            /*\n             * If the `extends` path is relative, use the directory of the current configuration\n             * file as the reference point. Otherwise, use as-is.\n             */\n            parentPath = (!isAbsolutePath(parentPath) ?\n                path.join(path.dirname(filePath), parentPath) :\n                parentPath\n            );\n        }\n\n        try {\n            debug(\"Loading \" + parentPath);\n            return ConfigOps.merge(load(parentPath, false, relativeTo), previousValue);\n        } catch (e) {\n\n            /*\n             * If the file referenced by `extends` failed to load, add the path\n             * to the configuration file that referenced it to the error\n             * message so the user is able to see where it was referenced from,\n             * then re-throw.\n             */\n            e.message += \"\\nReferenced from: \" + filePath;\n            throw e;\n        }\n\n    }, config);\n\n    return config;\n}\n\n/**\n * Brings package name to correct format based on prefix\n * @param {string} name The name of the package.\n * @param {string} prefix Can be either \"eslint-plugin\" or \"eslint-config\n * @returns {string} Normalized name of the package\n * @private\n */\nfunction normalizePackageName(name, prefix) {\n\n    /*\n     * On Windows, name can come in with Windows slashes instead of Unix slashes.\n     * Normalize to Unix first to avoid errors later on.\n     * https://github.com/eslint/eslint/issues/5644\n     */\n    if (name.indexOf(\"\\\\\") > -1) {\n        name = pathUtil.convertPathToPosix(name);\n    }\n\n    if (name.charAt(0) === \"@\") {\n\n        /*\n         * it's a scoped package\n         * package name is \"eslint-config\", or just a username\n         */\n        var scopedPackageShortcutRegex = new RegExp(\"^(@[^\\/]+)(?:\\/(?:\" + prefix + \")?)?$\"),\n            scopedPackageNameRegex = new RegExp(\"^\" + prefix + \"(-|$)\");\n\n        if (scopedPackageShortcutRegex.test(name)) {\n            name = name.replace(scopedPackageShortcutRegex, \"$1/\" + prefix);\n        } else if (!scopedPackageNameRegex.test(name.split(\"/\")[1])) {\n\n            /*\n             * for scoped packages, insert the eslint-config after the first / unless\n             * the path is already @scope/eslint or @scope/eslint-config-xxx\n             */\n            name = name.replace(/^@([^\\/]+)\\/(.*)$/, \"@$1/\" + prefix + \"-$2\");\n        }\n    } else if (name.indexOf(prefix + \"-\") !== 0) {\n        name = prefix + \"-\" + name;\n    }\n\n    return name;\n}\n\n/**\n * Resolves a configuration file path into the fully-formed path, whether filename\n * or package name.\n * @param {string} filePath The filepath to resolve.\n * @param {string} [relativeTo] The path to resolve relative to.\n * @returns {Object} A path that can be used directly to load the configuration.\n * @private\n */\nfunction resolve(filePath, relativeTo) {\n    if (isFilePath(filePath)) {\n        return { filePath: path.resolve(relativeTo || \"\", filePath) };\n    } else {\n        var normalizedPackageName;\n\n        if (filePath.indexOf(\"plugin:\") === 0) {\n            var packagePath = filePath.substr(7, filePath.lastIndexOf(\"/\") - 7);\n            var configName = filePath.substr(filePath.lastIndexOf(\"/\") + 1, filePath.length - filePath.lastIndexOf(\"/\") - 1);\n\n            normalizedPackageName = normalizePackageName(packagePath, \"eslint-plugin\");\n            debug(\"Attempting to resolve \" + normalizedPackageName);\n            filePath = resolver.resolve(normalizedPackageName, getLookupPath(relativeTo));\n            return { filePath: filePath, configName: configName };\n        } else {\n            normalizedPackageName = normalizePackageName(filePath, \"eslint-config\");\n            debug(\"Attempting to resolve \" + normalizedPackageName);\n            filePath = resolver.resolve(normalizedPackageName, getLookupPath(relativeTo));\n            return { filePath: filePath };\n        }\n    }\n\n}\n\n/**\n * Loads a configuration file from the given file path.\n * @param {string} filePath The filename or package name to load the configuration\n *      information from.\n * @param {boolean} [applyEnvironments=false] Set to true to merge in environment settings.\n * @param {string} [relativeTo] The path to resolve relative to.\n * @returns {Object} The configuration information.\n * @private\n */\nfunction load(filePath, applyEnvironments, relativeTo) {\n    var resolvedPath = resolve(filePath, relativeTo),\n        dirname = path.dirname(resolvedPath.filePath),\n        basedir = getBaseDir(dirname),\n        lookupPath = getLookupPath(dirname),\n        config = loadConfigFile(resolvedPath);\n\n    if (config) {\n\n        // ensure plugins are properly loaded first\n        if (config.plugins) {\n            Plugins.loadAll(config.plugins);\n        }\n\n        // remove parser from config if it is the default parser\n        if (config.parser === defaultOptions.parser) {\n            config.parser = null;\n        }\n\n        // include full path of parser if present\n        if (config.parser) {\n            if (isFilePath(config.parser)) {\n                config.parser = path.resolve(basedir || \"\", config.parser);\n            } else {\n                config.parser = resolver.resolve(config.parser, lookupPath);\n            }\n        }\n\n        // validate the configuration before continuing\n        validator.validate(config, filePath);\n\n        /*\n         * If an `extends` property is defined, it represents a configuration file to use as\n         * a \"parent\". Load the referenced file and merge the configuration recursively.\n         */\n        if (config.extends) {\n            config = applyExtends(config, filePath, basedir);\n        }\n\n        if (config.env && applyEnvironments) {\n\n            // Merge in environment-specific globals and parserOptions.\n            config = ConfigOps.applyEnvironments(config);\n        }\n\n    }\n\n    return config;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n\n    getBaseDir: getBaseDir,\n    getLookupPath: getLookupPath,\n    load: load,\n    resolve: resolve,\n    write: write,\n    applyExtends: applyExtends,\n    normalizePackageName: normalizePackageName,\n    CONFIG_FILES: CONFIG_FILES,\n\n    /**\n     * Retrieves the configuration filename for a given directory. It loops over all\n     * of the valid configuration filenames in order to find the first one that exists.\n     * @param {string} directory The directory to check for a config file.\n     * @returns {?string} The filename of the configuration file for the directory\n     *      or null if there is no configuration file in the directory.\n     */\n    getFilenameForDirectory: function(directory) {\n\n        var filename;\n\n        for (var i = 0, len = CONFIG_FILES.length; i < len; i++) {\n            filename = path.join(directory, CONFIG_FILES[i]);\n            if (fs.existsSync(filename)) {\n                return filename;\n            }\n        }\n\n        return null;\n    }\n};\n"]}