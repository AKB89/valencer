{"version":3,"sources":["environments.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;IACI,OAAO,QAAQ,yBAAR,CADX;;;;;;AAOA,QAAQ,MAAM,oBAAN,CAAR;;AAEA,IAAI,eAAe,OAAO,MAAP,CAAc,IAAd,CAAnB;;;;;;;AAOA,SAAS,IAAT,GAAgB;AACZ,WAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB,CAA0B,UAAS,OAAT,EAAkB;AACxC,qBAAa,OAAb,IAAwB,KAAK,OAAL,CAAxB;AACH,KAFD;AAGH;;;AAGD;;;;;;AAMA,OAAO,OAAP,GAAiB;;AAEb,UAAM,IAFO;;;;;;;AASb,SAAK,aAAS,IAAT,EAAe;AAChB,eAAO,aAAa,IAAb,KAAsB,IAA7B;AACH,KAXY;;;;;;;;AAmBb,YAAQ,gBAAS,IAAT,EAAe,GAAf,EAAoB;AACxB,qBAAa,IAAb,IAAqB,GAArB;AACH,KArBY;;;;;;;;AA6Bb,kBAAc,sBAAS,MAAT,EAAiB,UAAjB,EAA6B;AACvC,YAAI,OAAO,YAAX,EAAyB;AACrB,mBAAO,IAAP,CAAY,OAAO,YAAnB,EAAiC,OAAjC,CAAyC,UAAS,OAAT,EAAkB;AACvD,qBAAK,MAAL,CAAY,aAAa,GAAb,GAAmB,OAA/B,EAAwC,OAAO,YAAP,CAAoB,OAApB,CAAxC;AACH,aAFD,EAEG,IAFH;AAGH;AACJ,KAnCY;;;;;;AAyCb,eAAW,qBAAW;AAClB,uBAAe,OAAO,MAAP,CAAc,IAAd,CAAf;AACA;AACH;AA5CY,CAAjB","file":"environments-compiled.js","sourcesContent":["/**\n * @fileoverview Environments manager\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar debug = require(\"debug\"),\n    envs = require(\"../../conf/environments\");\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\ndebug = debug(\"eslint:enviroments\");\n\nvar environments = Object.create(null);\n\n/**\n * Loads the default environments.\n * @returns {void}\n * @private\n */\nfunction load() {\n    Object.keys(envs).forEach(function(envName) {\n        environments[envName] = envs[envName];\n    });\n}\n\n// always load default environments upfront\nload();\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n\n    load: load,\n\n    /**\n     * Gets the environment with the given name.\n     * @param {string} name The name of the environment to retrieve.\n     * @returns {Object?} The environment object or null if not found.\n     */\n    get: function(name) {\n        return environments[name] || null;\n    },\n\n    /**\n     * Defines an environment.\n     * @param {string} name The name of the environment.\n     * @param {Object} env The environment settings.\n     * @returns {void}\n     */\n    define: function(name, env) {\n        environments[name] = env;\n    },\n\n    /**\n     * Imports all environments from a plugin.\n     * @param {Object} plugin The plugin object.\n     * @param {string} pluginName The name of the plugin.\n     * @returns {void}\n     */\n    importPlugin: function(plugin, pluginName) {\n        if (plugin.environments) {\n            Object.keys(plugin.environments).forEach(function(envName) {\n                this.define(pluginName + \"/\" + envName, plugin.environments[envName]);\n            }, this);\n        }\n    },\n\n    /**\n     * Resets all environments. Only use for tests!\n     * @returns {void}\n     */\n    testReset: function() {\n        environments = Object.create(null);\n        load();\n    }\n};\n"]}