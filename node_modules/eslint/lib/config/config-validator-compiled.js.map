{"version":3,"sources":["config-validator.js"],"names":[],"mappings":"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","file":"config-validator-compiled.js","sourcesContent":["/**\n * @fileoverview Validates configs.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar rules = require(\"../rules\"),\n    Environments = require(\"./environments\"),\n    schemaValidator = require(\"is-my-json-valid\"),\n    util = require(\"util\");\n\nvar validators = {\n    rules: Object.create(null)\n};\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\n/**\n * Gets a complete options schema for a rule.\n * @param {string} id The rule's unique name.\n * @returns {object} JSON Schema for the rule's options.\n */\nfunction getRuleOptionsSchema(id) {\n    var rule = rules.get(id),\n        schema = rule && rule.schema || rule && rule.meta && rule.meta.schema;\n\n    // Given a tuple of schemas, insert warning level at the beginning\n    if (Array.isArray(schema)) {\n        if (schema.length) {\n            return {\n                type: \"array\",\n                items: schema,\n                minItems: 0,\n                maxItems: schema.length\n            };\n        } else {\n            return {\n                type: \"array\",\n                minItems: 0,\n                maxItems: 0\n            };\n        }\n    }\n\n    // Given a full schema, leave it alone\n    return schema || null;\n}\n\n/**\n * Validates a rule's options against its schema.\n * @param {string} id The rule's unique name.\n * @param {array|number} options The given options for the rule.\n * @param {string} source The name of the configuration source.\n * @returns {void}\n */\nfunction validateRuleOptions(id, options, source) {\n    var validateRule = validators.rules[id],\n        message,\n        severity,\n        localOptions,\n        schema = getRuleOptionsSchema(id),\n        validSeverity = true;\n\n    if (!validateRule && schema) {\n        validateRule = schemaValidator(schema, { verbose: true });\n        validators.rules[id] = validateRule;\n    }\n\n    // if it's not an array, it should be just a severity\n    if (Array.isArray(options)) {\n        localOptions = options.concat();    // clone\n        severity = localOptions.shift();\n    } else {\n        severity = options;\n        localOptions = [];\n    }\n\n    validSeverity = (\n        severity === 0 || severity === 1 || severity === 2 ||\n        (typeof severity === \"string\" && /^(?:off|warn|error)$/i.test(severity))\n    );\n\n    if (validateRule) {\n        validateRule(localOptions);\n    }\n\n    if ((validateRule && validateRule.errors) || !validSeverity) {\n        message = [\n            source, \":\\n\",\n            \"\\tConfiguration for rule \\\"\", id, \"\\\" is invalid:\\n\"\n        ];\n\n        if (!validSeverity) {\n            message.push(\n                \"\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '\",\n                util.inspect(severity).replace(/'/g, \"\\\"\").replace(/\\n/g, \"\"),\n                \"').\\n\"\n            );\n        }\n\n        if (validateRule && validateRule.errors) {\n            validateRule.errors.forEach(function(error) {\n                message.push(\n                    \"\\tValue \\\"\", error.value, \"\\\" \", error.message, \".\\n\"\n                );\n            });\n        }\n\n        throw new Error(message.join(\"\"));\n    }\n}\n\n/**\n * Validates an environment object\n * @param {object} environment The environment config object to validate.\n * @param {string} source The location to report with any errors.\n * @returns {void}\n */\nfunction validateEnvironment(environment, source) {\n\n    // not having an environment is ok\n    if (!environment) {\n        return;\n    }\n\n    if (Array.isArray(environment)) {\n        throw new Error(\"Environment must not be an array\");\n    }\n\n    if (typeof environment === \"object\") {\n        Object.keys(environment).forEach(function(env) {\n            if (!Environments.get(env)) {\n                var message = [\n                    source, \":\\n\",\n                    \"\\tEnvironment key \\\"\", env, \"\\\" is unknown\\n\"\n                ];\n\n                throw new Error(message.join(\"\"));\n            }\n        });\n    } else {\n        throw new Error(\"Environment must be an object\");\n    }\n}\n\n/**\n * Validates an entire config object.\n * @param {object} config The config object to validate.\n * @param {string} source The location to report with any errors.\n * @returns {void}\n */\nfunction validate(config, source) {\n\n    if (typeof config.rules === \"object\") {\n        Object.keys(config.rules).forEach(function(id) {\n            validateRuleOptions(id, config.rules[id], source);\n        });\n    }\n\n    validateEnvironment(config.env, source);\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    getRuleOptionsSchema: getRuleOptionsSchema,\n    validate: validate,\n    validateRuleOptions: validateRuleOptions\n};\n"]}