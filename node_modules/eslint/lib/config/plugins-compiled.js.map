{"version":3,"sources":["plugins.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;IACI,eAAe,QAAQ,gBAAR,CADnB;IAEI,QAAQ,QAAQ,UAAR,CAFZ;;;;;;AAQA,QAAQ,MAAM,gBAAN,CAAR;;AAEA,IAAI,UAAU,OAAO,MAAP,CAAc,IAAd,CAAd;;AAEA,IAAI,qBAAqB,gBAAzB;IACI,kBAAkB,SADtB;;;;;;;AAQA,SAAS,YAAT,CAAsB,UAAtB,EAAkC;AAC9B,WAAO,WAAW,OAAX,CAAmB,kBAAnB,MAA2C,CAA3C,GAA+C,WAAW,SAAX,CAAqB,mBAAmB,MAAxC,CAA/C,GAAiG,UAAxG;AACH;;;;;;;AAOD,SAAS,YAAT,CAAsB,UAAtB,EAAkC;AAC9B,WAAO,WAAW,KAAX,CAAiB,eAAjB,IAAoC,WAAW,KAAX,CAAiB,eAAjB,EAAkC,CAAlC,CAApC,GAA2E,EAAlF;AACH;;;;;;;AAOD,SAAS,eAAT,CAAyB,UAAzB,EAAqC;AACjC,WAAO,WAAW,OAAX,CAAmB,eAAnB,EAAoC,EAApC,CAAP;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB;;AAEb,kBAAc,YAFD;AAGb,kBAAc,YAHD;AAIb,qBAAiB,eAJJ;;;;;;;;AAYb,YAAQ,gBAAS,UAAT,EAAqB,MAArB,EAA6B;AACjC,YAAI,6BAA6B,gBAAgB,UAAhB,CAAjC;YACI,0BAA0B,aAAa,0BAAb,CAD9B;;AAGA,gBAAQ,uBAAR,IAAmC,MAAnC;;;AAGA,qBAAa,YAAb,CAA0B,MAA1B,EAAkC,uBAAlC;;AAEA,YAAI,OAAO,KAAX,EAAkB;AACd,kBAAM,MAAN,CAAa,OAAO,KAApB,EAA2B,uBAA3B;AACH;AACJ,KAxBY;;;;;;;AA+Bb,SAAK,aAAS,UAAT,EAAqB;AACtB,eAAO,QAAQ,UAAR,KAAuB,IAA9B;AACH,KAjCY;;;;;;AAuCb,YAAQ,kBAAW;AACf,eAAO,OAAP;AACH,KAzCY;;;;;;;;AAiDb,UAAM,cAAS,UAAT,EAAqB;AACvB,YAAI,kBAAkB,aAAa,UAAb,CAAtB;YACI,6BAA6B,gBAAgB,UAAhB,CADjC;YAEI,0BAA0B,aAAa,0BAAb,CAF9B;YAGI,SAAS,IAHb;;AAKA,YAAI,CAAC,QAAQ,uBAAR,CAAL,EAAuC;AACnC,gBAAI;AACA,yBAAS,QAAQ,kBAAkB,kBAAlB,GAAuC,uBAA/C,CAAT;AACH,aAFD,CAEE,OAAO,GAAP,EAAY;AACV,sBAAM,yCAAyC,uBAAzC,GAAmE,0BAAzE;AACA,oBAAI,OAAJ,GAAc,2BAA2B,UAA3B,GAAwC,IAAxC,GAA+C,IAAI,OAAjE;AACA,oBAAI,eAAJ,GAAsB,gBAAtB;AACA,oBAAI,WAAJ,GAAkB;AACd,gCAAY;AADE,iBAAlB;AAGA,sBAAM,GAAN;AACH;;AAED,iBAAK,MAAL,CAAY,UAAZ,EAAwB,MAAxB;AACH;AACJ,KAtEY;;;;;;;;AA8Eb,aAAS,iBAAS,WAAT,EAAsB;AAC3B,oBAAY,OAAZ,CAAoB,KAAK,IAAzB,EAA+B,IAA/B;AACH,KAhFY;;;;;;AAsFb,eAAW,qBAAW;AAClB,kBAAU,OAAO,MAAP,CAAc,IAAd,CAAV;AACH;AAxFY,CAAjB","file":"plugins-compiled.js","sourcesContent":["/**\n * @fileoverview Plugins manager\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar debug = require(\"debug\"),\n    Environments = require(\"./environments\"),\n    rules = require(\"../rules\");\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\ndebug = debug(\"eslint:plugins\");\n\nvar plugins = Object.create(null);\n\nvar PLUGIN_NAME_PREFIX = \"eslint-plugin-\",\n    NAMESPACE_REGEX = /^@.*\\//i;\n\n/**\n * Removes the prefix `eslint-plugin-` from a plugin name.\n * @param {string} pluginName The name of the plugin which may have the prefix.\n * @returns {string} The name of the plugin without prefix.\n */\nfunction removePrefix(pluginName) {\n    return pluginName.indexOf(PLUGIN_NAME_PREFIX) === 0 ? pluginName.substring(PLUGIN_NAME_PREFIX.length) : pluginName;\n}\n\n/**\n * Gets the scope (namespace) of a plugin.\n * @param {string} pluginName The name of the plugin which may have the prefix.\n * @returns {string} The name of the plugins namepace if it has one.\n */\nfunction getNamespace(pluginName) {\n    return pluginName.match(NAMESPACE_REGEX) ? pluginName.match(NAMESPACE_REGEX)[0] : \"\";\n}\n\n/**\n * Removes the namespace from a plugin name.\n * @param {string} pluginName The name of the plugin which may have the prefix.\n * @returns {string} The name of the plugin without the namespace.\n */\nfunction removeNamespace(pluginName) {\n    return pluginName.replace(NAMESPACE_REGEX, \"\");\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n\n    removePrefix: removePrefix,\n    getNamespace: getNamespace,\n    removeNamespace: removeNamespace,\n\n    /**\n     * Defines a plugin with a given name rather than loading from disk.\n     * @param {string} pluginName The name of the plugin to load.\n     * @param {Object} plugin The plugin object.\n     * @returns {void}\n     */\n    define: function(pluginName, plugin) {\n        var pluginNameWithoutNamespace = removeNamespace(pluginName),\n            pluginNameWithoutPrefix = removePrefix(pluginNameWithoutNamespace);\n\n        plugins[pluginNameWithoutPrefix] = plugin;\n\n        // load up environments and rules\n        Environments.importPlugin(plugin, pluginNameWithoutPrefix);\n\n        if (plugin.rules) {\n            rules.import(plugin.rules, pluginNameWithoutPrefix);\n        }\n    },\n\n    /**\n     * Gets a plugin with the given name.\n     * @param {string} pluginName The name of the plugin to retrieve.\n     * @returns {Object} The plugin or null if not loaded.\n     */\n    get: function(pluginName) {\n        return plugins[pluginName] || null;\n    },\n\n    /**\n     * Returns all plugins that are loaded.\n     * @returns {Object} The plugins cache.\n     */\n    getAll: function() {\n        return plugins;\n    },\n\n    /**\n     * Loads a plugin with the given name.\n     * @param {string} pluginName The name of the plugin to load.\n     * @returns {void}\n     * @throws {Error} If the plugin cannot be loaded.\n     */\n    load: function(pluginName) {\n        var pluginNamespace = getNamespace(pluginName),\n            pluginNameWithoutNamespace = removeNamespace(pluginName),\n            pluginNameWithoutPrefix = removePrefix(pluginNameWithoutNamespace),\n            plugin = null;\n\n        if (!plugins[pluginNameWithoutPrefix]) {\n            try {\n                plugin = require(pluginNamespace + PLUGIN_NAME_PREFIX + pluginNameWithoutPrefix);\n            } catch (err) {\n                debug(\"Failed to load plugin eslint-plugin-\" + pluginNameWithoutPrefix + \". Proceeding without it.\");\n                err.message = \"Failed to load plugin \" + pluginName + \": \" + err.message;\n                err.messageTemplate = \"plugin-missing\";\n                err.messageData = {\n                    pluginName: pluginNameWithoutPrefix\n                };\n                throw err;\n            }\n\n            this.define(pluginName, plugin);\n        }\n    },\n\n    /**\n     * Loads all plugins from an array.\n     * @param {string[]} pluginNames An array of plugins names.\n     * @returns {void}\n     * @throws {Error} If a plugin cannot be loaded.\n     */\n    loadAll: function(pluginNames) {\n        pluginNames.forEach(this.load, this);\n    },\n\n    /**\n     * Resets plugin information. Use for tests only.\n     * @returns {void}\n     */\n    testReset: function() {\n        plugins = Object.create(null);\n    }\n};\n"]}