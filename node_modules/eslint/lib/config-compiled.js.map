{"version":3,"sources":["config.js"],"names":[],"mappings":"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","file":"config-compiled.js","sourcesContent":["/**\n * @fileoverview Responsible for loading config files\n * @author Seth McLaughlin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar path = require(\"path\"),\n    ConfigOps = require(\"./config/config-ops\"),\n    ConfigFile = require(\"./config/config-file\"),\n    Plugins = require(\"./config/plugins\"),\n    FileFinder = require(\"./file-finder\"),\n    debug = require(\"debug\"),\n    userHome = require(\"user-home\"),\n    isResolvable = require(\"is-resolvable\"),\n    pathIsInside = require(\"path-is-inside\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nvar PERSONAL_CONFIG_DIR = userHome || null;\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\ndebug = debug(\"eslint:config\");\n\n/**\n * Check if item is an javascript object\n * @param {*} item object to check for\n * @returns {boolean} True if its an object\n * @private\n */\nfunction isObject(item) {\n    return typeof item === \"object\" && !Array.isArray(item) && item !== null;\n}\n\n/**\n * Load and parse a JSON config object from a file.\n * @param {string|Object} configToLoad the path to the JSON config file or the config object itself.\n * @returns {Object} the parsed config object (empty object if there was a parse error)\n * @private\n */\nfunction loadConfig(configToLoad) {\n    var config = {},\n        filePath = \"\";\n\n    if (configToLoad) {\n\n        if (isObject(configToLoad)) {\n            config = configToLoad;\n\n            if (config.extends) {\n                config = ConfigFile.applyExtends(config, filePath);\n            }\n        } else {\n            filePath = configToLoad;\n            config = ConfigFile.load(filePath);\n        }\n\n    }\n\n    return config;\n}\n\n/**\n * Get personal config object from ~/.eslintrc.\n * @returns {Object} the personal config object (empty object if there is no personal config)\n * @private\n */\nfunction getPersonalConfig() {\n    var config,\n        filename;\n\n    if (PERSONAL_CONFIG_DIR) {\n        filename = ConfigFile.getFilenameForDirectory(PERSONAL_CONFIG_DIR);\n\n        if (filename) {\n            debug(\"Using personal config\");\n            config = loadConfig(filename);\n        }\n    }\n\n    return config || {};\n}\n\n/**\n * Get a local config object.\n * @param {Object} thisConfig A Config object.\n * @param {string} directory The directory to start looking in for a local config file.\n * @returns {Object} The local config object, or an empty object if there is no local config.\n */\nfunction getLocalConfig(thisConfig, directory) {\n    var found,\n        i,\n        localConfig,\n        localConfigFile,\n        config = {},\n        localConfigFiles = thisConfig.findLocalConfigFiles(directory),\n        numFiles = localConfigFiles.length,\n        rootPath,\n        projectConfigPath = ConfigFile.getFilenameForDirectory(thisConfig.options.cwd);\n\n    for (i = 0; i < numFiles; i++) {\n\n        localConfigFile = localConfigFiles[i];\n\n        // Don't consider the personal config file in the home directory,\n        // except if the home directory is the same as the current working directory\n        if (path.dirname(localConfigFile) === PERSONAL_CONFIG_DIR && localConfigFile !== projectConfigPath) {\n            continue;\n        }\n\n        // If root flag is set, don't consider file if it is above root\n        if (rootPath && !pathIsInside(path.dirname(localConfigFile), rootPath)) {\n            continue;\n        }\n\n        debug(\"Loading \" + localConfigFile);\n        localConfig = loadConfig(localConfigFile);\n\n        // Don't consider a local config file found if the config is null\n        if (!localConfig) {\n            continue;\n        }\n\n        // Check for root flag\n        if (localConfig.root === true) {\n            rootPath = path.dirname(localConfigFile);\n        }\n\n        found = true;\n        debug(\"Using \" + localConfigFile);\n        config = ConfigOps.merge(localConfig, config);\n    }\n\n    // Use the personal config file if there are no other local config files found.\n    return found || thisConfig.useSpecificConfig ? config : ConfigOps.merge(config, getPersonalConfig());\n}\n\n//------------------------------------------------------------------------------\n// API\n//------------------------------------------------------------------------------\n\n/**\n * Config\n * @constructor\n * @class Config\n * @param {Object} options Options to be passed in\n */\nfunction Config(options) {\n    var useConfig;\n\n    options = options || {};\n\n    this.ignore = options.ignore;\n    this.ignorePath = options.ignorePath;\n    this.cache = {};\n    this.parser = options.parser;\n    this.parserOptions = options.parserOptions || {};\n\n    this.baseConfig = options.baseConfig ? loadConfig(options.baseConfig) : { rules: {} };\n\n    this.useEslintrc = (options.useEslintrc !== false);\n\n    this.env = (options.envs || []).reduce(function(envs, name) {\n        envs[name] = true;\n        return envs;\n    }, {});\n\n    /*\n     * Handle declared globals.\n     * For global variable foo, handle \"foo:false\" and \"foo:true\" to set\n     * whether global is writable.\n     * If user declares \"foo\", convert to \"foo:false\".\n     */\n    this.globals = (options.globals || []).reduce(function(globals, def) {\n        var parts = def.split(\":\");\n\n        globals[parts[0]] = (parts.length > 1 && parts[1] === \"true\");\n\n        return globals;\n    }, {});\n\n    useConfig = options.configFile;\n    this.options = options;\n\n    if (useConfig) {\n        debug(\"Using command line config \" + useConfig);\n        if (isResolvable(useConfig) || isResolvable(\"eslint-config-\" + useConfig) || useConfig.charAt(0) === \"@\") {\n            this.useSpecificConfig = loadConfig(useConfig);\n        } else {\n            this.useSpecificConfig = loadConfig(path.resolve(this.options.cwd, useConfig));\n        }\n    }\n}\n\n/**\n * Build a config object merging the base config (conf/eslint.json), the\n * environments config (conf/environments.js) and eventually the user config.\n * @param {string} filePath a file in whose directory we start looking for a local config\n * @returns {Object} config object\n */\nConfig.prototype.getConfig = function(filePath) {\n    var config,\n        userConfig,\n        directory = filePath ? path.dirname(filePath) : this.options.cwd;\n\n    debug(\"Constructing config for \" + (filePath ? filePath : \"text\"));\n\n    config = this.cache[directory];\n\n    if (config) {\n        debug(\"Using config from cache\");\n        return config;\n    }\n\n    // Step 1: Determine user-specified config from .eslintrc.* and package.json files\n    if (this.useEslintrc) {\n        debug(\"Using .eslintrc and package.json files\");\n        userConfig = getLocalConfig(this, directory);\n    } else {\n        debug(\"Not using .eslintrc or package.json files\");\n        userConfig = {};\n    }\n\n    // Step 2: Create a copy of the baseConfig\n    config = ConfigOps.merge({}, this.baseConfig);\n\n    // Step 3: Merge in the user-specified configuration from .eslintrc and package.json\n    config = ConfigOps.merge(config, userConfig);\n\n    // Step 4: Merge in command line config file\n    if (this.useSpecificConfig) {\n        debug(\"Merging command line config file\");\n\n        config = ConfigOps.merge(config, this.useSpecificConfig);\n    }\n\n    // Step 5: Merge in command line environments\n    debug(\"Merging command line environment settings\");\n    config = ConfigOps.merge(config, { env: this.env });\n\n    // Step 6: Merge in command line rules\n    if (this.options.rules) {\n        debug(\"Merging command line rules\");\n        config = ConfigOps.merge(config, { rules: this.options.rules });\n    }\n\n    // Step 7: Merge in command line globals\n    config = ConfigOps.merge(config, { globals: this.globals });\n\n    // Only override parser if it is passed explicitly through the command line or if it's not\n    // defined yet (because the final object will at least have the parser key)\n    if (this.parser || !config.parser) {\n        config = ConfigOps.merge(config, {\n            parser: this.parser\n        });\n    }\n\n    if (this.parserOptions) {\n        config = ConfigOps.merge(config, {\n            parserOptions: this.parserOptions\n        });\n    }\n\n    // Step 8: Merge in command line plugins\n    if (this.options.plugins) {\n        debug(\"Merging command line plugins\");\n        Plugins.loadAll(this.options.plugins);\n        config = ConfigOps.merge(config, { plugins: this.options.plugins });\n    }\n\n    // Step 9: Apply environments to the config if present\n    if (config.env) {\n        config = ConfigOps.applyEnvironments(config);\n    }\n\n    this.cache[directory] = config;\n\n    return config;\n};\n\n/**\n * Find local config files from directory and parent directories.\n * @param {string} directory The directory to start searching from.\n * @returns {string[]} The paths of local config files found.\n */\nConfig.prototype.findLocalConfigFiles = function(directory) {\n\n    if (!this.localConfigFinder) {\n        this.localConfigFinder = new FileFinder(ConfigFile.CONFIG_FILES, this.options.cwd);\n    }\n\n    return this.localConfigFinder.findAllInDirectoryAndParents(directory);\n};\n\nmodule.exports = Config;\n"]}