{"version":3,"sources":["cli.js"],"names":[],"mappings":"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","file":"cli-compiled.js","sourcesContent":["/**\n * @fileoverview Main CLI object.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n/*\n * The CLI object should *not* call process.exit() directly. It should only return\n * exit codes. This allows other programs to use the CLI object and still control\n * when the program exits.\n */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar fs = require(\"fs\"),\n    path = require(\"path\"),\n\n    debug = require(\"debug\"),\n\n    options = require(\"./options\"),\n    CLIEngine = require(\"./cli-engine\"),\n    mkdirp = require(\"mkdirp\"),\n    log = require(\"./logging\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\ndebug = debug(\"eslint:cli\");\n\n/**\n * Translates the CLI options into the options expected by the CLIEngine.\n * @param {Object} cliOptions The CLI options to translate.\n * @returns {CLIEngineOptions} The options object for the CLIEngine.\n * @private\n */\nfunction translateOptions(cliOptions) {\n    return {\n        envs: cliOptions.env,\n        extensions: cliOptions.ext,\n        rules: cliOptions.rule,\n        plugins: cliOptions.plugin,\n        globals: cliOptions.global,\n        ignore: cliOptions.ignore,\n        ignorePath: cliOptions.ignorePath,\n        ignorePattern: cliOptions.ignorePattern,\n        configFile: cliOptions.config,\n        rulePaths: cliOptions.rulesdir,\n        useEslintrc: cliOptions.eslintrc,\n        parser: cliOptions.parser,\n        parserOptions: cliOptions.parserOptions,\n        cache: cliOptions.cache,\n        cacheFile: cliOptions.cacheFile,\n        cacheLocation: cliOptions.cacheLocation,\n        fix: cliOptions.fix,\n        allowInlineConfig: cliOptions.inlineConfig\n    };\n}\n\n/**\n * Outputs the results of the linting.\n * @param {CLIEngine} engine The CLIEngine to use.\n * @param {LintResult[]} results The results to print.\n * @param {string} format The name of the formatter to use or the path to the formatter.\n * @param {string} outputFile The path for the output file.\n * @returns {boolean} True if the printing succeeds, false if not.\n * @private\n */\nfunction printResults(engine, results, format, outputFile) {\n    var formatter,\n        output,\n        filePath;\n\n    try {\n        formatter = engine.getFormatter(format);\n    } catch (e) {\n        log.error(e.message);\n        return false;\n    }\n\n    output = formatter(results);\n\n    if (output) {\n        if (outputFile) {\n            filePath = path.resolve(process.cwd(), outputFile);\n\n            if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {\n                log.error(\"Cannot write to output file path, it is a directory: %s\", outputFile);\n                return false;\n            }\n\n            try {\n                mkdirp.sync(path.dirname(filePath));\n                fs.writeFileSync(filePath, output);\n            } catch (ex) {\n                log.error(\"There was a problem writing the output file:\\n%s\", ex);\n                return false;\n            }\n        } else {\n            log.info(output);\n        }\n    }\n\n    return true;\n\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Encapsulates all CLI behavior for eslint. Makes it easier to test as well as\n * for other Node.js programs to effectively run the CLI.\n */\nvar cli = {\n\n    /**\n     * Executes the CLI based on an array of arguments that is passed in.\n     * @param {string|Array|Object} args The arguments to process.\n     * @param {string} [text] The text to lint (used for TTY).\n     * @returns {int} The exit code for the operation.\n     */\n    execute: function(args, text) {\n\n        var currentOptions,\n            files,\n            report,\n            engine,\n            tooManyWarnings;\n\n        try {\n            currentOptions = options.parse(args);\n        } catch (error) {\n            log.error(error.message);\n            return 1;\n        }\n\n        files = currentOptions._;\n\n        if (currentOptions.version) { // version from package.json\n\n            log.info(\"v\" + require(\"../package.json\").version);\n\n        } else if (currentOptions.help || (!files.length && !text)) {\n\n            log.info(options.generateHelp());\n\n        } else {\n\n            debug(\"Running on \" + (text ? \"text\" : \"files\"));\n\n            // disable --fix for piped-in code until we know how to do it correctly\n            if (text && currentOptions.fix) {\n                log.error(\"The --fix option is not available for piped-in code.\");\n                return 1;\n            }\n\n            engine = new CLIEngine(translateOptions(currentOptions));\n            if (currentOptions.printConfig) {\n                if (files.length !== 1) {\n                    log.error(\"The --print-config option requires a \" +\n                        \"single file as positional argument.\");\n                    return 1;\n                }\n\n                if (text) {\n                    log.error(\"The --print-config option is not available for piped-in code.\");\n                    return 1;\n                }\n\n                var fileConfig = engine.getConfigForFile(files[0]);\n\n                log.info(JSON.stringify(fileConfig, null, \"  \"));\n                return 0;\n            }\n\n            report = text ? engine.executeOnText(text, currentOptions.stdinFilename) : engine.executeOnFiles(files);\n            if (currentOptions.fix) {\n                debug(\"Fix mode enabled - applying fixes\");\n                CLIEngine.outputFixes(report);\n            }\n\n            if (currentOptions.quiet) {\n                debug(\"Quiet mode enabled - filtering out warnings\");\n                report.results = CLIEngine.getErrorResults(report.results);\n            }\n\n            if (printResults(engine, report.results, currentOptions.format, currentOptions.outputFile)) {\n                tooManyWarnings = currentOptions.maxWarnings >= 0 && report.warningCount > currentOptions.maxWarnings;\n\n                if (!report.errorCount && tooManyWarnings) {\n                    log.error(\"ESLint found too many warnings (maximum: %s).\", currentOptions.maxWarnings);\n                }\n\n                return (report.errorCount || tooManyWarnings) ? 1 : 0;\n            } else {\n                return 1;\n            }\n\n        }\n\n        return 0;\n    }\n};\n\nmodule.exports = cli;\n"]}