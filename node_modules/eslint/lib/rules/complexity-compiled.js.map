{"version":3,"sources":["complexity.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,8DADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,mBAAO,CACH;AACI,sBAAM,SADV;AAEI,yBAAS;AAFb,aADG,EAKH;AACI,sBAAM,QADV;AAEI,4BAAY;AACR,6BAAS;AACL,8BAAM,SADD;AAEL,iCAAS;AAFJ,qBADD;AAKR,yBAAK;AACD,8BAAM,SADL;AAED,iCAAS;AAFR;AALG,iBAFhB;AAYI,sCAAsB;AAZ1B,aALG;AADX,SADI;AAPN,KADO;;AAkCb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,CAAb;YACI,YAAY,EADhB;;AAGA,YAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,cAAP,CAAsB,SAAtB,CAA9B,IAAkE,OAAO,OAAO,OAAd,KAA0B,QAAhG,EAA0G;AACtG,wBAAY,OAAO,OAAnB;AACH;AACD,YAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,cAAP,CAAsB,KAAtB,CAA9B,IAA8D,OAAO,OAAO,GAAd,KAAsB,QAAxF,EAAkG;AAC9F,wBAAY,OAAO,GAAnB;AACH;AACD,YAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,wBAAY,MAAZ;AACH;;;;;;;AAOD,YAAI,MAAM,EAAV;;;;;;;AAOA,iBAAS,aAAT,GAAyB;AACrB,gBAAI,IAAJ,CAAS,CAAT;AACH;;;;;;;;AAQD,iBAAS,WAAT,CAAqB,IAArB,EAA2B;AACvB,gBAAI,aAAa,IAAI,GAAJ,EAAjB;gBACI,OAAO,WADX;;AAGA,gBAAI,KAAK,EAAT,EAAa;AACT,uBAAO,KAAK,EAAL,CAAQ,IAAf;AACH,aAFD,MAEO,IAAI,KAAK,MAAL,CAAY,IAAZ,KAAqB,kBAArB,IAA2C,KAAK,MAAL,CAAY,IAAZ,KAAqB,UAApE,EAAgF;AACnF,uBAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAvB;AACH;;AAED,gBAAI,aAAa,SAAjB,EAA4B;AACxB,wBAAQ,MAAR,CAAe,IAAf,EAAqB,yDAArB,EAAgF,EAAE,MAAM,IAAR,EAAc,YAAY,UAA1B,EAAhF;AACH;AACJ;;;;;;;AAOD,iBAAS,kBAAT,GAA8B;AAC1B,gBAAI,IAAI,MAAR,EAAgB;AACZ,oBAAI,IAAI,MAAJ,GAAa,CAAjB;AACH;AACJ;;;;;;;;AAQD,iBAAS,wBAAT,CAAkC,IAAlC,EAAwC;;;AAGpC,gBAAI,KAAK,IAAT,EAAe;AACX,mCAAmB,IAAnB;AACH;AACJ;;;;;;;;AAQD,iBAAS,yBAAT,CAAmC,IAAnC,EAAyC;;;AAGrC,gBAAI,KAAK,QAAL,KAAkB,IAAtB,EAA4B;AACxB,mCAAmB,IAAnB;AACH;AACJ;;;;;;AAMD,eAAO;AACH,iCAAqB,aADlB;AAEH,gCAAoB,aAFjB;AAGH,qCAAyB,aAHtB;AAIH,wCAA4B,WAJzB;AAKH,uCAA2B,WALxB;AAMH,4CAAgC,WAN7B;;AAQH,yBAAa,kBARV;AASH,mCAAuB,kBATpB;AAUH,+BAAmB,yBAVhB;AAWH,0BAAc,kBAXX;AAYH,4BAAgB,kBAZb;AAaH,4BAAgB,kBAbb;AAcH,yBAAa,kBAdV;AAeH,wBAAY,wBAfT;AAgBH,4BAAgB,kBAhBb;AAiBH,8BAAkB;AAjBf,SAAP;AAoBH;AApJY,CAAjB","file":"complexity-compiled.js","sourcesContent":["/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, whilte, try, switch/case,\n * @author Patrick Brosset\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce a maximum cyclomatic complexity allowed in a program\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ]\n    },\n\n    create: function(context) {\n        var option = context.options[0],\n            THRESHOLD = 20;\n\n        if (typeof option === \"object\" && option.hasOwnProperty(\"maximum\") && typeof option.maximum === \"number\") {\n            THRESHOLD = option.maximum;\n        }\n        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {\n            THRESHOLD = option.max;\n        }\n        if (typeof option === \"number\") {\n            THRESHOLD = option;\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // Using a stack to store complexity (handling nested functions)\n        var fns = [];\n\n        /**\n         * When parsing a new function, store it in our function stack\n         * @returns {void}\n         * @private\n         */\n        function startFunction() {\n            fns.push(1);\n        }\n\n        /**\n         * Evaluate the node at the end of function\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function endFunction(node) {\n            var complexity = fns.pop(),\n                name = \"anonymous\";\n\n            if (node.id) {\n                name = node.id.name;\n            } else if (node.parent.type === \"MethodDefinition\" || node.parent.type === \"Property\") {\n                name = node.parent.key.name;\n            }\n\n            if (complexity > THRESHOLD) {\n                context.report(node, \"Function '{{name}}' has a complexity of {{complexity}}.\", { name: name, complexity: complexity });\n            }\n        }\n\n        /**\n         * Increase the complexity of the function in context\n         * @returns {void}\n         * @private\n         */\n        function increaseComplexity() {\n            if (fns.length) {\n                fns[fns.length - 1]++;\n            }\n        }\n\n        /**\n         * Increase the switch complexity in context\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function increaseSwitchComplexity(node) {\n\n            // Avoiding `default`\n            if (node.test) {\n                increaseComplexity(node);\n            }\n        }\n\n        /**\n         * Increase the logical path complexity in context\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function increaseLogicalComplexity(node) {\n\n            // Avoiding &&\n            if (node.operator === \"||\") {\n                increaseComplexity(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: startFunction,\n            FunctionExpression: startFunction,\n            ArrowFunctionExpression: startFunction,\n            \"FunctionDeclaration:exit\": endFunction,\n            \"FunctionExpression:exit\": endFunction,\n            \"ArrowFunctionExpression:exit\": endFunction,\n\n            CatchClause: increaseComplexity,\n            ConditionalExpression: increaseComplexity,\n            LogicalExpression: increaseLogicalComplexity,\n            ForStatement: increaseComplexity,\n            ForInStatement: increaseComplexity,\n            ForOfStatement: increaseComplexity,\n            IfStatement: increaseComplexity,\n            SwitchCase: increaseSwitchComplexity,\n            WhileStatement: increaseComplexity,\n            DoWhileStatement: increaseComplexity\n        };\n\n    }\n};\n"]}