{"version":3,"sources":["generator-star-spacing.js"],"names":[],"mappings":"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","file":"generator-star-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to check the spacing around the * in generator functions.\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent spacing around `*` operators in generator functions\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"before\", \"after\", \"both\", \"neither\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            before: {type: \"boolean\"},\n                            after: {type: \"boolean\"}\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var mode = (function(option) {\n            if (!option || typeof option === \"string\") {\n                return {\n                    before: { before: true, after: false },\n                    after: { before: false, after: true },\n                    both: { before: true, after: true },\n                    neither: { before: false, after: false }\n                }[option || \"before\"];\n            }\n            return option;\n        }(context.options[0]));\n\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Gets `*` token from a given node.\n         *\n         * @param {ASTNode} node - A node to get `*` token. This is one of\n         *      FunctionDeclaration, FunctionExpression, Property, and\n         *      MethodDefinition.\n         * @returns {Token} `*` token.\n         */\n        function getStarToken(node) {\n            var token = sourceCode.getFirstToken(node);\n\n            while (token.value !== \"*\") {\n                token = sourceCode.getTokenAfter(token);\n            }\n\n            return token;\n        }\n\n        /**\n         * Checks the spacing between two tokens before or after the star token.\n         * @param {string} side Either \"before\" or \"after\".\n         * @param {Token} leftToken `function` keyword token if side is \"before\", or\n         *     star token if side is \"after\".\n         * @param {Token} rightToken Star token if side is \"before\", or identifier\n         *     token if side is \"after\".\n         * @returns {void}\n         */\n        function checkSpacing(side, leftToken, rightToken) {\n            if (!!(rightToken.range[0] - leftToken.range[1]) !== mode[side]) {\n                var after = leftToken.value === \"*\";\n                var spaceRequired = mode[side];\n                var node = after ? leftToken : rightToken;\n                var type = spaceRequired ? \"Missing\" : \"Unexpected\";\n                var message = type + \" space \" + side + \" *.\";\n\n                context.report({\n                    node: node,\n                    message: message,\n                    fix: function(fixer) {\n                        if (spaceRequired) {\n                            if (after) {\n                                return fixer.insertTextAfter(node, \" \");\n                            }\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Enforces the spacing around the star if node is a generator function.\n         * @param {ASTNode} node A function expression or declaration node.\n         * @returns {void}\n         */\n        function checkFunction(node) {\n            var prevToken, starToken, nextToken;\n\n            if (!node.generator) {\n                return;\n            }\n\n            if (node.parent.method || node.parent.type === \"MethodDefinition\") {\n                starToken = getStarToken(node.parent);\n            } else {\n                starToken = getStarToken(node);\n            }\n\n            // Only check before when preceded by `function`|`static` keyword\n            prevToken = sourceCode.getTokenBefore(starToken);\n            if (prevToken.value === \"function\" || prevToken.value === \"static\") {\n                checkSpacing(\"before\", prevToken, starToken);\n            }\n\n            nextToken = sourceCode.getTokenAfter(starToken);\n            checkSpacing(\"after\", starToken, nextToken);\n        }\n\n        return {\n            FunctionDeclaration: checkFunction,\n            FunctionExpression: checkFunction\n        };\n\n    }\n};\n"]}