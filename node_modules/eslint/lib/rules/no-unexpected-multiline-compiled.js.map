{"version":3,"sources":["no-unexpected-multiline.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAKA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,0CADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,gBAAS,OAAT,EAAkB;;AAEtB,YAAI,mBAAmB,6DAAvB;AACA,YAAI,mBAAmB,6DAAvB;AACA,YAAI,0BAA0B,+DAA9B;;AAEA,YAAI,aAAa,QAAQ,aAAR,EAAjB;;;;;;;;;;AAUA,iBAAS,kBAAT,CAA4B,IAA5B,EAAkC,GAAlC,EAAuC;AACnC,gBAAI,oBAAoB,IAAxB;AACA,gBAAI,YAAY,WAAW,aAAX,CAAyB,IAAzB,CAAhB;;;AAGA,mBAAO,UAAU,KAAV,KAAoB,GAA3B,EAAgC;AAC5B,oCAAoB,SAApB;AACA,4BAAY,WAAW,aAAX,CAAyB,iBAAzB,CAAZ;AACH;;AAED,gBAAI,UAAU,GAAV,CAAc,KAAd,CAAoB,IAApB,KAA6B,kBAAkB,GAAlB,CAAsB,GAAtB,CAA0B,IAA3D,EAAiE;AAC7D,wBAAQ,MAAR,CAAe,IAAf,EAAqB,UAAU,GAAV,CAAc,KAAnC,EAA0C,GAA1C,EAA+C,EAAE,MAAM,UAAU,KAAlB,EAA/C;AACH;AACJ;;;;;;AAMD,eAAO;;AAEH,8BAAkB,0BAAS,IAAT,EAAe;AAC7B,oBAAI,CAAC,KAAK,QAAV,EAAoB;AAChB;AACH;AACD,mCAAmB,KAAK,MAAxB,EAAgC,gBAAhC;AACH,aAPE;;AASH,sCAA0B,kCAAS,IAAT,EAAe;AACrC,oBAAI,KAAK,GAAL,CAAS,GAAT,CAAa,GAAb,CAAiB,IAAjB,KAA0B,KAAK,KAAL,CAAW,GAAX,CAAe,KAAf,CAAqB,IAAnD,EAAyD;AACrD;AACH;AACD,wBAAQ,MAAR,CAAe,IAAf,EAAqB,KAAK,GAAL,CAAS,KAA9B,EAAqC,uBAArC;AACH,aAdE;;AAgBH,4BAAgB,wBAAS,IAAT,EAAe;AAC3B,oBAAI,KAAK,SAAL,CAAe,MAAf,KAA0B,CAA9B,EAAiC;AAC7B;AACH;AACD,mCAAmB,KAAK,MAAxB,EAAgC,gBAAhC;AACH;AArBE,SAAP;AAwBH;AAtEY,CAAjB","file":"no-unexpected-multiline-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not.\n * @author Glen Mailer\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow confusing multiline expressions\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        var FUNCTION_MESSAGE = \"Unexpected newline between function and ( of function call.\";\n        var PROPERTY_MESSAGE = \"Unexpected newline between object and [ of property access.\";\n        var TAGGED_TEMPLATE_MESSAGE = \"Unexpected newline between template tag and template literal.\";\n\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Check to see if there is a newline between the node and the following open bracket\n         * line's expression\n         * @param {ASTNode} node The node to check.\n         * @param {string} msg The error message to use.\n         * @returns {void}\n         * @private\n         */\n        function checkForBreakAfter(node, msg) {\n            var nodeExpressionEnd = node;\n            var openParen = sourceCode.getTokenAfter(node);\n\n            // Move along until the end of the wrapped expression\n            while (openParen.value === \")\") {\n                nodeExpressionEnd = openParen;\n                openParen = sourceCode.getTokenAfter(nodeExpressionEnd);\n            }\n\n            if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {\n                context.report(node, openParen.loc.start, msg, { char: openParen.value });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            MemberExpression: function(node) {\n                if (!node.computed) {\n                    return;\n                }\n                checkForBreakAfter(node.object, PROPERTY_MESSAGE);\n            },\n\n            TaggedTemplateExpression: function(node) {\n                if (node.tag.loc.end.line === node.quasi.loc.start.line) {\n                    return;\n                }\n                context.report(node, node.loc.start, TAGGED_TEMPLATE_MESSAGE);\n            },\n\n            CallExpression: function(node) {\n                if (node.arguments.length === 0) {\n                    return;\n                }\n                checkForBreakAfter(node.callee, FUNCTION_MESSAGE);\n            }\n        };\n\n    }\n};\n"]}