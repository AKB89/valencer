{"version":3,"sources":["no-restricted-globals.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,qCADX;AAEF,sBAAU,WAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AACJ,kBAAM,OADF;AAEJ,mBAAO;AACH,sBAAM;AADH,aAFH;AAKJ,yBAAa;AALT;AAPN,KADO;;AAiBb,YAAQ,gBAAS,OAAT,EAAkB;AACtB,YAAI,oBAAoB,QAAQ,OAAhC;;;AAGA,YAAI,kBAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AAChC,mBAAO,EAAP;AACH;;;;;;;;AAQD,iBAAS,eAAT,CAAyB,SAAzB,EAAoC;AAChC,oBAAQ,MAAR,CAAe,UAAU,UAAzB,EAAqC,8BAArC,EAAqE;AACjE,sBAAM,UAAU,UAAV,CAAqB;AADsC,aAArE;AAGH;;;;;;;;AAQD,iBAAS,YAAT,CAAsB,IAAtB,EAA4B;AACxB,mBAAO,kBAAkB,OAAlB,CAA0B,IAA1B,KAAmC,CAA1C;AACH;;AAED,eAAO;AACH,qBAAS,mBAAW;AAChB,oBAAI,QAAQ,QAAQ,QAAR,EAAZ;;;AAGA,sBAAM,SAAN,CAAgB,OAAhB,CAAwB,UAAS,QAAT,EAAmB;AACvC,wBAAI,CAAC,SAAS,IAAT,CAAc,MAAf,IAAyB,aAAa,SAAS,IAAtB,CAA7B,EAA0D;AACtD,iCAAS,UAAT,CAAoB,OAApB,CAA4B,eAA5B;AACH;AACJ,iBAJD;;;AAOA,sBAAM,OAAN,CAAc,OAAd,CAAsB,UAAS,SAAT,EAAoB;AACtC,wBAAI,aAAa,UAAU,UAAV,CAAqB,IAAlC,CAAJ,EAA6C;AACzC,wCAAgB,SAAhB;AACH;AACJ,iBAJD;AAMH;AAlBE,SAAP;AAoBH;AAnEY,CAAjB","file":"no-restricted-globals-compiled.js","sourcesContent":["/**\n * @fileoverview Restrict usage of specified globals.\n * @author BenoÃ®t Zugmeyer\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow specified global variables\",\n            category: \"Variables\",\n            recommended: false\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                type: \"string\"\n            },\n            uniqueItems: true\n        }\n    },\n\n    create: function(context) {\n        var restrictedGlobals = context.options;\n\n        // if no globals are restricted we don't need to check\n        if (restrictedGlobals.length === 0) {\n            return {};\n        }\n\n        /**\n         * Report a variable to be used as a restricted global.\n         * @param {Reference} reference the variable reference\n         * @returns {void}\n         * @private\n         */\n        function reportReference(reference) {\n            context.report(reference.identifier, \"Unexpected use of '{{name}}'\", {\n                name: reference.identifier.name\n            });\n        }\n\n        /**\n         * Check if the given name is a restricted global name.\n         * @param {string} name name of a variable\n         * @returns {boolean} whether the variable is a restricted global or not\n         * @private\n         */\n        function isRestricted(name) {\n            return restrictedGlobals.indexOf(name) >= 0;\n        }\n\n        return {\n            Program: function() {\n                var scope = context.getScope();\n\n                // Report variables declared elsewhere (ex: variables defined as \"global\" by eslint)\n                scope.variables.forEach(function(variable) {\n                    if (!variable.defs.length && isRestricted(variable.name)) {\n                        variable.references.forEach(reportReference);\n                    }\n                });\n\n                // Report variables not declared at all\n                scope.through.forEach(function(reference) {\n                    if (isRestricted(reference.identifier.name)) {\n                        reportReference(reference);\n                    }\n                });\n\n            }\n        };\n    }\n};\n\n"]}