{"version":3,"sources":["no-inline-comments.js"],"names":[],"mappings":";;;;AAIA;;AAEA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,qCADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,aAAa,QAAQ,aAAR,EAAjB;;;;;;;;AAQA,iBAAS,qBAAT,CAA+B,IAA/B,EAAqC;;;AAGjC,gBAAI,YAAY,OAAO,WAAW,KAAX,CAAiB,KAAK,GAAL,CAAS,KAAT,CAAe,IAAf,GAAsB,CAAvC,CAAP,CAAhB;AACA,gBAAI,UAAU,OAAO,WAAW,KAAX,CAAiB,KAAK,GAAL,CAAS,GAAT,CAAa,IAAb,GAAoB,CAArC,CAAP,CAAd;;AAEA,gBAAI,WAAW,UAAU,KAAV,CAAgB,CAAhB,EAAmB,KAAK,GAAL,CAAS,KAAT,CAAe,MAAlC,EAA0C,IAA1C,EAAf;;;AAGA,gBAAI,YAAY,QAAQ,KAAR,CAAc,KAAK,GAAL,CAAS,GAAT,CAAa,MAA3B,EAAmC,IAAnC,EAAhB;;;AAGA,gBAAI,cAAc,SAAS,kBAAT,CAA4B,IAA5B,CAAlB;;;AAGA,gBAAI,CAAC,WAAD,KAAiB,YAAY,SAA7B,CAAJ,EAA6C;AACzC,wBAAQ,MAAR,CAAe,IAAf,EAAqB,sCAArB;AACH;AACJ;;;;;;AAMD,eAAO;;AAEH,yBAAa,qBAFV;AAGH,0BAAc;;AAHX,SAAP;AAMH;AAlDY,CAAjB","file":"no-inline-comments-compiled.js","sourcesContent":["/**\n * @fileoverview Enforces or disallows inline comments.\n * @author Greg Cochard\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow inline comments after code\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Will check that comments are not on lines starting with or ending with code\n         * @param {ASTNode} node The comment node to check\n         * @private\n         * @returns {void}\n         */\n        function testCodeAroundComment(node) {\n\n            // Get the whole line and cut it off at the start of the comment\n            var startLine = String(sourceCode.lines[node.loc.start.line - 1]);\n            var endLine = String(sourceCode.lines[node.loc.end.line - 1]);\n\n            var preamble = startLine.slice(0, node.loc.start.column).trim();\n\n            // Also check after the comment\n            var postamble = endLine.slice(node.loc.end.column).trim();\n\n            // Check that this comment isn't an ESLint directive\n            var isDirective = astUtils.isDirectiveComment(node);\n\n            // Should be empty if there was only whitespace around the comment\n            if (!isDirective && (preamble || postamble)) {\n                context.report(node, \"Unexpected comment inline with code.\");\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            LineComment: testCodeAroundComment,\n            BlockComment: testCodeAroundComment\n\n        };\n    }\n};\n"]}