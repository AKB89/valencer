{"version":3,"sources":["space-infix-ops.js"],"names":[],"mappings":"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","file":"space-infix-ops-compiled.js","sourcesContent":["/**\n * @fileoverview Require spaces around infix operators\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require spacing around operators\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    int32Hint: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var int32Hint = context.options[0] ? context.options[0].int32Hint === true : false;\n\n        var OPERATORS = [\n            \"*\", \"/\", \"%\", \"+\", \"-\", \"<<\", \">>\", \">>>\", \"<\", \"<=\", \">\", \">=\", \"in\",\n            \"instanceof\", \"==\", \"!=\", \"===\", \"!==\", \"&\", \"^\", \"|\", \"&&\", \"||\", \"=\",\n            \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"&=\", \"^=\", \"|=\",\n            \"?\", \":\", \",\", \"**\"\n        ];\n\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Returns the first token which violates the rule\n         * @param {ASTNode} left - The left node of the main node\n         * @param {ASTNode} right - The right node of the main node\n         * @returns {object} The violator token or null\n         * @private\n         */\n        function getFirstNonSpacedToken(left, right) {\n            var op,\n                tokens = sourceCode.getTokensBetween(left, right, 1);\n\n            for (var i = 1, l = tokens.length - 1; i < l; ++i) {\n                op = tokens[i];\n                if (\n                    op.type === \"Punctuator\" &&\n                    OPERATORS.indexOf(op.value) >= 0 &&\n                    (tokens[i - 1].range[1] >= op.range[0] || op.range[1] >= tokens[i + 1].range[0])\n                ) {\n                    return op;\n                }\n            }\n            return null;\n        }\n\n        /**\n         * Reports an AST node as a rule violation\n         * @param {ASTNode} mainNode - The node to report\n         * @param {object} culpritToken - The token which has a problem\n         * @returns {void}\n         * @private\n         */\n        function report(mainNode, culpritToken) {\n            context.report({\n                node: mainNode,\n                loc: culpritToken.loc.start,\n                message: \"Infix operators must be spaced.\",\n                fix: function(fixer) {\n                    var previousToken = sourceCode.getTokenBefore(culpritToken);\n                    var afterToken = sourceCode.getTokenAfter(culpritToken);\n                    var fixString = \"\";\n\n                    if (culpritToken.range[0] - previousToken.range[1] === 0) {\n                        fixString = \" \";\n                    }\n\n                    fixString += culpritToken.value;\n\n                    if (afterToken.range[0] - culpritToken.range[1] === 0) {\n                        fixString += \" \";\n                    }\n\n                    return fixer.replaceText(culpritToken, fixString);\n                }\n            });\n        }\n\n        /**\n         * Check if the node is binary then report\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkBinary(node) {\n            var nonSpacedNode = getFirstNonSpacedToken(node.left, node.right);\n\n            if (nonSpacedNode) {\n                if (!(int32Hint && sourceCode.getText(node).substr(-2) === \"|0\")) {\n                    report(node, nonSpacedNode);\n                }\n            }\n        }\n\n        /**\n         * Check if the node is conditional\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkConditional(node) {\n            var nonSpacedConsequesntNode = getFirstNonSpacedToken(node.test, node.consequent);\n            var nonSpacedAlternateNode = getFirstNonSpacedToken(node.consequent, node.alternate);\n\n            if (nonSpacedConsequesntNode) {\n                report(node, nonSpacedConsequesntNode);\n            } else if (nonSpacedAlternateNode) {\n                report(node, nonSpacedAlternateNode);\n            }\n        }\n\n        /**\n         * Check if the node is a variable\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkVar(node) {\n            var nonSpacedNode;\n\n            if (node.init) {\n                nonSpacedNode = getFirstNonSpacedToken(node.id, node.init);\n                if (nonSpacedNode) {\n                    report(node, nonSpacedNode);\n                }\n            }\n        }\n\n        return {\n            AssignmentExpression: checkBinary,\n            AssignmentPattern: checkBinary,\n            BinaryExpression: checkBinary,\n            LogicalExpression: checkBinary,\n            ConditionalExpression: checkConditional,\n            VariableDeclarator: checkVar\n        };\n\n    }\n};\n"]}