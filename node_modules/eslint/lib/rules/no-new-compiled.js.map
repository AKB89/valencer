{"version":3,"sources":["no-new.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,gEADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,iCAAqB,UAAS,IAAT,EAAe;;AAEhC,oBAAI,KAAK,UAAL,CAAgB,IAAhB,KAAyB,eAA7B,EAA8C;AAC1C,4BAAQ,MAAR,CAAe,IAAf,EAAqB,oCAArB;AACH;AACJ;AAPE,SAAP;AAUH;AAvBY,CAAjB","file":"no-new-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag statements with function invocation preceded by\n * \"new\" and not part of assignment\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `new` operators outside of assignments or comparisons\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            ExpressionStatement: function(node) {\n\n                if (node.expression.type === \"NewExpression\") {\n                    context.report(node, \"Do not use 'new' for side effects.\");\n                }\n            }\n        };\n\n    }\n};\n"]}