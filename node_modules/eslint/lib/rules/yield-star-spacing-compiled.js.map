{"version":3,"sources":["yield-star-spacing.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,oEADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,iBAAS,YAPP;;AASF,gBAAQ,CACJ;AACI,mBAAO,CACH;AACI,sBAAM,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,EAA4B,SAA5B;AADV,aADG,EAIH;AACI,sBAAM,QADV;AAEI,4BAAY;AACR,4BAAQ,EAAC,MAAM,SAAP,EADA;AAER,2BAAO,EAAC,MAAM,SAAP;AAFC,iBAFhB;AAMI,sCAAsB;AAN1B,aAJG;AADX,SADI;AATN,KADO;;AA6Bb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,aAAa,QAAQ,aAAR,EAAjB;;AAEA,YAAI,OAAQ,UAAS,MAAT,EAAiB;AACzB,gBAAI,CAAC,MAAD,IAAW,OAAO,MAAP,KAAkB,QAAjC,EAA2C;AACvC,uBAAO;AACH,4BAAQ,EAAE,QAAQ,IAAV,EAAgB,OAAO,KAAvB,EADL;AAEH,2BAAO,EAAE,QAAQ,KAAV,EAAiB,OAAO,IAAxB,EAFJ;AAGH,0BAAM,EAAE,QAAQ,IAAV,EAAgB,OAAO,IAAvB,EAHH;AAIH,6BAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,KAAxB;AAJN,kBAKL,UAAU,OALL,CAAP;AAMH;AACD,mBAAO,MAAP;AACH,SAVW,CAUV,QAAQ,OAAR,CAAgB,CAAhB,CAVU,CAAZ;;;;;;;;;;;AAqBA,iBAAS,YAAT,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC,UAAvC,EAAmD;AAC/C,gBAAI,WAAW,oBAAX,CAAgC,SAAhC,EAA2C,UAA3C,MAA2D,KAAK,IAAL,CAA/D,EAA2E;AACvE,oBAAI,QAAQ,UAAU,KAAV,KAAoB,GAAhC;AACA,oBAAI,gBAAgB,KAAK,IAAL,CAApB;AACA,oBAAI,OAAO,QAAQ,SAAR,GAAoB,UAA/B;AACA,oBAAI,OAAO,gBAAgB,SAAhB,GAA4B,YAAvC;AACA,oBAAI,UAAU,OAAO,SAAP,GAAmB,IAAnB,GAA0B,KAAxC;;AAEA,wBAAQ,MAAR,CAAe;AACX,0BAAM,IADK;AAEX,6BAAS,OAFE;AAGX,yBAAK,UAAS,KAAT,EAAgB;AACjB,4BAAI,aAAJ,EAAmB;AACf,gCAAI,KAAJ,EAAW;AACP,uCAAO,MAAM,eAAN,CAAsB,IAAtB,EAA4B,GAA5B,CAAP;AACH;AACD,mCAAO,MAAM,gBAAN,CAAuB,IAAvB,EAA6B,GAA7B,CAAP;AACH;AACD,+BAAO,MAAM,WAAN,CAAkB,CAAC,UAAU,KAAV,CAAgB,CAAhB,CAAD,EAAqB,WAAW,KAAX,CAAiB,CAAjB,CAArB,CAAlB,CAAP;AACH;AAXU,iBAAf;AAaH;AACJ;;;;;;;AAOD,iBAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC3B,gBAAI,CAAC,KAAK,QAAV,EAAoB;AAChB;AACH;;AAED,gBAAI,SAAS,WAAW,cAAX,CAA0B,IAA1B,EAAgC,CAAhC,CAAb;AACA,gBAAI,aAAa,OAAO,CAAP,CAAjB;AACA,gBAAI,YAAY,OAAO,CAAP,CAAhB;AACA,gBAAI,YAAY,OAAO,CAAP,CAAhB;;AAEA,yBAAa,QAAb,EAAuB,UAAvB,EAAmC,SAAnC;AACA,yBAAa,OAAb,EAAsB,SAAtB,EAAiC,SAAjC;AACH;;AAED,eAAO;AACH,6BAAiB;AADd,SAAP;AAIH;AApGY,CAAjB","file":"yield-star-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to check the spacing around the * in yield* expressions.\n * @author Bryan Smith\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require or disallow spacing around the `*` in `yield*` expressions\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"before\", \"after\", \"both\", \"neither\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            before: {type: \"boolean\"},\n                            after: {type: \"boolean\"}\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ]\n    },\n\n    create: function(context) {\n        var sourceCode = context.getSourceCode();\n\n        var mode = (function(option) {\n            if (!option || typeof option === \"string\") {\n                return {\n                    before: { before: true, after: false },\n                    after: { before: false, after: true },\n                    both: { before: true, after: true },\n                    neither: { before: false, after: false }\n                }[option || \"after\"];\n            }\n            return option;\n        }(context.options[0]));\n\n        /**\n         * Checks the spacing between two tokens before or after the star token.\n         * @param {string} side Either \"before\" or \"after\".\n         * @param {Token} leftToken `function` keyword token if side is \"before\", or\n         *     star token if side is \"after\".\n         * @param {Token} rightToken Star token if side is \"before\", or identifier\n         *     token if side is \"after\".\n         * @returns {void}\n         */\n        function checkSpacing(side, leftToken, rightToken) {\n            if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken) !== mode[side]) {\n                var after = leftToken.value === \"*\";\n                var spaceRequired = mode[side];\n                var node = after ? leftToken : rightToken;\n                var type = spaceRequired ? \"Missing\" : \"Unexpected\";\n                var message = type + \" space \" + side + \" *.\";\n\n                context.report({\n                    node: node,\n                    message: message,\n                    fix: function(fixer) {\n                        if (spaceRequired) {\n                            if (after) {\n                                return fixer.insertTextAfter(node, \" \");\n                            }\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Enforces the spacing around the star if node is a yield* expression.\n         * @param {ASTNode} node A yield expression node.\n         * @returns {void}\n         */\n        function checkExpression(node) {\n            if (!node.delegate) {\n                return;\n            }\n\n            var tokens = sourceCode.getFirstTokens(node, 3);\n            var yieldToken = tokens[0];\n            var starToken = tokens[1];\n            var nextToken = tokens[2];\n\n            checkSpacing(\"before\", yieldToken, starToken);\n            checkSpacing(\"after\", starToken, nextToken);\n        }\n\n        return {\n            YieldExpression: checkExpression\n        };\n\n    }\n};\n"]}