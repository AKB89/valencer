{"version":3,"sources":["func-names.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,sCADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;AAOtB,iBAAS,qBAAT,GAAiC;AAC7B,gBAAI,SAAS,QAAQ,YAAR,GAAuB,GAAvB,EAAb;;AAEA,mBAAQ,OAAO,IAAP,KAAgB,kBAAhB,IACJ,OAAO,IAAP,KAAgB,UAAhB,KACI,OAAO,MAAP,IACA,OAAO,IAAP,KAAgB,KADhB,IAEA,OAAO,IAAP,KAAgB,KAHpB,CADJ;AAOH;;AAED,eAAO;AACH,gCAAoB,UAAS,IAAT,EAAe;;AAE/B,oBAAI,OAAO,KAAK,EAAL,IAAW,KAAK,EAAL,CAAQ,IAA9B;;AAEA,oBAAI,CAAC,IAAD,IAAS,CAAC,uBAAd,EAAuC;AACnC,4BAAQ,MAAR,CAAe,IAAf,EAAqB,mCAArB;AACH;AACJ;AARE,SAAP;AAUH;AAxCY,CAAjB","file":"func-names-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to warn when a function expression does not have a name.\n * @author Kyle T. Nunery\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce named `function` expressions\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        /**\n         * Determines whether the current FunctionExpression node is a get, set, or\n         * shorthand method in an object literal or a class.\n         * @returns {boolean} True if the node is a get, set, or shorthand method.\n         */\n        function isObjectOrClassMethod() {\n            var parent = context.getAncestors().pop();\n\n            return (parent.type === \"MethodDefinition\" || (\n                parent.type === \"Property\" && (\n                    parent.method ||\n                    parent.kind === \"get\" ||\n                    parent.kind === \"set\"\n                )\n            ));\n        }\n\n        return {\n            FunctionExpression: function(node) {\n\n                var name = node.id && node.id.name;\n\n                if (!name && !isObjectOrClassMethod()) {\n                    context.report(node, \"Missing function expression name.\");\n                }\n            }\n        };\n    }\n};\n"]}