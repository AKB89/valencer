{"version":3,"sources":["computed-property-spacing.js"],"names":[],"mappings":"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","file":"computed-property-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside computed properties.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent spacing inside computed property brackets\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            }\n        ]\n    },\n\n    create: function(context) {\n        var sourceCode = context.getSourceCode();\n        var propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n        * Reports that there shouldn't be a space after the first token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @param {Token} tokenAfter - The token after `token`.\n        * @returns {void}\n        */\n        function reportNoBeginningSpace(node, token, tokenAfter) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"There should be no space after '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n                }\n            });\n        }\n\n        /**\n        * Reports that there shouldn't be a space before the last token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @param {Token} tokenBefore - The token before `token`.\n        * @returns {void}\n        */\n        function reportNoEndingSpace(node, token, tokenBefore) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"There should be no space before '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n        * Reports that there should be a space after the first token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"A space is required after '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n        * Reports that there should be a space before the last token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"A space is required before '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Returns a function that checks the spacing of a node on the property name\n         * that was passed in.\n         * @param {String} propertyName The property on the node to check for spacing\n         * @returns {Function} A function that will check spacing on a node\n         */\n        function checkSpacing(propertyName) {\n            return function(node) {\n                if (!node.computed) {\n                    return;\n                }\n\n                var property = node[propertyName];\n\n                var before = sourceCode.getTokenBefore(property),\n                    first = sourceCode.getFirstToken(property),\n                    last = sourceCode.getLastToken(property),\n                    after = sourceCode.getTokenAfter(property);\n\n                if (astUtils.isTokenOnSameLine(before, first)) {\n                    if (propertyNameMustBeSpaced) {\n                        if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {\n                            reportRequiredBeginningSpace(node, before);\n                        }\n                    } else {\n                        if (sourceCode.isSpaceBetweenTokens(before, first)) {\n                            reportNoBeginningSpace(node, before, first);\n                        }\n                    }\n                }\n\n                if (astUtils.isTokenOnSameLine(last, after)) {\n                    if (propertyNameMustBeSpaced) {\n                        if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {\n                            reportRequiredEndingSpace(node, after);\n                        }\n                    } else {\n                        if (sourceCode.isSpaceBetweenTokens(last, after)) {\n                            reportNoEndingSpace(node, after, last);\n                        }\n                    }\n                }\n            };\n        }\n\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Property: checkSpacing(\"key\"),\n            MemberExpression: checkSpacing(\"property\")\n        };\n\n    }\n};\n"]}