{"version":3,"sources":["linebreak-style.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,oCADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,iBAAS,YAPP;;AASF,gBAAQ,CACJ;AACI,kBAAM,CAAC,MAAD,EAAS,SAAT;AADV,SADI;AATN,KADO;;AAiBb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,YAAI,kBAAkB,kDAAtB;YACI,oBAAoB,kDADxB;;AAGA,YAAI,aAAa,QAAQ,aAAR,EAAjB;;;;;;;;;;;;;AAaA,iBAAS,SAAT,CAAmB,KAAnB,EAA0B,IAA1B,EAAgC;AAC5B,mBAAO,UAAS,KAAT,EAAgB;AACnB,uBAAO,MAAM,gBAAN,CAAuB,KAAvB,EAA8B,IAA9B,CAAP;AACH,aAFD;AAGH;;;;;;AAMD,eAAO;AACH,qBAAS,SAAS,sBAAT,CAAgC,IAAhC,EAAsC;AAC3C,oBAAI,iBAAiB,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,MAA3C;oBACI,aAAa,mBAAmB,MADpC;oBAEI,kBAAkB,aAAa,IAAb,GAAoB,MAF1C;oBAGI,SAAS,WAAW,OAAX,EAHb;oBAII,UAAU,2BAJd;oBAKI,KALJ;oBAMI,KANJ;oBAOI,KAPJ;;AASA,oBAAI,IAAI,CAAR;;AAEA,uBAAO,CAAC,QAAQ,QAAQ,IAAR,CAAa,MAAb,CAAT,MAAmC,IAA1C,EAAgD;AAC5C;AACA,wBAAI,MAAM,CAAN,MAAa,eAAjB,EAAkC;AAC9B;AACH;;AAED,4BAAQ,MAAM,KAAd;AACA,4BAAQ,CAAC,KAAD,EAAQ,QAAQ,MAAM,CAAN,EAAS,MAAzB,CAAR;AACA,4BAAQ,MAAR,CAAe;AACX,8BAAM,IADK;AAEX,6BAAK;AACD,kCAAM,CADL;AAED,oCAAQ,WAAW,KAAX,CAAiB,IAAI,CAArB,EAAwB;AAF/B,yBAFM;AAMX,iCAAS,aAAa,eAAb,GAA+B,iBAN7B;AAOX,6BAAK,UAAU,KAAV,EAAiB,eAAjB;AAPM,qBAAf;AASH;AACJ;AA/BE,SAAP;AAiCH;AA9EY,CAAjB","file":"linebreak-style-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce a single linebreak style.\n * @author Erik Mueller\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent linebreak style\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"unix\", \"windows\"]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var EXPECTED_LF_MSG = \"Expected linebreaks to be 'LF' but found 'CRLF'.\",\n            EXPECTED_CRLF_MSG = \"Expected linebreaks to be 'CRLF' but found 'LF'.\";\n\n        var sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Builds a fix function that replaces text at the specified range in the source text.\n         * @param {int[]} range The range to replace\n         * @param {string} text The text to insert.\n         * @returns {function} Fixer function\n         * @private\n         */\n        function createFix(range, text) {\n            return function(fixer) {\n                return fixer.replaceTextRange(range, text);\n            };\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program: function checkForlinebreakStyle(node) {\n                var linebreakStyle = context.options[0] || \"unix\",\n                    expectedLF = linebreakStyle === \"unix\",\n                    expectedLFChars = expectedLF ? \"\\n\" : \"\\r\\n\",\n                    source = sourceCode.getText(),\n                    pattern = /\\r\\n|\\r|\\n|\\u2028|\\u2029/g,\n                    match,\n                    index,\n                    range;\n\n                var i = 0;\n\n                while ((match = pattern.exec(source)) !== null) {\n                    i++;\n                    if (match[0] === expectedLFChars) {\n                        continue;\n                    }\n\n                    index = match.index;\n                    range = [index, index + match[0].length];\n                    context.report({\n                        node: node,\n                        loc: {\n                            line: i,\n                            column: sourceCode.lines[i - 1].length\n                        },\n                        message: expectedLF ? EXPECTED_LF_MSG : EXPECTED_CRLF_MSG,\n                        fix: createFix(range, expectedLFChars)\n                    });\n                }\n            }\n        };\n    }\n};\n"]}