{"version":3,"sources":["dot-notation.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,IAAI,kBAAkB,4BAAtB;AACA,IAAI,WAAW,QAAQ,kBAAR,CAAf;;AAEA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,wCADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,QADV;AAEI,wBAAY;AACR,+BAAe;AACX,0BAAM;AADK,iBADP;AAIR,8BAAc;AACV,0BAAM;AADI;AAJN,aAFhB;AAUI,kCAAsB;AAV1B,SADI;AAPN,KADO;;AAwBb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,UAAU,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,EAApC;AACA,YAAI,gBAAgB,QAAQ,aAAR,KAA0B,KAAK,CAA/B,IAAoC,CAAC,CAAC,QAAQ,aAAlE;;AAEA,YAAI,YAAJ;;AAEA,YAAI,QAAQ,YAAZ,EAA0B;AACtB,2BAAe,IAAI,MAAJ,CAAW,QAAQ,YAAnB,CAAf;AACH;;AAED,eAAO;AACH,8BAAkB,UAAS,IAAT,EAAe;AAC7B,oBACI,KAAK,QAAL,IACA,KAAK,QAAL,CAAc,IAAd,KAAuB,SADvB,IAEA,gBAAgB,IAAhB,CAAqB,KAAK,QAAL,CAAc,KAAnC,CAFA,KAGC,iBAAiB,SAAS,OAAT,CAAiB,KAAK,KAAK,QAAL,CAAc,KAApC,MAA+C,CAAC,CAHlE,CADJ,EAKE;AACE,wBAAI,EAAE,gBAAgB,aAAa,IAAb,CAAkB,KAAK,QAAL,CAAc,KAAhC,CAAlB,CAAJ,EAA+D;AAC3D,gCAAQ,MAAR,CAAe,KAAK,QAApB,EAA8B,MAAM,KAAK,SAAL,CAAe,KAAK,QAAL,CAAc,KAA7B,CAAN,GAA4C,sCAA1E;AACH;AACJ;AACD,oBACI,CAAC,aAAD,IACA,CAAC,KAAK,QADN,IAEA,SAAS,OAAT,CAAiB,KAAK,KAAK,QAAL,CAAc,IAApC,MAA8C,CAAC,CAHnD,EAIE;AACE,4BAAQ,MAAR,CAAe,KAAK,QAApB,EAA8B,MAAM,KAAK,QAAL,CAAc,IAApB,GAA2B,qBAAzD;AACH;AACJ;AAnBE,SAAP;AAqBH;AAvDY,CAAjB","file":"dot-notation-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to warn about using dot notation instead of square bracket notation when possible.\n * @author Josh Perez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nvar validIdentifier = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/;\nvar keywords = require(\"../util/keywords\");\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce dot notation whenever possible\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowKeywords: {\n                        type: \"boolean\"\n                    },\n                    allowPattern: {\n                        type: \"string\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var options = context.options[0] || {};\n        var allowKeywords = options.allowKeywords === void 0 || !!options.allowKeywords;\n\n        var allowPattern;\n\n        if (options.allowPattern) {\n            allowPattern = new RegExp(options.allowPattern);\n        }\n\n        return {\n            MemberExpression: function(node) {\n                if (\n                    node.computed &&\n                    node.property.type === \"Literal\" &&\n                    validIdentifier.test(node.property.value) &&\n                    (allowKeywords || keywords.indexOf(\"\" + node.property.value) === -1)\n                ) {\n                    if (!(allowPattern && allowPattern.test(node.property.value))) {\n                        context.report(node.property, \"[\" + JSON.stringify(node.property.value) + \"] is better written in dot notation.\");\n                    }\n                }\n                if (\n                    !allowKeywords &&\n                    !node.computed &&\n                    keywords.indexOf(\"\" + node.property.name) !== -1\n                ) {\n                    context.report(node.property, \".\" + node.property.name + \" is a syntax error.\");\n                }\n            }\n        };\n    }\n};\n"]}