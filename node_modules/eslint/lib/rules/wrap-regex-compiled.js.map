{"version":3,"sources":["wrap-regex.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,2CADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,aAAa,QAAQ,aAAR,EAAjB;;AAEA,eAAO;;AAEH,qBAAS,UAAS,IAAT,EAAe;AACpB,oBAAI,QAAQ,WAAW,aAAX,CAAyB,IAAzB,CAAZ;oBACI,WAAW,MAAM,IADrB;oBAEI,MAFJ;oBAGI,WAHJ;oBAII,SAJJ;;AAMA,oBAAI,aAAa,mBAAjB,EAAsC;AAClC,6BAAS,WAAW,cAAX,CAA0B,IAA1B,CAAT;AACA,gCAAY,QAAQ,YAAR,EAAZ;AACA,kCAAc,UAAU,UAAU,MAAV,GAAmB,CAA7B,CAAd;;AAEA,wBAAI,YAAY,IAAZ,KAAqB,kBAArB,IAA2C,YAAY,MAAZ,KAAuB,IAAlE,KACC,CAAC,MAAD,IAAW,OAAO,KAAP,KAAiB,GAD7B,CAAJ,EACuC;AACnC,gCAAQ,MAAR,CAAe,IAAf,EAAqB,8DAArB;AACH;AACJ;AACJ;AAnBE,SAAP;AAsBH;AApCY,CAAjB","file":"wrap-regex-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require parenthesis around regex literals\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var sourceCode = context.getSourceCode();\n\n        return {\n\n            Literal: function(node) {\n                var token = sourceCode.getFirstToken(node),\n                    nodeType = token.type,\n                    source,\n                    grandparent,\n                    ancestors;\n\n                if (nodeType === \"RegularExpression\") {\n                    source = sourceCode.getTokenBefore(node);\n                    ancestors = context.getAncestors();\n                    grandparent = ancestors[ancestors.length - 1];\n\n                    if (grandparent.type === \"MemberExpression\" && grandparent.object === node &&\n                        (!source || source.value !== \"(\")) {\n                        context.report(node, \"Wrap the regexp literal in parens to disambiguate the slash.\");\n                    }\n                }\n            }\n        };\n\n    }\n};\n"]}