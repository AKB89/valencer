{"version":3,"sources":["no-dupe-keys.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,4CADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,8BAAkB,UAAS,IAAT,EAAe;;;;AAI7B,oBAAI,YAAY,OAAO,MAAP,CAAc,IAAd,CAAhB;;AAEA,qBAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAS,QAAT,EAAmB;;AAEvC,wBAAI,SAAS,IAAT,KAAkB,UAAtB,EAAkC;AAC9B;AACH;;AAED,wBAAI,UAAU,SAAS,GAAT,CAAa,IAAb,IAAqB,SAAS,GAAT,CAAa,KAAhD;wBACI,MAAM,SAAS,IAAT,GAAgB,GAAhB,GAAsB,OADhC;wBAEI,gBAAiB,CAAC,SAAS,QAAV,IAAsB,SAAS,GAAT,CAAa,IAAb,KAAsB,SAFjE;;AAIA,wBAAI,aAAJ,EAAmB;AACf,4BAAI,UAAU,GAAV,CAAJ,EAAoB;AAChB,oCAAQ,MAAR,CAAe,IAAf,EAAqB,SAAS,GAAT,CAAa,KAAlC,EAAyC,0BAAzC,EAAqE,EAAE,KAAK,OAAP,EAArE;AACH,yBAFD,MAEO;AACH,sCAAU,GAAV,IAAiB,IAAjB;AACH;AACJ;AACJ,iBAjBD;AAmBH;AA3BE,SAAP;AA8BH;AA3CY,CAAjB","file":"no-dupe-keys-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of duplicate keys in an object.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow duplicate keys in object literals\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            ObjectExpression: function(node) {\n\n                // Object that will be a map of properties--safe because we will\n                // prefix all of the keys.\n                var nodeProps = Object.create(null);\n\n                node.properties.forEach(function(property) {\n\n                    if (property.type !== \"Property\") {\n                        return;\n                    }\n\n                    var keyName = property.key.name || property.key.value,\n                        key = property.kind + \"-\" + keyName,\n                        checkProperty = (!property.computed || property.key.type === \"Literal\");\n\n                    if (checkProperty) {\n                        if (nodeProps[key]) {\n                            context.report(node, property.loc.start, \"Duplicate key '{{key}}'.\", { key: keyName });\n                        } else {\n                            nodeProps[key] = true;\n                        }\n                    }\n                });\n\n            }\n        };\n\n    }\n};\n"]}