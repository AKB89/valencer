{"version":3,"sources":["no-unused-vars.js"],"names":[],"mappings":"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","file":"no-unused-vars-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag declared but unused variables\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar lodash = require(\"lodash\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow unused variables\",\n            category: \"Variables\",\n            recommended: true\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"all\", \"local\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            vars: {\n                                enum: [\"all\", \"local\"]\n                            },\n                            varsIgnorePattern: {\n                                type: \"string\"\n                            },\n                            args: {\n                                enum: [\"all\", \"after-used\", \"none\"]\n                            },\n                            argsIgnorePattern: {\n                                type: \"string\"\n                            },\n                            caughtErrors: {\n                                enum: [\"all\", \"none\"]\n                            },\n                            caughtErrorsIgnorePattern: {\n                                type: \"string\"\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var MESSAGE = \"'{{name}}' is defined but never used\";\n\n        var config = {\n            vars: \"all\",\n            args: \"after-used\",\n            caughtErrors: \"none\"\n        };\n\n        var firstOption = context.options[0];\n\n        if (firstOption) {\n            if (typeof firstOption === \"string\") {\n                config.vars = firstOption;\n            } else {\n                config.vars = firstOption.vars || config.vars;\n                config.args = firstOption.args || config.args;\n                config.caughtErrors = firstOption.caughtErrors || config.caughtErrors;\n\n                if (firstOption.varsIgnorePattern) {\n                    config.varsIgnorePattern = new RegExp(firstOption.varsIgnorePattern);\n                }\n\n                if (firstOption.argsIgnorePattern) {\n                    config.argsIgnorePattern = new RegExp(firstOption.argsIgnorePattern);\n                }\n\n                if (firstOption.caughtErrorsIgnorePattern) {\n                    config.caughtErrorsIgnorePattern = new RegExp(firstOption.caughtErrorsIgnorePattern);\n                }\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Determines if a given variable is being exported from a module.\n         * @param {Variable} variable - EScope variable object.\n         * @returns {boolean} True if the variable is exported, false if not.\n         * @private\n         */\n        function isExported(variable) {\n\n            var definition = variable.defs[0];\n\n            if (definition) {\n\n                var node = definition.node;\n\n                if (node.type === \"VariableDeclarator\") {\n                    node = node.parent;\n                } else if (definition.type === \"Parameter\") {\n                    return false;\n                }\n\n                return node.parent.type.indexOf(\"Export\") === 0;\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * Determines if a reference is a read operation.\n         * @param {Reference} ref - An escope Reference\n         * @returns {Boolean} whether the given reference represents a read operation\n         * @private\n         */\n        function isReadRef(ref) {\n            return ref.isRead();\n        }\n\n        /**\n         * Determine if an identifier is referencing an enclosing function name.\n         * @param {Reference} ref - The reference to check.\n         * @param {ASTNode[]} nodes - The candidate function nodes.\n         * @returns {boolean} True if it's a self-reference, false if not.\n         * @private\n         */\n        function isSelfReference(ref, nodes) {\n            var scope = ref.from;\n\n            while (scope) {\n                if (nodes.indexOf(scope.block) >= 0) {\n                    return true;\n                }\n\n                scope = scope.upper;\n            }\n\n            return false;\n        }\n\n        /**\n         * Determines if the variable is used.\n         * @param {Variable} variable - The variable to check.\n         * @param {Reference[]} references - The variable references to check.\n         * @returns {boolean} True if the variable is used\n         */\n        function isUsedVariable(variable) {\n            var functionNodes = variable.defs.filter(function(def) {\n                    return def.type === \"FunctionName\";\n                }).map(function(def) {\n                    return def.node;\n                }),\n                isFunctionDefinition = functionNodes.length > 0;\n\n            return variable.references.some(function(ref) {\n                return isReadRef(ref) && !(isFunctionDefinition && isSelfReference(ref, functionNodes));\n            });\n        }\n\n        /**\n         * Gets an array of variables without read references.\n         * @param {Scope} scope - an escope Scope object.\n         * @param {Variable[]} unusedVars - an array that saving result.\n         * @returns {Variable[]} unused variables of the scope and descendant scopes.\n         * @private\n         */\n        function collectUnusedVariables(scope, unusedVars) {\n            var variables = scope.variables;\n            var childScopes = scope.childScopes;\n            var i, l;\n\n            if (scope.type !== \"TDZ\" && (scope.type !== \"global\" || config.vars === \"all\")) {\n                for (i = 0, l = variables.length; i < l; ++i) {\n                    var variable = variables[i];\n\n                    // skip a variable of class itself name in the class scope\n                    if (scope.type === \"class\" && scope.block.id === variable.identifiers[0]) {\n                        continue;\n                    }\n\n                    // skip function expression names and variables marked with markVariableAsUsed()\n                    if (scope.functionExpressionScope || variable.eslintUsed) {\n                        continue;\n                    }\n\n                    // skip implicit \"arguments\" variable\n                    if (scope.type === \"function\" && variable.name === \"arguments\" && variable.identifiers.length === 0) {\n                        continue;\n                    }\n\n                    // explicit global variables don't have definitions.\n                    var def = variable.defs[0];\n\n                    if (def) {\n                        var type = def.type;\n\n                        // skip catch variables\n                        if (type === \"CatchClause\") {\n                            if (config.caughtErrors === \"none\") {\n                                continue;\n                            }\n\n                            // skip ignored parameters\n                            if (config.caughtErrorsIgnorePattern && config.caughtErrorsIgnorePattern.test(def.name.name)) {\n                                continue;\n                            }\n                        }\n\n                        if (type === \"Parameter\") {\n\n                            // skip any setter argument\n                            if (def.node.parent.type === \"Property\" && def.node.parent.kind === \"set\") {\n                                continue;\n                            }\n\n                            // if \"args\" option is \"none\", skip any parameter\n                            if (config.args === \"none\") {\n                                continue;\n                            }\n\n                            // skip ignored parameters\n                            if (config.argsIgnorePattern && config.argsIgnorePattern.test(def.name.name)) {\n                                continue;\n                            }\n\n                            // if \"args\" option is \"after-used\", skip all but the last parameter\n                            if (config.args === \"after-used\" && def.index < def.node.params.length - 1) {\n                                continue;\n                            }\n                        } else {\n\n                            // skip ignored variables\n                            if (config.varsIgnorePattern && config.varsIgnorePattern.test(def.name.name)) {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!isUsedVariable(variable) && !isExported(variable)) {\n                        unusedVars.push(variable);\n                    }\n                }\n            }\n\n            for (i = 0, l = childScopes.length; i < l; ++i) {\n                collectUnusedVariables(childScopes[i], unusedVars);\n            }\n\n            return unusedVars;\n        }\n\n        /**\n         * Gets the index of a given variable name in a given comment.\n         * @param {escope.Variable} variable - A variable to get.\n         * @param {ASTNode} comment - A comment node which includes the variable name.\n         * @returns {number} The index of the variable name's location.\n         */\n        function getColumnInComment(variable, comment) {\n            var namePattern = new RegExp(\"[\\\\s,]\" + lodash.escapeRegExp(variable.name) + \"(?:$|[\\\\s,:])\", \"g\");\n\n            // To ignore the first text \"global\".\n            namePattern.lastIndex = comment.value.indexOf(\"global\") + 6;\n\n            // Search a given variable name.\n            var match = namePattern.exec(comment.value);\n\n            return match ? match.index + 1 : 0;\n        }\n\n        /**\n         * Creates the correct location of a given variables.\n         * The location is at its name string in a `/*global` comment.\n         *\n         * @param {escope.Variable} variable - A variable to get its location.\n         * @returns {{line: number, column: number}} The location object for the variable.\n         */\n        function getLocation(variable) {\n            var comment = variable.eslintExplicitGlobalComment;\n            var baseLoc = comment.loc.start;\n            var column = getColumnInComment(variable, comment);\n            var prefix = comment.value.slice(0, column);\n            var lineInComment = (prefix.match(/\\n/g) || []).length;\n\n            if (lineInComment > 0) {\n                column -= 1 + prefix.lastIndexOf(\"\\n\");\n            } else {\n\n                // 2 is for `/*`\n                column += baseLoc.column + 2;\n            }\n\n            return {\n                line: baseLoc.line + lineInComment,\n                column: column\n            };\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            \"Program:exit\": function(programNode) {\n                var unusedVars = collectUnusedVariables(context.getScope(), []);\n\n                for (var i = 0, l = unusedVars.length; i < l; ++i) {\n                    var unusedVar = unusedVars[i];\n\n                    if (unusedVar.eslintExplicitGlobal) {\n                        context.report({\n                            node: programNode,\n                            loc: getLocation(unusedVar),\n                            message: MESSAGE,\n                            data: unusedVar\n                        });\n                    } else if (unusedVar.defs.length > 0) {\n                        context.report({\n                            node: unusedVar.identifiers[0],\n                            message: MESSAGE,\n                            data: unusedVar\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"]}