{"version":3,"sources":["no-empty-character-class.js"],"names":[],"mappings":";;;;;AAKA;;;;;;;;;;;;;;;;;;;AAkBA,IAAI,QAAQ,gDAAZ;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,yDADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,gBAAS,OAAT,EAAkB;AACtB,YAAI,aAAa,QAAQ,aAAR,EAAjB;;AAEA,eAAO;;AAEH,qBAAS,iBAAS,IAAT,EAAe;AACpB,oBAAI,QAAQ,WAAW,aAAX,CAAyB,IAAzB,CAAZ;;AAEA,oBAAI,MAAM,IAAN,KAAe,mBAAf,IAAsC,CAAC,MAAM,IAAN,CAAW,MAAM,KAAjB,CAA3C,EAAoE;AAChE,4BAAQ,MAAR,CAAe,IAAf,EAAqB,cAArB;AACH;AACJ;;AARE,SAAP;AAYH;AA1BY,CAAjB","file":"no-empty-character-class-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag the use of empty character classes in regular expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/*\nplain-English description of the following regexp:\n0. `^` fix the match at the beginning of the string\n1. `\\/`: the `/` that begins the regexp\n2. `([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*`: regexp contents; 0 or more of the following\n  2.0. `[^\\\\[]`: any character that's not a `\\` or a `[` (anything but escape sequences and character classes)\n  2.1. `\\\\.`: an escape sequence\n  2.2. `\\[([^\\\\\\]]|\\\\.)+\\]`: a character class that isn't empty\n3. `\\/` the `/` that ends the regexp\n4. `[gimuy]*`: optional regexp flags\n5. `$`: fix the match at the end of the string\n*/\nvar regex = /^\\/([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*\\/[gimuy]*$/;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow empty character classes in regular expressions\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var sourceCode = context.getSourceCode();\n\n        return {\n\n            Literal: function(node) {\n                var token = sourceCode.getFirstToken(node);\n\n                if (token.type === \"RegularExpression\" && !regex.test(token.value)) {\n                    context.report(node, \"Empty class.\");\n                }\n            }\n\n        };\n\n    }\n};\n"]}