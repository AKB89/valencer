{"version":3,"sources":["no-label-var.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,mDADX;AAEF,sBAAU,WAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;;;;;;;AAatB,iBAAS,cAAT,CAAwB,KAAxB,EAA+B,IAA/B,EAAqC;AACjC,mBAAO,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,IAAlC,MAA4C,IAAnD;AACH;;;;;;AAMD,eAAO;;AAEH,8BAAkB,UAAS,IAAT,EAAe;;;AAG7B,oBAAI,QAAQ,QAAQ,QAAR,EAAZ;;;;AAIA,oBAAI,eAAe,KAAf,EAAsB,KAAK,KAAL,CAAW,IAAjC,CAAJ,EAA4C;AACxC,4BAAQ,MAAR,CAAe,IAAf,EAAqB,2CAArB;AACH;AACJ;;AAZE,SAAP;AAgBH;AAhDY,CAAjB","file":"no-label-var-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag labels that are the same as an identifier\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow labels that share a name with a variable\",\n            category: \"Variables\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Check if the identifier is present inside current scope\n         * @param {object} scope current scope\n         * @param {string} name To evaluate\n         * @returns {boolean} True if its present\n         * @private\n         */\n        function findIdentifier(scope, name) {\n            return astUtils.getVariableByName(scope, name) !== null;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            LabeledStatement: function(node) {\n\n                // Fetch the innermost scope.\n                var scope = context.getScope();\n\n                // Recursively find the identifier walking up the scope, starting\n                // with the innermost scope.\n                if (findIdentifier(scope, node.label.name)) {\n                    context.report(node, \"Found identifier with same name as label.\");\n                }\n            }\n\n        };\n\n    }\n};\n"]}