{"version":3,"sources":["object-curly-spacing.js"],"names":[],"mappings":"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","file":"object-curly-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of object literals.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent spacing inside braces\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    arraysInObjects: {\n                        type: \"boolean\"\n                    },\n                    objectsInObjects: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var spaced = context.options[0] === \"always\",\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether an option is set, relative to the spacing option.\n         * If spaced is \"always\", then check whether option is set to false.\n         * If spaced is \"never\", then check whether option is set to true.\n         * @param {Object} option - The option to exclude.\n         * @returns {boolean} Whether or not the property is excluded.\n         */\n        function isOptionSet(option) {\n            return context.options[1] ? context.options[1][option] === !spaced : false;\n        }\n\n        var options = {\n            spaced: spaced,\n            arraysInObjectsException: isOptionSet(\"arraysInObjects\"),\n            objectsInObjectsException: isOptionSet(\"objectsInObjects\")\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n        * Reports that there shouldn't be a space after the first token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportNoBeginningSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"There should be no space after '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    var nextToken = context.getSourceCode().getTokenAfter(token);\n\n                    return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                }\n            });\n        }\n\n        /**\n        * Reports that there shouldn't be a space before the last token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportNoEndingSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"There should be no space before '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    var previousToken = context.getSourceCode().getTokenBefore(token);\n\n                    return fixer.removeRange([previousToken.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n        * Reports that there should be a space after the first token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"A space is required after '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n        * Reports that there should be a space before the last token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"A space is required before '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Determines if spacing in curly braces is valid.\n         * @param {ASTNode} node The AST node to check.\n         * @param {Token} first The first token to check (should be the opening brace)\n         * @param {Token} second The second token to check (should be first after the opening brace)\n         * @param {Token} penultimate The penultimate token to check (should be last before closing brace)\n         * @param {Token} last The last token to check (should be closing brace)\n         * @returns {void}\n         */\n        function validateBraceSpacing(node, first, second, penultimate, last) {\n            var shouldCheckPenultimate,\n                penultimateType,\n                closingCurlyBraceMustBeSpaced,\n                firstSpaced,\n                lastSpaced;\n\n            if (astUtils.isTokenOnSameLine(first, second)) {\n                firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);\n                if (options.spaced && !firstSpaced) {\n                    reportRequiredBeginningSpace(node, first);\n                }\n                if (!options.spaced && firstSpaced) {\n                    reportNoBeginningSpace(node, first);\n                }\n            }\n\n            if (astUtils.isTokenOnSameLine(penultimate, last)) {\n                shouldCheckPenultimate = (\n                    options.arraysInObjectsException && penultimate.value === \"]\" ||\n                    options.objectsInObjectsException && penultimate.value === \"}\"\n                );\n                penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.start).type;\n\n                closingCurlyBraceMustBeSpaced = (\n                    options.arraysInObjectsException && penultimateType === \"ArrayExpression\" ||\n                    options.objectsInObjectsException && penultimateType === \"ObjectExpression\"\n                ) ? !options.spaced : options.spaced;\n\n                lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);\n\n                if (closingCurlyBraceMustBeSpaced && !lastSpaced) {\n                    reportRequiredEndingSpace(node, last);\n                }\n                if (!closingCurlyBraceMustBeSpaced && lastSpaced) {\n                    reportNoEndingSpace(node, last);\n                }\n            }\n        }\n\n        /**\n         * Reports a given object node if spacing in curly braces is invalid.\n         * @param {ASTNode} node - An ObjectExpression or ObjectPattern node to check.\n         * @returns {void}\n         */\n        function checkForObject(node) {\n            if (node.properties.length === 0) {\n                return;\n            }\n\n            var first = sourceCode.getFirstToken(node),\n                last = sourceCode.getLastToken(node),\n                second = sourceCode.getTokenAfter(first),\n                penultimate = sourceCode.getTokenBefore(last);\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        /**\n         * Reports a given import node if spacing in curly braces is invalid.\n         * @param {ASTNode} node - An ImportDeclaration node to check.\n         * @returns {void}\n         */\n        function checkForImport(node) {\n            if (node.specifiers.length === 0) {\n                return;\n            }\n\n            var firstSpecifier = node.specifiers[0],\n                lastSpecifier = node.specifiers[node.specifiers.length - 1];\n\n            if (lastSpecifier.type !== \"ImportSpecifier\") {\n                return;\n            }\n            if (firstSpecifier.type !== \"ImportSpecifier\") {\n                firstSpecifier = node.specifiers[1];\n            }\n\n            var first = sourceCode.getTokenBefore(firstSpecifier),\n                last = sourceCode.getTokenAfter(lastSpecifier);\n\n            // to support a trailing comma.\n            if (last.value === \",\") {\n                last = sourceCode.getTokenAfter(last);\n            }\n\n            var second = sourceCode.getTokenAfter(first),\n                penultimate = sourceCode.getTokenBefore(last);\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        /**\n         * Reports a given export node if spacing in curly braces is invalid.\n         * @param {ASTNode} node - An ExportNamedDeclaration node to check.\n         * @returns {void}\n         */\n        function checkForExport(node) {\n            if (node.specifiers.length === 0) {\n                return;\n            }\n\n            var firstSpecifier = node.specifiers[0],\n                lastSpecifier = node.specifiers[node.specifiers.length - 1],\n                first = sourceCode.getTokenBefore(firstSpecifier),\n                last = sourceCode.getTokenAfter(lastSpecifier);\n\n            // to support a trailing comma.\n            if (last.value === \",\") {\n                last = sourceCode.getTokenAfter(last);\n            }\n\n            var second = sourceCode.getTokenAfter(first),\n                penultimate = sourceCode.getTokenBefore(last);\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            // var {x} = y;\n            ObjectPattern: checkForObject,\n\n            // var y = {x: 'y'}\n            ObjectExpression: checkForObject,\n\n            // import {y} from 'x';\n            ImportDeclaration: checkForImport,\n\n            // export {name} from 'yo';\n            ExportNamedDeclaration: checkForExport\n        };\n\n    }\n};\n"]}