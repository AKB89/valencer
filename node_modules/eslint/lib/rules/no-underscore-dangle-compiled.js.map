{"version":3,"sources":["no-underscore-dangle.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,8CADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,QADV;AAEI,wBAAY;AACR,uBAAO;AACH,0BAAM,OADH;AAEH,2BAAO;AACH,8BAAM;AADH;AAFJ,iBADC;AAOR,gCAAgB;AACZ,0BAAM;AADM;AAPR,aAFhB;AAaI,kCAAsB;AAb1B,SADI;AAPN,KADO;;AA2Bb,YAAQ,gBAAS,OAAT,EAAkB;;AAEtB,YAAI,UAAU,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,EAApC;AACA,YAAI,oBAAoB,QAAQ,KAAR,GAAgB,QAAQ,KAAxB,GAAgC,EAAxD;AACA,YAAI,iBAAiB,OAAO,QAAQ,cAAf,KAAkC,WAAlC,GAAgD,QAAQ,cAAxD,GAAyE,KAA9F;;;;;;;;;;;;AAYA,iBAAS,SAAT,CAAmB,UAAnB,EAA+B;AAC3B,mBAAO,kBAAkB,IAAlB,CAAuB,UAAS,KAAT,EAAgB;AAC1C,uBAAO,UAAU,UAAjB;AACH,aAFM,CAAP;AAGH;;;;;;;;AAQD,iBAAS,qBAAT,CAA+B,UAA/B,EAA2C;AACvC,gBAAI,MAAM,WAAW,MAArB;;AAEA,mBAAO,eAAe,GAAf,KAAuB,WAAW,CAAX,MAAkB,GAAlB,IAAyB,WAAW,MAAM,CAAjB,MAAwB,GAAxE,CAAP;AACH;;;;;;;;AAQD,iBAAS,0CAAT,CAAoD,UAApD,EAAgE;AAC5D,mBAAO,eAAe,WAAtB;AACH;;;;;;;;AAQD,iBAAS,2CAAT,CAAqD,UAArD,EAAiE;;;AAG7D,mBAAO,eAAe,GAAtB;AACH;;;;;;;;AAQD,iBAAS,+CAAT,CAAyD,IAAzD,EAA+D;AAC3D,gBAAI,KAAK,EAAT,EAAa;AACT,oBAAI,aAAa,KAAK,EAAL,CAAQ,IAAzB;;AAEA,oBAAI,OAAO,UAAP,KAAsB,WAAtB,IAAqC,sBAAsB,UAAtB,CAArC,IAA0E,CAAC,UAAU,UAAV,CAA/E,EAAsG;AAClG,4BAAQ,MAAR,CAAe,IAAf,EAAqB,iCAAiC,UAAjC,GAA8C,IAAnE;AACH;AACJ;AACJ;;;;;;;;AAQD,iBAAS,8CAAT,CAAwD,IAAxD,EAA8D;AAC1D,gBAAI,aAAa,KAAK,EAAL,CAAQ,IAAzB;;AAEA,gBAAI,OAAO,UAAP,KAAsB,WAAtB,IAAqC,sBAAsB,UAAtB,CAArC,IACA,CAAC,4CAA4C,UAA5C,CADD,IAC4D,CAAC,UAAU,UAAV,CADjE,EACwF;AACpF,wBAAQ,MAAR,CAAe,IAAf,EAAqB,iCAAiC,UAAjC,GAA8C,IAAnE;AACH;AACJ;;;;;;;;AAQD,iBAAS,4CAAT,CAAsD,IAAtD,EAA4D;AACxD,gBAAI,aAAa,KAAK,QAAL,CAAc,IAA/B;gBACI,iBAAiB,KAAK,MAAL,CAAY,IAAZ,KAAqB,gBAD1C;;AAGA,gBAAI,OAAO,UAAP,KAAsB,WAAtB,IAAqC,sBAAsB,UAAtB,CAArC,IACA,EAAE,kBAAkB,cAApB,CADA,IAEA,CAAC,2CAA2C,UAA3C,CAFD,IAE2D,CAAC,UAAU,UAAV,CAFhE,EAEuF;AACnF,wBAAQ,MAAR,CAAe,IAAf,EAAqB,iCAAiC,UAAjC,GAA8C,IAAnE;AACH;AACJ;;;;;;AAMD,eAAO;AACH,iCAAqB,+CADlB;AAEH,gCAAoB,8CAFjB;AAGH,8BAAkB;AAHf,SAAP;AAMH;AA7IY,CAAjB","file":"no-underscore-dangle-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag trailing underscores in variable declarations.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow dangling underscores in identifiers\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    allowAfterThis: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var options = context.options[0] || {};\n        var ALLOWED_VARIABLES = options.allow ? options.allow : [];\n        var allowAfterThis = typeof options.allowAfterThis !== \"undefined\" ? options.allowAfterThis : false;\n\n        //-------------------------------------------------------------------------\n        // Helpers\n        //-------------------------------------------------------------------------\n\n        /**\n         * Check if identifier is present inside the allowed option\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is present\n         * @private\n         */\n        function isAllowed(identifier) {\n            return ALLOWED_VARIABLES.some(function(ident) {\n                return ident === identifier;\n            });\n        }\n\n        /**\n         * Check if identifier has a underscore at the end\n         * @param {ASTNode} identifier node to evaluate\n         * @returns {boolean} true if its is present\n         * @private\n         */\n        function hasTrailingUnderscore(identifier) {\n            var len = identifier.length;\n\n            return identifier !== \"_\" && (identifier[0] === \"_\" || identifier[len - 1] === \"_\");\n        }\n\n        /**\n         * Check if identifier is a special case member expression\n         * @param {ASTNode} identifier node to evaluate\n         * @returns {boolean} true if its is a special case\n         * @private\n         */\n        function isSpecialCaseIdentifierForMemberExpression(identifier) {\n            return identifier === \"__proto__\";\n        }\n\n        /**\n         * Check if identifier is a special case variable expression\n         * @param {ASTNode} identifier node to evaluate\n         * @returns {boolean} true if its is a special case\n         * @private\n         */\n        function isSpecialCaseIdentifierInVariableExpression(identifier) {\n\n            // Checks for the underscore library usage here\n            return identifier === \"_\";\n        }\n\n        /**\n         * Check if function has a underscore at the end\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForTrailingUnderscoreInFunctionDeclaration(node) {\n            if (node.id) {\n                var identifier = node.id.name;\n\n                if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) && !isAllowed(identifier)) {\n                    context.report(node, \"Unexpected dangling '_' in '\" + identifier + \"'.\");\n                }\n            }\n        }\n\n        /**\n         * Check if variable expression has a underscore at the end\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForTrailingUnderscoreInVariableExpression(node) {\n            var identifier = node.id.name;\n\n            if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) &&\n                !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {\n                context.report(node, \"Unexpected dangling '_' in '\" + identifier + \"'.\");\n            }\n        }\n\n        /**\n         * Check if member expression has a underscore at the end\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForTrailingUnderscoreInMemberExpression(node) {\n            var identifier = node.property.name,\n                isMemberOfThis = node.object.type === \"ThisExpression\";\n\n            if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) &&\n                !(isMemberOfThis && allowAfterThis) &&\n                !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {\n                context.report(node, \"Unexpected dangling '_' in '\" + identifier + \"'.\");\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: checkForTrailingUnderscoreInFunctionDeclaration,\n            VariableDeclarator: checkForTrailingUnderscoreInVariableExpression,\n            MemberExpression: checkForTrailingUnderscoreInMemberExpression\n        };\n\n    }\n};\n"]}