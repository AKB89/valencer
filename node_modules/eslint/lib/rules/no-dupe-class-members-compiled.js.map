{"version":3,"sources":["no-dupe-class-members.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,kCADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,gBAAS,OAAT,EAAkB;AACtB,YAAI,QAAQ,EAAZ;;;;;;;;;;;AAWA,iBAAS,QAAT,CAAkB,IAAlB,EAAwB,QAAxB,EAAkC;AAC9B,gBAAI,WAAW,MAAM,MAAM,MAAN,GAAe,CAArB,CAAf;AACA,gBAAI,MAAM,MAAM,IAAhB,C;;AAEA,gBAAI,CAAC,SAAS,GAAT,CAAL,EAAoB;AAChB,yBAAS,GAAT,IAAgB;AACZ,+BAAW,EAAC,MAAM,KAAP,EAAc,KAAK,KAAnB,EAA0B,KAAK,KAA/B,EADC;AAEZ,4BAAQ,EAAC,MAAM,KAAP,EAAc,KAAK,KAAnB,EAA0B,KAAK,KAA/B;AAFI,iBAAhB;AAIH;;AAED,mBAAO,SAAS,GAAT,EAAc,WAAW,QAAX,GAAsB,WAApC,CAAP;AACH;;;;;;;;AAQD,iBAAS,OAAT,CAAiB,IAAjB,EAAuB;AACnB,oBAAQ,KAAK,IAAb;AACI,qBAAK,YAAL;AAAmB,2BAAO,KAAK,IAAZ;AACnB,qBAAK,SAAL;AAAgB,2BAAO,OAAO,KAAK,KAAZ,CAAP;;;AAGhB;AAAS,2BAAO,EAAP;AALb;AAOH;;AAED,eAAO;;;AAGH,qBAAS,mBAAW;AAChB,wBAAQ,EAAR;AACH,aALE;;;AAQH,uBAAW,qBAAW;AAClB,sBAAM,IAAN,CAAW,OAAO,MAAP,CAAc,IAAd,CAAX;AACH,aAVE;;;AAaH,8BAAkB,yBAAW;AACzB,sBAAM,GAAN;AACH,aAfE;;;AAkBH,8BAAkB,0BAAS,IAAT,EAAe;AAC7B,oBAAI,KAAK,QAAT,EAAmB;AACf;AACH;;AAED,oBAAI,OAAO,QAAQ,KAAK,GAAb,CAAX;AACA,oBAAI,QAAQ,SAAS,IAAT,EAAe,KAAK,MAApB,CAAZ;AACA,oBAAI,cAAc,KAAlB;;AAEA,oBAAI,KAAK,IAAL,KAAc,KAAlB,EAAyB;AACrB,kCAAe,MAAM,IAAN,IAAc,MAAM,GAAnC;AACA,0BAAM,GAAN,GAAY,IAAZ;AACH,iBAHD,MAGO,IAAI,KAAK,IAAL,KAAc,KAAlB,EAAyB;AAC5B,kCAAe,MAAM,IAAN,IAAc,MAAM,GAAnC;AACA,0BAAM,GAAN,GAAY,IAAZ;AACH,iBAHM,MAGA;AACH,kCAAe,MAAM,IAAN,IAAc,MAAM,GAApB,IAA2B,MAAM,GAAhD;AACA,0BAAM,IAAN,GAAa,IAAb;AACH;;AAED,oBAAI,WAAJ,EAAiB;AACb,4BAAQ,MAAR,CAAe,IAAf,EAAqB,4BAArB,EAAmD,EAAC,MAAM,IAAP,EAAnD;AACH;AACJ;AAzCE,SAAP;AA2CH;AAhGY,CAAjB","file":"no-dupe-class-members-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to disallow duplicate name in class members.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow duplicate class members\",\n            category: \"ECMAScript 6\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var stack = [];\n\n        /**\n         * Gets state of a given member name.\n         * @param {string} name - A name of a member.\n         * @param {boolean} isStatic - A flag which specifies that is a static member.\n         * @returns {object} A state of a given member name.\n         *   - retv.init {boolean} A flag which shows the name is declared as normal member.\n         *   - retv.get {boolean} A flag which shows the name is declared as getter.\n         *   - retv.set {boolean} A flag which shows the name is declared as setter.\n         */\n        function getState(name, isStatic) {\n            var stateMap = stack[stack.length - 1];\n            var key = \"$\" + name; // to avoid \"__proto__\".\n\n            if (!stateMap[key]) {\n                stateMap[key] = {\n                    nonStatic: {init: false, get: false, set: false},\n                    static: {init: false, get: false, set: false}\n                };\n            }\n\n            return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\n        }\n\n        /**\n         * Gets the name text of a given node.\n         *\n         * @param {ASTNode} node - A node to get the name.\n         * @returns {string} The name text of the node.\n         */\n        function getName(node) {\n            switch (node.type) {\n                case \"Identifier\": return node.name;\n                case \"Literal\": return String(node.value);\n\n                /* istanbul ignore next: syntax error */\n                default: return \"\";\n            }\n        }\n\n        return {\n\n            // Initializes the stack of state of member declarations.\n            Program: function() {\n                stack = [];\n            },\n\n            // Initializes state of member declarations for the class.\n            ClassBody: function() {\n                stack.push(Object.create(null));\n            },\n\n            // Disposes the state for the class.\n            \"ClassBody:exit\": function() {\n                stack.pop();\n            },\n\n            // Reports the node if its name has been declared already.\n            MethodDefinition: function(node) {\n                if (node.computed) {\n                    return;\n                }\n\n                var name = getName(node.key);\n                var state = getState(name, node.static);\n                var isDuplicate = false;\n\n                if (node.kind === \"get\") {\n                    isDuplicate = (state.init || state.get);\n                    state.get = true;\n                } else if (node.kind === \"set\") {\n                    isDuplicate = (state.init || state.set);\n                    state.set = true;\n                } else {\n                    isDuplicate = (state.init || state.get || state.set);\n                    state.init = true;\n                }\n\n                if (isDuplicate) {\n                    context.report(node, \"Duplicate name '{{name}}'.\", {name: name});\n                }\n            }\n        };\n    }\n};\n"]}