{"version":3,"sources":["no-useless-escape.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,uBAAuB,CACvB,IADuB,EAEvB,GAFuB,EAGvB,GAHuB,EAIvB,GAJuB,EAKvB,GALuB,EAMvB,GANuB,EAOvB,GAPuB,EAQvB,GARuB,EASvB,GATuB,EAUvB,IAVuB,EAWvB,IAXuB,CAA3B;;AAcA,IAAI,sBAAsB,CACtB,IADsB,EAEtB,GAFsB,EAGtB,GAHsB,EAItB,GAJsB,EAKtB,GALsB,EAMtB,GANsB,EAOtB,GAPsB,EAQtB,GARsB,EAStB,GATsB,EAUtB,GAVsB,EAWtB,GAXsB,EAYtB,GAZsB,EAatB,GAbsB,EActB,GAdsB,EAetB,GAfsB,EAgBtB,GAhBsB,EAiBtB,GAjBsB,EAkBtB,GAlBsB,EAmBtB,GAnBsB,EAoBtB,GApBsB,EAqBtB,GArBsB,EAsBtB,GAtBsB,EAuBtB,GAvBsB,EAwBtB,GAxBsB,EAyBtB,GAzBsB,EA0BtB,GA1BsB,EA2BtB,GA3BsB,EA4BtB,GA5BsB,EA6BtB,GA7BsB,EA8BtB,GA9BsB,EA+BtB,GA/BsB,CAA1B;;AAkCA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,wCADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;;;;;AAWtB,iBAAS,QAAT,CAAkB,OAAlB,EAA2B,IAA3B,EAAiC,GAAjC,EAAsC;AAClC,gBAAI,iBAAiB,QAAQ,OAAR,CAAgB,IAAI,CAAJ,EAAO,CAAP,CAAhB,MAA+B,CAAC,CAArD;AACA,gBAAI,gBAAgB,IAAI,CAAJ,EAAO,CAAP,MAAc,KAAK,GAAL,CAAS,CAAT,CAAlC;;AAEA,gBAAI,kBAAkB,CAAC,aAAvB,EAAsC;AAClC,wBAAQ,MAAR,CAAe;AACX,0BAAM,IADK;AAEX,yBAAK;AACD,8BAAM,KAAK,GAAL,CAAS,KAAT,CAAe,IADpB;AAED,gCAAQ,KAAK,GAAL,CAAS,KAAT,CAAe,MAAf,GAAwB,IAAI;AAFnC,qBAFM;AAMX,6BAAS,mCAAmC,IAAI,CAAJ;AANjC,iBAAf;AAQH;AACJ;;;;;;;;AAQD,iBAAS,KAAT,CAAe,IAAf,EAAqB;AACjB,gBAAI,WAAJ,EAAiB,KAAjB;AACA,gBAAI,UAAU,UAAd;;AAEA,gBAAI,OAAO,KAAK,KAAZ,KAAsB,QAA1B,EAAoC;;;AAGhC,oBAAI,KAAK,MAAL,CAAY,IAAZ,KAAqB,cAAzB,EAAyC;AACrC;AACH;;AAED,8BAAc,oBAAd;AACH,aARD,MAQO,IAAI,KAAK,KAAT,EAAgB;AACnB,8BAAc,mBAAd;AACH,aAFM,MAEA;AACH;AACH;;AAED,mBAAQ,QAAQ,QAAQ,IAAR,CAAa,KAAK,GAAlB,CAAhB,EAAyC;AACrC,yBAAS,WAAT,EAAsB,IAAtB,EAA4B,KAA5B;AACH;AACJ;AACD,eAAO;AACH,qBAAS;AADN,SAAP;AAGH;AArEY,CAAjB","file":"no-useless-escape-compiled.js","sourcesContent":["/**\n * @fileoverview Look for useless escapes in strings and regexes\n * @author Onur Temizkan\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nvar VALID_STRING_ESCAPES = [\n    \"\\\\\",\n    \"n\",\n    \"r\",\n    \"v\",\n    \"t\",\n    \"b\",\n    \"f\",\n    \"u\",\n    \"x\",\n    \"\\n\",\n    \"\\r\"\n];\n\nvar VALID_REGEX_ESCAPES = [\n    \"\\\\\",\n    \".\",\n    \"-\",\n    \"^\",\n    \"$\",\n    \"*\",\n    \"+\",\n    \"?\",\n    \"{\",\n    \"}\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"(\",\n    \")\",\n    \"b\",\n    \"B\",\n    \"c\",\n    \"d\",\n    \"D\",\n    \"f\",\n    \"n\",\n    \"r\",\n    \"s\",\n    \"S\",\n    \"t\",\n    \"v\",\n    \"w\",\n    \"W\",\n    \"x\",\n    \"u\"\n];\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow unnecessary escape characters\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        /**\n         * Checks if the escape character in given slice is unnecessary.\n         *\n         * @private\n         * @param {string[]} escapes - list of valid escapes\n         * @param {ASTNode} node - node to validate.\n         * @param {string} elm - string slice to validate.\n         * @returns {void}\n         */\n        function validate(escapes, node, elm) {\n            var escapeNotFound = escapes.indexOf(elm[0][1]) === -1;\n            var isQuoteEscape = elm[0][1] === node.raw[0];\n\n            if (escapeNotFound && !isQuoteEscape) {\n                context.report({\n                    node: node,\n                    loc: {\n                        line: node.loc.start.line,\n                        column: node.loc.start.column + elm.index\n                    },\n                    message: \"Unnecessary escape character: \" + elm[0]\n                });\n            }\n        }\n\n        /**\n         * Checks if a node has an escape.\n         *\n         * @param {ASTNode} node - node to check.\n         * @returns {void}\n         */\n        function check(node) {\n            var nodeEscapes, match;\n            var pattern = /\\\\[^\\d]/g;\n\n            if (typeof node.value === \"string\") {\n\n                // JSXAttribute doesn't have any escape sequence: https://facebook.github.io/jsx/\n                if (node.parent.type === \"JSXAttribute\") {\n                    return;\n                }\n\n                nodeEscapes = VALID_STRING_ESCAPES;\n            } else if (node.regex) {\n                nodeEscapes = VALID_REGEX_ESCAPES;\n            } else {\n                return;\n            }\n\n            while ((match = pattern.exec(node.raw))) {\n                validate(nodeEscapes, node, match);\n            }\n        }\n        return {\n            Literal: check\n        };\n    }\n};\n"]}