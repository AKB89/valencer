{"version":3,"sources":["no-mixed-requires.js"],"names":[],"mappings":"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","file":"no-mixed-requires-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce grouped require statements for Node.JS\n * @author Raphael Pigulla\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `require` calls to be mixed with regular `var` declarations\",\n            category: \"Node.js and CommonJS\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"boolean\"\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            grouping: {\n                                type: \"boolean\"\n                            },\n                            allowCall: {\n                                type: \"boolean\"\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var grouping = false,\n            allowCall = false,\n            options = context.options[0];\n\n        if (typeof options === \"object\") {\n            grouping = options.grouping;\n            allowCall = options.allowCall;\n        } else {\n            grouping = !!options;\n        }\n\n        /**\n         * Returns the list of built-in modules.\n         *\n         * @returns {string[]} An array of built-in Node.js modules.\n         */\n        function getBuiltinModules() {\n\n            /*\n             * This list is generated using:\n             * `require(\"repl\")._builtinLibs.concat('repl').sort()`\n             * This particular list is as per nodejs v0.12.2 and iojs v0.7.1\n             */\n            return [\n                \"assert\", \"buffer\", \"child_process\", \"cluster\", \"crypto\",\n                \"dgram\", \"dns\", \"domain\", \"events\", \"fs\", \"http\", \"https\",\n                \"net\", \"os\", \"path\", \"punycode\", \"querystring\", \"readline\",\n                \"repl\", \"smalloc\", \"stream\", \"string_decoder\", \"tls\", \"tty\",\n                \"url\", \"util\", \"v8\", \"vm\", \"zlib\"\n            ];\n        }\n\n        var BUILTIN_MODULES = getBuiltinModules();\n\n        var DECL_REQUIRE = \"require\",\n            DECL_UNINITIALIZED = \"uninitialized\",\n            DECL_OTHER = \"other\";\n\n        var REQ_CORE = \"core\",\n            REQ_FILE = \"file\",\n            REQ_MODULE = \"module\",\n            REQ_COMPUTED = \"computed\";\n\n        /**\n         * Determines the type of a declaration statement.\n         * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n         * @returns {string} The type of declaration represented by the expression.\n         */\n        function getDeclarationType(initExpression) {\n            if (!initExpression) {\n\n                // \"var x;\"\n                return DECL_UNINITIALIZED;\n            }\n\n            if (initExpression.type === \"CallExpression\" &&\n                initExpression.callee.type === \"Identifier\" &&\n                initExpression.callee.name === \"require\"\n            ) {\n\n                // \"var x = require('util');\"\n                return DECL_REQUIRE;\n            } else if (allowCall &&\n                initExpression.type === \"CallExpression\" &&\n                initExpression.callee.type === \"CallExpression\"\n            ) {\n\n                // \"var x = require('diagnose')('sub-module');\"\n                return getDeclarationType(initExpression.callee);\n            } else if (initExpression.type === \"MemberExpression\") {\n\n                // \"var x = require('glob').Glob;\"\n                return getDeclarationType(initExpression.object);\n            }\n\n            // \"var x = 42;\"\n            return DECL_OTHER;\n        }\n\n        /**\n         * Determines the type of module that is loaded via require.\n         * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n         * @returns {string} The module type.\n         */\n        function inferModuleType(initExpression) {\n            if (initExpression.type === \"MemberExpression\") {\n\n                // \"var x = require('glob').Glob;\"\n                return inferModuleType(initExpression.object);\n            } else if (initExpression.arguments.length === 0) {\n\n                // \"var x = require();\"\n                return REQ_COMPUTED;\n            }\n\n            var arg = initExpression.arguments[0];\n\n            if (arg.type !== \"Literal\" || typeof arg.value !== \"string\") {\n\n                // \"var x = require(42);\"\n                return REQ_COMPUTED;\n            }\n\n            if (BUILTIN_MODULES.indexOf(arg.value) !== -1) {\n\n                // \"var fs = require('fs');\"\n                return REQ_CORE;\n            } else if (/^\\.{0,2}\\//.test(arg.value)) {\n\n                // \"var utils = require('./utils');\"\n                return REQ_FILE;\n            } else {\n\n                // \"var async = require('async');\"\n                return REQ_MODULE;\n            }\n        }\n\n        /**\n         * Check if the list of variable declarations is mixed, i.e. whether it\n         * contains both require and other declarations.\n         * @param {ASTNode} declarations The list of VariableDeclarators.\n         * @returns {boolean} True if the declarations are mixed, false if not.\n         */\n        function isMixed(declarations) {\n            var contains = {};\n\n            declarations.forEach(function(declaration) {\n                var type = getDeclarationType(declaration.init);\n\n                contains[type] = true;\n            });\n\n            return !!(\n                contains[DECL_REQUIRE] &&\n                (contains[DECL_UNINITIALIZED] || contains[DECL_OTHER])\n            );\n        }\n\n        /**\n         * Check if all require declarations in the given list are of the same\n         * type.\n         * @param {ASTNode} declarations The list of VariableDeclarators.\n         * @returns {boolean} True if the declarations are grouped, false if not.\n         */\n        function isGrouped(declarations) {\n            var found = {};\n\n            declarations.forEach(function(declaration) {\n                if (getDeclarationType(declaration.init) === DECL_REQUIRE) {\n                    found[inferModuleType(declaration.init)] = true;\n                }\n            });\n\n            return Object.keys(found).length <= 1;\n        }\n\n\n        return {\n\n            VariableDeclaration: function(node) {\n\n                if (isMixed(node.declarations)) {\n                    context.report(\n                        node,\n                        \"Do not mix 'require' and other declarations.\"\n                    );\n                } else if (grouping && !isGrouped(node.declarations)) {\n                    context.report(\n                        node,\n                        \"Do not mix core, module, file and computed requires.\"\n                    );\n                }\n            }\n        };\n\n    }\n};\n"]}