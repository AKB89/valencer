{"version":3,"sources":["no-loop-func.js"],"names":[],"mappings":"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","file":"no-loop-func-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag creation of function inside a loop\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the containing loop node of a specified node.\n *\n * We don't need to check nested functions, so this ignores those.\n * `Scope.through` contains references of nested functions.\n *\n * @param {ASTNode} node - An AST node to get.\n * @returns {ASTNode|null} The containing loop node of the specified node, or\n *      `null`.\n */\nfunction getContainingLoopNode(node) {\n    var parent = node.parent;\n\n    while (parent) {\n        switch (parent.type) {\n            case \"WhileStatement\":\n            case \"DoWhileStatement\":\n                return parent;\n\n            case \"ForStatement\":\n\n                // `init` is outside of the loop.\n                if (parent.init !== node) {\n                    return parent;\n                }\n                break;\n\n            case \"ForInStatement\":\n            case \"ForOfStatement\":\n\n                // `right` is outside of the loop.\n                if (parent.right !== node) {\n                    return parent;\n                }\n                break;\n\n            case \"ArrowFunctionExpression\":\n            case \"FunctionExpression\":\n            case \"FunctionDeclaration\":\n\n                // We don't need to check nested functions.\n                return null;\n\n            default:\n                break;\n        }\n\n        node = parent;\n        parent = node.parent;\n    }\n\n    return null;\n}\n\n/**\n * Gets the containing loop node of a given node.\n * If the loop was nested, this returns the most outer loop.\n *\n * @param {ASTNode} node - A node to get. This is a loop node.\n * @param {ASTNode|null} excludedNode - A node that the result node should not\n *      include.\n * @returns {ASTNode} The most outer loop node.\n */\nfunction getTopLoopNode(node, excludedNode) {\n    var retv = node;\n    var border = excludedNode ? excludedNode.range[1] : 0;\n\n    while (node && node.range[0] >= border) {\n        retv = node;\n        node = getContainingLoopNode(node);\n    }\n\n    return retv;\n}\n\n/**\n * Checks whether a given reference which refers to an upper scope's variable is\n * safe or not.\n *\n * @param {ASTNode} funcNode - A target function node.\n * @param {ASTNode} loopNode - A containing loop node.\n * @param {escope.Reference} reference - A reference to check.\n * @returns {boolean} `true` if the reference is safe or not.\n */\nfunction isSafe(funcNode, loopNode, reference) {\n    var variable = reference.resolved;\n    var definition = variable && variable.defs[0];\n    var declaration = definition && definition.parent;\n    var kind = (declaration && declaration.type === \"VariableDeclaration\")\n        ? declaration.kind\n        : \"\";\n\n    // Variables which are declared by `const` is safe.\n    if (kind === \"const\") {\n        return true;\n    }\n\n    // Variables which are declared by `let` in the loop is safe.\n    // It's a different instance from the next loop step's.\n    if (kind === \"let\" &&\n        declaration.range[0] > loopNode.range[0] &&\n        declaration.range[1] < loopNode.range[1]\n    ) {\n        return true;\n    }\n\n    // WriteReferences which exist after this border are unsafe because those\n    // can modify the variable.\n    var border = getTopLoopNode(\n        loopNode,\n        (kind === \"let\") ? declaration : null\n    ).range[0];\n\n    /**\n     * Checks whether a given reference is safe or not.\n     * The reference is every reference of the upper scope's variable we are\n     * looking now.\n     *\n     * It's safeafe if the reference matches one of the following condition.\n     * - is readonly.\n     * - doesn't exist inside a local function and after the border.\n     *\n     * @param {escope.Reference} upperRef - A reference to check.\n     * @returns {boolean} `true` if the reference is safe.\n     */\n    function isSafeReference(upperRef) {\n        var id = upperRef.identifier;\n\n        return (\n            !upperRef.isWrite() ||\n            variable.scope.variableScope === upperRef.from.variableScope &&\n            id.range[0] < border\n        );\n    }\n\n    return Boolean(variable) && variable.references.every(isSafeReference);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `function` declarations and expressions inside loop statements\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        /**\n         * Reports functions which match the following condition:\n         *\n         * - has a loop node in ancestors.\n         * - has any references which refers to an unsafe variable.\n         *\n         * @param {ASTNode} node The AST node to check.\n         * @returns {boolean} Whether or not the node is within a loop.\n         */\n        function checkForLoops(node) {\n            var loopNode = getContainingLoopNode(node);\n\n            if (!loopNode) {\n                return;\n            }\n\n            var references = context.getScope().through;\n\n            if (references.length > 0 &&\n                !references.every(isSafe.bind(null, node, loopNode))\n            ) {\n                context.report(node, \"Don't make functions within a loop\");\n            }\n        }\n\n        return {\n            ArrowFunctionExpression: checkForLoops,\n            FunctionExpression: checkForLoops,\n            FunctionDeclaration: checkForLoops\n        };\n    }\n};\n"]}