{"version":3,"sources":["no-unused-labels.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,wBADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,YAAY,IAAhB;;;;;;;;AAQA,iBAAS,iBAAT,CAA2B,IAA3B,EAAiC;AAC7B,wBAAY;AACR,uBAAO,KAAK,KAAL,CAAW,IADV;AAER,sBAAM,KAFE;AAGR,uBAAO;AAHC,aAAZ;AAKH;;;;;;;;;AASD,iBAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC5B,gBAAI,CAAC,UAAU,IAAf,EAAqB;AACjB,wBAAQ,MAAR,CAAe;AACX,0BAAM,KAAK,KADA;AAEX,6BAAS,wCAFE;AAGX,0BAAM,KAAK;AAHA,iBAAf;AAKH;;AAED,wBAAY,UAAU,KAAtB;AACH;;;;;;;;;AASD,iBAAS,UAAT,CAAoB,IAApB,EAA0B;AACtB,gBAAI,CAAC,KAAK,KAAV,EAAiB;AACb;AACH;;AAED,gBAAI,QAAQ,KAAK,KAAL,CAAW,IAAvB;AACA,gBAAI,OAAO,SAAX;;AAEA,mBAAO,IAAP,EAAa;AACT,oBAAI,KAAK,KAAL,KAAe,KAAnB,EAA0B;AACtB,yBAAK,IAAL,GAAY,IAAZ;AACA;AACH;AACD,uBAAO,KAAK,KAAZ;AACH;AACJ;;AAED,eAAO;AACH,8BAAkB,iBADf;AAEH,qCAAyB,gBAFtB;AAGH,4BAAgB,UAHb;AAIH,+BAAmB;AAJhB,SAAP;AAMH;AA7EY,CAAjB","file":"no-unused-labels-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to disallow unused labels.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow unused labels\",\n            category: \"Best Practices\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var scopeInfo = null;\n\n        /**\n         * Adds a scope info to the stack.\n         *\n         * @param {ASTNode} node - A node to add. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function enterLabeledScope(node) {\n            scopeInfo = {\n                label: node.label.name,\n                used: false,\n                upper: scopeInfo\n            };\n        }\n\n        /**\n         * Removes the top of the stack.\n         * At the same time, this reports the label if it's never used.\n         *\n         * @param {ASTNode} node - A node to report. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function exitLabeledScope(node) {\n            if (!scopeInfo.used) {\n                context.report({\n                    node: node.label,\n                    message: \"'{{name}}:' is defined but never used.\",\n                    data: node.label\n                });\n            }\n\n            scopeInfo = scopeInfo.upper;\n        }\n\n        /**\n         * Marks the label of a given node as used.\n         *\n         * @param {ASTNode} node - A node to mark. This is a BreakStatement or\n         *      ContinueStatement.\n         * @returns {void}\n         */\n        function markAsUsed(node) {\n            if (!node.label) {\n                return;\n            }\n\n            var label = node.label.name;\n            var info = scopeInfo;\n\n            while (info) {\n                if (info.label === label) {\n                    info.used = true;\n                    break;\n                }\n                info = info.upper;\n            }\n        }\n\n        return {\n            LabeledStatement: enterLabeledScope,\n            \"LabeledStatement:exit\": exitLabeledScope,\n            BreakStatement: markAsUsed,\n            ContinueStatement: markAsUsed\n        };\n    }\n};\n"]}