{"version":3,"sources":["no-extra-semi.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,iCADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,iBAAS,MAPP;AAQF,gBAAQ;AARN,KADO;;AAYb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,aAAa,QAAQ,aAAR,EAAjB;;;;;;;AAOA,iBAAS,MAAT,CAAgB,WAAhB,EAA6B;AACzB,oBAAQ,MAAR,CAAe;AACX,sBAAM,WADK;AAEX,yBAAS,wBAFE;AAGX,qBAAK,UAAS,KAAT,EAAgB;AACjB,2BAAO,MAAM,MAAN,CAAa,WAAb,CAAP;AACH;AALU,aAAf;AAOH;;;;;;;;;AASD,iBAAS,uBAAT,CAAiC,UAAjC,EAA6C;AACzC,iBAAK,IAAI,QAAQ,UAAjB,EACI,MAAM,IAAN,KAAe,YAAf,IAA+B,MAAM,KAAN,KAAgB,GADnD,EAEI,QAAQ,WAAW,aAAX,CAAyB,KAAzB,CAFZ,EAGE;AACE,oBAAI,MAAM,KAAN,KAAgB,GAApB,EAAyB;AACrB,2BAAO,KAAP;AACH;AACJ;AACJ;;AAED,eAAO;;;;;;;AAOH,4BAAgB,UAAS,IAAT,EAAe;AAC3B,oBAAI,SAAS,KAAK,MAAlB;oBACI,qBAAqB,CAAC,cAAD,EAAiB,gBAAjB,EAAmC,gBAAnC,EAAqD,gBAArD,EAAuE,kBAAvE,CADzB;;AAGA,oBAAI,mBAAmB,OAAnB,CAA2B,OAAO,IAAlC,MAA4C,CAAC,CAAjD,EAAoD;AAChD,2BAAO,IAAP;AACH;AACJ,aAdE;;;;;;;AAqBH,uBAAW,UAAS,IAAT,EAAe;AACtB,wCAAwB,WAAW,aAAX,CAAyB,IAAzB,EAA+B,CAA/B,CAAxB,E;AACH,aAvBE;;;;;;;AA8BH,8BAAkB,UAAS,IAAT,EAAe;AAC7B,wCAAwB,WAAW,aAAX,CAAyB,IAAzB,CAAxB;AACH;AAhCE,SAAP;AAmCH;AAnFY,CAAjB","file":"no-extra-semi-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of unnecessary semicolons\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow unnecessary semicolons\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        fixable: \"code\",\n        schema: []\n    },\n\n    create: function(context) {\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Reports an unnecessary semicolon error.\n         * @param {Node|Token} nodeOrToken - A node or a token to be reported.\n         * @returns {void}\n         */\n        function report(nodeOrToken) {\n            context.report({\n                node: nodeOrToken,\n                message: \"Unnecessary semicolon.\",\n                fix: function(fixer) {\n                    return fixer.remove(nodeOrToken);\n                }\n            });\n        }\n\n        /**\n         * Checks for a part of a class body.\n         * This checks tokens from a specified token to a next MethodDefinition or the end of class body.\n         *\n         * @param {Token} firstToken - The first token to check.\n         * @returns {void}\n         */\n        function checkForPartOfClassBody(firstToken) {\n            for (var token = firstToken;\n                token.type === \"Punctuator\" && token.value !== \"}\";\n                token = sourceCode.getTokenAfter(token)\n            ) {\n                if (token.value === \";\") {\n                    report(token);\n                }\n            }\n        }\n\n        return {\n\n            /**\n             * Reports this empty statement, except if the parent node is a loop.\n             * @param {Node} node - A EmptyStatement node to be reported.\n             * @returns {void}\n             */\n            EmptyStatement: function(node) {\n                var parent = node.parent,\n                    allowedParentTypes = [\"ForStatement\", \"ForInStatement\", \"ForOfStatement\", \"WhileStatement\", \"DoWhileStatement\"];\n\n                if (allowedParentTypes.indexOf(parent.type) === -1) {\n                    report(node);\n                }\n            },\n\n            /**\n             * Checks tokens from the head of this class body to the first MethodDefinition or the end of this class body.\n             * @param {Node} node - A ClassBody node to check.\n             * @returns {void}\n             */\n            ClassBody: function(node) {\n                checkForPartOfClassBody(sourceCode.getFirstToken(node, 1)); // 0 is `{`.\n            },\n\n            /**\n             * Checks tokens from this MethodDefinition to the next MethodDefinition or the end of this class body.\n             * @param {Node} node - A MethodDefinition node of the start point.\n             * @returns {void}\n             */\n            MethodDefinition: function(node) {\n                checkForPartOfClassBody(sourceCode.getTokenAfter(node));\n            }\n        };\n\n    }\n};\n"]}