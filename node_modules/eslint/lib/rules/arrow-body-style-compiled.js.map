{"version":3,"sources":["arrow-body-style.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,6CADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,CAAC,QAAD,EAAW,WAAX;AADV,SADI;AAPN,KADO;;AAeb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,MAAuB,QAApC;AACA,YAAI,WAAW,CAAC,QAAQ,OAAR,CAAgB,CAAhB,CAAD,IAAuB,QAAQ,OAAR,CAAgB,CAAhB,MAAuB,WAA7D;;;;;;;AAOA,iBAAS,QAAT,CAAkB,IAAlB,EAAwB;AACpB,gBAAI,YAAY,KAAK,IAArB;;AAEA,gBAAI,UAAU,IAAV,KAAmB,gBAAvB,EAAyC;AACrC,oBAAI,YAAY,UAAU,IAA1B;;AAEA,oBAAI,UAAU,MAAV,KAAqB,CAAzB,EAA4B;AACxB;AACH;;AAED,oBAAI,YAAY,UAAU,CAAV,EAAa,IAAb,KAAsB,iBAAtC,EAAyD;AACrD,4BAAQ,MAAR,CAAe;AACX,8BAAM,IADK;AAEX,6BAAK,UAAU,GAAV,CAAc,KAFR;AAGX,iCAAS;AAHE,qBAAf;AAKH;AACJ,aAdD,MAcO;AACH,oBAAI,MAAJ,EAAY;AACR,4BAAQ,MAAR,CAAe;AACX,8BAAM,IADK;AAEX,6BAAK,UAAU,GAAV,CAAc,KAFR;AAGX,iCAAS;AAHE,qBAAf;AAKH;AACJ;AACJ;;AAED,eAAO;AACH,qCAAyB;AADtB,SAAP;AAGH;AAvDY,CAAjB","file":"arrow-body-style-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to require braces in arrow function body.\n * @author Alberto Rodr√≠guez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require braces around arrow function bodies\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                enum: [\"always\", \"as-needed\"]\n            }\n        ]\n    },\n\n    create: function(context) {\n        var always = context.options[0] === \"always\";\n        var asNeeded = !context.options[0] || context.options[0] === \"as-needed\";\n\n        /**\n         * Determines whether a arrow function body needs braces\n         * @param {ASTNode} node The arrow function node.\n         * @returns {void}\n         */\n        function validate(node) {\n            var arrowBody = node.body;\n\n            if (arrowBody.type === \"BlockStatement\") {\n                var blockBody = arrowBody.body;\n\n                if (blockBody.length !== 1) {\n                    return;\n                }\n\n                if (asNeeded && blockBody[0].type === \"ReturnStatement\") {\n                    context.report({\n                        node: node,\n                        loc: arrowBody.loc.start,\n                        message: \"Unexpected block statement surrounding arrow body.\"\n                    });\n                }\n            } else {\n                if (always) {\n                    context.report({\n                        node: node,\n                        loc: arrowBody.loc.start,\n                        message: \"Expected block statement surrounding arrow body.\"\n                    });\n                }\n            }\n        }\n\n        return {\n            ArrowFunctionExpression: validate\n        };\n    }\n};\n"]}