{"version":3,"sources":["arrow-parens.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,qDADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,CAAC,QAAD,EAAW,WAAX;AADV,SADI;AAPN,KADO;;AAeb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,UAAU,sDAAd;AACA,YAAI,kBAAkB,wDAAtB;AACA,YAAI,WAAW,QAAQ,OAAR,CAAgB,CAAhB,MAAuB,WAAtC;;AAEA,YAAI,aAAa,QAAQ,aAAR,EAAjB;;;;;;;AAOA,iBAAS,MAAT,CAAgB,IAAhB,EAAsB;AAClB,gBAAI,QAAQ,WAAW,aAAX,CAAyB,IAAzB,CAAZ;;;AAGA,gBAAI,YAAY,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAAnC,IAAwC,KAAK,MAAL,CAAY,CAAZ,EAAe,IAAf,KAAwB,YAApE,EAAkF;AAC9E,oBAAI,MAAM,IAAN,KAAe,YAAf,IAA+B,MAAM,KAAN,KAAgB,GAAnD,EAAwD;AACpD,4BAAQ,MAAR,CAAe,IAAf,EAAqB,eAArB;AACH;AACD;AACH;;AAED,gBAAI,MAAM,IAAN,KAAe,YAAnB,EAAiC;AAC7B,oBAAI,QAAQ,WAAW,aAAX,CAAyB,KAAzB,CAAZ;;;AAGA,oBAAI,MAAM,KAAN,KAAgB,GAApB,EAAyB;AACrB,4BAAQ,MAAR,CAAe,IAAf,EAAqB,OAArB;AACH;AACJ;AACJ;;AAED,eAAO;AACH,qCAAyB;AADtB,SAAP;AAGH;AAnDY,CAAjB","file":"arrow-parens-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to require parens in arrow function arguments.\n * @author Jxck\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require parentheses around arrow function arguments\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                enum: [\"always\", \"as-needed\"]\n            }\n        ]\n    },\n\n    create: function(context) {\n        var message = \"Expected parentheses around arrow function argument.\";\n        var asNeededMessage = \"Unexpected parentheses around single function argument\";\n        var asNeeded = context.options[0] === \"as-needed\";\n\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether a arrow function argument end with `)`\n         * @param {ASTNode} node The arrow function node.\n         * @returns {void}\n         */\n        function parens(node) {\n            var token = sourceCode.getFirstToken(node);\n\n            // as-needed: x => x\n            if (asNeeded && node.params.length === 1 && node.params[0].type === \"Identifier\") {\n                if (token.type === \"Punctuator\" && token.value === \"(\") {\n                    context.report(node, asNeededMessage);\n                }\n                return;\n            }\n\n            if (token.type === \"Identifier\") {\n                var after = sourceCode.getTokenAfter(token);\n\n                // (x) => x\n                if (after.value !== \")\") {\n                    context.report(node, message);\n                }\n            }\n        }\n\n        return {\n            ArrowFunctionExpression: parens\n        };\n    }\n};\n"]}