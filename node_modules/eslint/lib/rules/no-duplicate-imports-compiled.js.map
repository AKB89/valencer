{"version":3,"sources":["no-duplicate-imports.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;AAYA,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AACpB,QAAI,QAAQ,KAAK,MAAb,IAAuB,KAAK,MAAL,CAAY,KAAvC,EAA8C;AAC1C,eAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAP;AACH;;AAED,WAAO,EAAP;AACH;;;;;;;;;;;;;AAaD,SAAS,cAAT,CAAwB,OAAxB,EAAiC,IAAjC,EAAuC,KAAvC,EAA8C,KAA9C,EAAqD,OAArD,EAA8D;AAC1D,QAAI,MAAM,OAAN,CAAc,KAAd,MAAyB,CAAC,CAA9B,EAAiC;AAC7B,gBAAQ,MAAR,CAAe;AACX,kBAAM,IADK;AAEX,qBAAS,kBAAkB,OAFhB;AAGX,kBAAM,EAAC,QAAQ,KAAT;AAHK,SAAf;AAKH;AACJ;;;;;;;;;;;;;;;;;AAiBD,SAAS,aAAT,CAAuB,OAAvB,EAAgC,cAAhC,EAAgD,aAAhD,EAA+D,aAA/D,EAA8E;AAC1E,WAAO,UAAS,IAAT,EAAe;AAClB,YAAI,QAAQ,SAAS,IAAT,CAAZ;;AAEA,YAAI,KAAJ,EAAW;AACP,2BAAe,OAAf,EAAwB,IAAxB,EAA8B,KAA9B,EAAqC,aAArC,EAAoD,uBAApD;;AAEA,gBAAI,cAAJ,EAAoB;AAChB,+BAAe,OAAf,EAAwB,IAAxB,EAA8B,KAA9B,EAAqC,aAArC,EAAoD,iCAApD;AACH;;AAED,0BAAc,IAAd,CAAmB,KAAnB;AACH;AACJ,KAZD;AAaH;;;;;;;;;;;AAWD,SAAS,aAAT,CAAuB,OAAvB,EAAgC,aAAhC,EAA+C,aAA/C,EAA8D;AAC1D,WAAO,UAAS,IAAT,EAAe;AAClB,YAAI,QAAQ,SAAS,IAAT,CAAZ;;AAEA,YAAI,KAAJ,EAAW;AACP,2BAAe,OAAf,EAAwB,IAAxB,EAA8B,KAA9B,EAAqC,aAArC,EAAoD,uBAApD;AACA,2BAAe,OAAf,EAAwB,IAAxB,EAA8B,KAA9B,EAAqC,aAArC,EAAoD,iCAApD;;AAEA,0BAAc,IAAd,CAAmB,KAAnB;AACH;AACJ,KATD;AAUH;;AAED,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,mCADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CAAC;AACL,kBAAM,QADD;AAEL,wBAAY;AACR,gCAAgB;AACZ,0BAAM;AADM;AADR,aAFP;AAOL,kCAAsB;AAPjB,SAAD;AAPN,KADO;;AAmBb,YAAQ,gBAAS,OAAT,EAAkB;AACtB,YAAI,iBAAiB,CAAC,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,EAAvB,EAA2B,cAAhD;YACI,gBAAgB,EADpB;YAEI,gBAAgB,EAFpB;;AAIA,YAAI,WAAW;AACX,+BAAmB,cAAc,OAAd,EAAuB,cAAvB,EAAuC,aAAvC,EAAsD,aAAtD;AADR,SAAf;;AAIA,YAAI,cAAJ,EAAoB;AAChB,qBAAS,sBAAT,GAAkC,cAAc,OAAd,EAAuB,aAAvB,EAAsC,aAAtC,CAAlC;AACA,qBAAS,oBAAT,GAAgC,cAAc,OAAd,EAAuB,aAAvB,EAAsC,aAAtC,CAAhC;AACH;;AAED,eAAO,QAAP;AACH;AAlCY,CAAjB","file":"no-duplicate-imports-compiled.js","sourcesContent":["/**\n * @fileoverview Restrict usage of duplicate imports.\n * @author Simen Bekkhus\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/**\n * Returns the name of the module imported or re-exported.\n *\n * @param {ASTNode} node - A node to get.\n * @returns {string} the name of the module, or empty string if no name.\n */\nfunction getValue(node) {\n    if (node && node.source && node.source.value) {\n        return node.source.value.trim();\n    }\n\n    return \"\";\n}\n\n/**\n * Checks if the name of the import or export exists in the given array, and reports if so.\n *\n * @param {RuleContext} context - The ESLint rule context object.\n * @param {ASTNode} node - A node to get.\n * @param {string} value - The name of the imported or exported module.\n * @param {string[]} array - The array containing other imports or exports in the file.\n * @param {string} message - A message to be reported after the name of the module\n *\n * @returns {void} No return value\n */\nfunction checkAndReport(context, node, value, array, message) {\n    if (array.indexOf(value) !== -1) {\n        context.report({\n            node: node,\n            message: \"'{{module}}' \" + message,\n            data: {module: value}\n        });\n    }\n}\n\n/**\n * @callback nodeCallback\n * @param {ASTNode} node - A node to handle.\n */\n\n/**\n * Returns a function handling the imports of a given file\n *\n * @param {RuleContext} context - The ESLint rule context object.\n * @param {boolean} includeExports - Whether or not to check for exports in addition to imports.\n * @param {string[]} importsInFile - The array containing other imports in the file.\n * @param {string[]} exportsInFile - The array containing other exports in the file.\n *\n * @returns {nodeCallback} A function passed to ESLint to handle the statement.\n */\nfunction handleImports(context, includeExports, importsInFile, exportsInFile) {\n    return function(node) {\n        var value = getValue(node);\n\n        if (value) {\n            checkAndReport(context, node, value, importsInFile, \"import is duplicated.\");\n\n            if (includeExports) {\n                checkAndReport(context, node, value, exportsInFile, \"import is duplicated as export.\");\n            }\n\n            importsInFile.push(value);\n        }\n    };\n}\n\n/**\n * Returns a function handling the exports of a given file\n *\n * @param {RuleContext} context - The ESLint rule context object.\n * @param {string[]} importsInFile - The array containing other imports in the file.\n * @param {string[]} exportsInFile - The array containing other exports in the file.\n *\n * @returns {nodeCallback} A function passed to ESLint to handle the statement.\n */\nfunction handleExports(context, importsInFile, exportsInFile) {\n    return function(node) {\n        var value = getValue(node);\n\n        if (value) {\n            checkAndReport(context, node, value, exportsInFile, \"export is duplicated.\");\n            checkAndReport(context, node, value, importsInFile, \"export is duplicated as import.\");\n\n            exportsInFile.push(value);\n        }\n    };\n}\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow duplicate module imports\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                includeExports: {\n                    type: \"boolean\"\n                }\n            },\n            additionalProperties: false\n        }]\n    },\n\n    create: function(context) {\n        var includeExports = (context.options[0] || {}).includeExports,\n            importsInFile = [],\n            exportsInFile = [];\n\n        var handlers = {\n            ImportDeclaration: handleImports(context, includeExports, importsInFile, exportsInFile)\n        };\n\n        if (includeExports) {\n            handlers.ExportNamedDeclaration = handleExports(context, importsInFile, exportsInFile);\n            handlers.ExportAllDeclaration = handleExports(context, importsInFile, exportsInFile);\n        }\n\n        return handlers;\n    }\n};\n"]}