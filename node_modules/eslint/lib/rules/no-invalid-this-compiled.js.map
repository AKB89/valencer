{"version":3,"sources":["no-invalid-this.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,mEADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,QAAQ,EAAZ;YACI,aAAa,QAAQ,aAAR,EADjB;;;;;;;;;;;AAYA,cAAM,UAAN,GAAmB,YAAW;AAC1B,gBAAI,UAAU,KAAK,KAAK,MAAL,GAAc,CAAnB,CAAd;;AAEA,gBAAI,CAAC,QAAQ,IAAb,EAAmB;AACf,wBAAQ,IAAR,GAAe,IAAf;AACA,wBAAQ,KAAR,GAAgB,CAAC,SAAS,oBAAT,CACb,QAAQ,IADK,EAEb,UAFa,CAAjB;AAGH;AACD,mBAAO,OAAP;AACH,SAVD;;;;;;;;;;;;AAsBA,iBAAS,aAAT,CAAuB,IAAvB,EAA6B;;;AAGzB,kBAAM,IAAN,CAAW;AACP,sBAAM,CAAC,QAAQ,QAAR,GAAmB,QADnB;AAEP,sBAAM,IAFC;AAGP,uBAAO;AAHA,aAAX;AAKH;;;;;;AAMD,iBAAS,YAAT,GAAwB;AACpB,kBAAM,GAAN;AACH;;AAED,eAAO;;;;;;AAMH,qBAAS,UAAS,IAAT,EAAe;AACpB,oBAAI,QAAQ,QAAQ,QAAR,EAAZ;oBACI,WAAW,QAAQ,aAAR,CAAsB,YAAtB,IAAsC,EADrD;;AAGA,sBAAM,IAAN,CAAW;AACP,0BAAM,IADC;AAEP,0BAAM,IAFC;AAGP,2BAAO,EACH,MAAM,QAAN,IACA,KAAK,UAAL,KAAoB,QADpB,IAEC,SAAS,YAAT,IAAyB,MAAM,WAAN,CAAkB,CAAlB,EAAqB,QAH5C;AAHA,iBAAX;AASH,aAnBE;;AAqBH,4BAAgB,YAAW;AACvB,sBAAM,GAAN;AACH,aAvBE;;AAyBH,iCAAqB,aAzBlB;AA0BH,wCAA4B,YA1BzB;AA2BH,gCAAoB,aA3BjB;AA4BH,uCAA2B,YA5BxB;;;AA+BH,4BAAgB,UAAS,IAAT,EAAe;AAC3B,oBAAI,UAAU,MAAM,UAAN,EAAd;;AAEA,oBAAI,WAAW,CAAC,QAAQ,KAAxB,EAA+B;AAC3B,4BAAQ,MAAR,CAAe,IAAf,EAAqB,oBAArB;AACH;AACJ;AArCE,SAAP;AAuCH;AAvGY,CAAjB","file":"no-invalid-this-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to disallow `this` keywords outside of classes or class-like objects.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `this` keywords outside of classes or class-like objects\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var stack = [],\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Gets the current checking context.\n         *\n         * The return value has a flag that whether or not `this` keyword is valid.\n         * The flag is initialized when got at the first time.\n         *\n         * @returns {{valid: boolean}}\n         *   an object which has a flag that whether or not `this` keyword is valid.\n         */\n        stack.getCurrent = function() {\n            var current = this[this.length - 1];\n\n            if (!current.init) {\n                current.init = true;\n                current.valid = !astUtils.isDefaultThisBinding(\n                    current.node,\n                    sourceCode);\n            }\n            return current;\n        };\n\n        /**\n         * Pushs new checking context into the stack.\n         *\n         * The checking context is not initialized yet.\n         * Because most functions don't have `this` keyword.\n         * When `this` keyword was found, the checking context is initialized.\n         *\n         * @param {ASTNode} node - A function node that was entered.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n\n            // `this` can be invalid only under strict mode.\n            stack.push({\n                init: !context.getScope().isStrict,\n                node: node,\n                valid: true\n            });\n        }\n\n        /**\n         * Pops the current checking context from the stack.\n         * @returns {void}\n         */\n        function exitFunction() {\n            stack.pop();\n        }\n\n        return {\n\n            /*\n             * `this` is invalid only under strict mode.\n             * Modules is always strict mode.\n             */\n            Program: function(node) {\n                var scope = context.getScope(),\n                    features = context.parserOptions.ecmaFeatures || {};\n\n                stack.push({\n                    init: true,\n                    node: node,\n                    valid: !(\n                        scope.isStrict ||\n                        node.sourceType === \"module\" ||\n                        (features.globalReturn && scope.childScopes[0].isStrict)\n                    )\n                });\n            },\n\n            \"Program:exit\": function() {\n                stack.pop();\n            },\n\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n\n            // Reports if `this` of the current context is invalid.\n            ThisExpression: function(node) {\n                var current = stack.getCurrent();\n\n                if (current && !current.valid) {\n                    context.report(node, \"Unexpected 'this'.\");\n                }\n            }\n        };\n    }\n};\n"]}