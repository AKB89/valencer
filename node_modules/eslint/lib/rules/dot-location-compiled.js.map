{"version":3,"sources":["dot-location.js"],"names":[],"mappings":";;;;;AAKA;;AAEA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,mDADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,CAAC,QAAD,EAAW,UAAX;AADV,SADI;AAPN,KADO;;AAeb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,CAAb;;;AAGA,YAAI,WAAW,WAAW,QAAX,IAAuB,CAAC,MAAvC;;AAEA,YAAI,aAAa,QAAQ,aAAR,EAAjB;;;;;;;;;AASA,iBAAS,gBAAT,CAA0B,GAA1B,EAA+B,IAA/B,EAAqC,IAArC,EAA2C;AACvC,gBAAI,MAAM,WAAW,cAAX,CAA0B,IAA1B,CAAV;;AAEA,gBAAI,IAAI,IAAJ,KAAa,YAAb,IAA6B,IAAI,KAAJ,KAAc,GAA/C,EAAoD;AAChD,oBAAI,QAAJ,EAAc;AACV,wBAAI,CAAC,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,GAAhC,CAAL,EAA2C;AACvC,gCAAQ,MAAR,CAAe,IAAf,EAAqB,IAAI,GAAJ,CAAQ,KAA7B,EAAoC,4CAApC;AACH;AACJ,iBAJD,MAIO,IAAI,CAAC,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,IAAhC,CAAL,EAA4C;AAC/C,4BAAQ,MAAR,CAAe,IAAf,EAAqB,IAAI,GAAJ,CAAQ,KAA7B,EAAoC,8CAApC;AACH;AACJ;AACJ;;;;;;;AAOD,iBAAS,SAAT,CAAmB,IAAnB,EAAyB;AACrB,6BAAiB,KAAK,MAAtB,EAA8B,KAAK,QAAnC,EAA6C,IAA7C;AACH;;AAED,eAAO;AACH,8BAAkB;AADf,SAAP;AAGH;AAzDY,CAAjB","file":"dot-location-compiled.js","sourcesContent":["/**\n * @fileoverview Validates newlines before and after dots\n * @author Greg Cochard\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent newlines before and after dots\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                enum: [\"object\", \"property\"]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var config = context.options[0];\n\n        // default to onObject if no preference is passed\n        var onObject = config === \"object\" || !config;\n\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Reports if the dot between object and property is on the correct loccation.\n         * @param {ASTNode} obj The object owning the property.\n         * @param {ASTNode} prop The property of the object.\n         * @param {ASTNode} node The corresponding node of the token.\n         * @returns {void}\n         */\n        function checkDotLocation(obj, prop, node) {\n            var dot = sourceCode.getTokenBefore(prop);\n\n            if (dot.type === \"Punctuator\" && dot.value === \".\") {\n                if (onObject) {\n                    if (!astUtils.isTokenOnSameLine(obj, dot)) {\n                        context.report(node, dot.loc.start, \"Expected dot to be on same line as object.\");\n                    }\n                } else if (!astUtils.isTokenOnSameLine(dot, prop)) {\n                    context.report(node, dot.loc.start, \"Expected dot to be on same line as property.\");\n                }\n            }\n        }\n\n        /**\n         * Checks the spacing of the dot within a member expression.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkNode(node) {\n            checkDotLocation(node.object, node.property, node);\n        }\n\n        return {\n            MemberExpression: checkNode\n        };\n    }\n};\n"]}