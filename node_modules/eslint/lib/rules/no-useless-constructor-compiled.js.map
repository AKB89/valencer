{"version":3,"sources":["no-useless-constructor.js"],"names":[],"mappings":"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","file":"no-useless-constructor-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag the use of redundant constructors in classes.\n * @author Alberto Rodr√≠guez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether a given array of statements is a single call of `super`.\n *\n * @param {ASTNode[]} body - An array of statements to check.\n * @returns {boolean} `true` if the body is a single call of `super`.\n */\nfunction isSingleSuperCall(body) {\n    return (\n        body.length === 1 &&\n        body[0].type === \"ExpressionStatement\" &&\n        body[0].expression.type === \"CallExpression\" &&\n        body[0].expression.callee.type === \"Super\"\n    );\n}\n\n/**\n * Checks whether a given node is a pattern which doesn't have any side effects.\n * Default parameters and Destructuring parameters can have side effects.\n *\n * @param {ASTNode} node - A pattern node.\n * @returns {boolean} `true` if the node doesn't have any side effects.\n */\nfunction isSimple(node) {\n    return node.type === \"Identifier\" || node.type === \"RestElement\";\n}\n\n/**\n * Checks whether a given array of expressions is `...arguments` or not.\n * `super(...arguments)` passes all arguments through.\n *\n * @param {ASTNode[]} superArgs - An array of expressions to check.\n * @returns {boolean} `true` if the superArgs is `...arguments`.\n */\nfunction isSpreadArguments(superArgs) {\n    return (\n        superArgs.length === 1 &&\n        superArgs[0].type === \"SpreadElement\" &&\n        superArgs[0].argument.type === \"Identifier\" &&\n        superArgs[0].argument.name === \"arguments\"\n    );\n}\n\n/**\n * Checks whether given 2 nodes are identifiers which have the same name or not.\n *\n * @param {ASTNode} ctorParam - A node to check.\n * @param {ASTNode} superArg - A node to check.\n * @returns {boolean} `true` if the nodes are identifiers which have the same\n *      name.\n */\nfunction isValidIdentifierPair(ctorParam, superArg) {\n    return (\n        ctorParam.type === \"Identifier\" &&\n        superArg.type === \"Identifier\" &&\n        ctorParam.name === superArg.name\n    );\n}\n\n/**\n * Checks whether given 2 nodes are a rest/spread pair which has the same values.\n *\n * @param {ASTNode} ctorParam - A node to check.\n * @param {ASTNode} superArg - A node to check.\n * @returns {boolean} `true` if the nodes are a rest/spread pair which has the\n *      same values.\n */\nfunction isValidRestSpreadPair(ctorParam, superArg) {\n    return (\n        ctorParam.type === \"RestElement\" &&\n        superArg.type === \"SpreadElement\" &&\n        isValidIdentifierPair(ctorParam.argument, superArg.argument)\n    );\n}\n\n/**\n * Checks whether given 2 nodes have the same value or not.\n *\n * @param {ASTNode} ctorParam - A node to check.\n * @param {ASTNode} superArg - A node to check.\n * @returns {boolean} `true` if the nodes have the same value or not.\n */\nfunction isValidPair(ctorParam, superArg) {\n    return (\n        isValidIdentifierPair(ctorParam, superArg) ||\n        isValidRestSpreadPair(ctorParam, superArg)\n    );\n}\n\n/**\n * Checks whether the parameters of a constructor and the arguments of `super()`\n * have the same values or not.\n *\n * @param {ASTNode} ctorParams - The parameters of a constructor to check.\n * @param {ASTNode} superArgs - The arguments of `super()` to check.\n * @returns {boolean} `true` if those have the same values.\n */\nfunction isPassingThrough(ctorParams, superArgs) {\n    if (ctorParams.length !== superArgs.length) {\n        return false;\n    }\n\n    for (var i = 0; i < ctorParams.length; ++i) {\n        if (!isValidPair(ctorParams[i], superArgs[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Checks whether the constructor body is a redundant super call.\n *\n * @param {Array} body - constructor body content.\n * @param {Array} ctorParams - The params to check against super call.\n * @returns {boolean} true if the construtor body is redundant\n */\nfunction isRedundantSuperCall(body, ctorParams) {\n    return (\n        isSingleSuperCall(body) &&\n        ctorParams.every(isSimple) &&\n        (\n            isSpreadArguments(body[0].expression.arguments) ||\n            isPassingThrough(ctorParams, body[0].expression.arguments)\n        )\n    );\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow unnecessary constructors\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        /**\n         * Checks whether a node is a redundant constructor\n         * @param {ASTNode} node - node to check\n         * @returns {void}\n         */\n        function checkForConstructor(node) {\n            if (node.kind !== \"constructor\") {\n                return;\n            }\n\n            var body = node.value.body.body;\n            var ctorParams = node.value.params;\n            var superClass = node.parent.parent.superClass;\n\n            if (superClass ? isRedundantSuperCall(body, ctorParams) : (body.length === 0)) {\n                context.report({\n                    node: node,\n                    message: \"Useless constructor.\"\n                });\n            }\n        }\n\n        return {\n            MethodDefinition: checkForConstructor\n        };\n    }\n};\n"]}