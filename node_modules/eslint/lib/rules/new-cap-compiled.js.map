{"version":3,"sources":["new-cap.js"],"names":[],"mappings":"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","file":"new-cap-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of constructors without capital letters\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar lodash = require(\"lodash\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar CAPS_ALLOWED = [\n    \"Array\",\n    \"Boolean\",\n    \"Date\",\n    \"Error\",\n    \"Function\",\n    \"Number\",\n    \"Object\",\n    \"RegExp\",\n    \"String\",\n    \"Symbol\"\n];\n\n/**\n * Ensure that if the key is provided, it must be an array.\n * @param {Object} obj Object to check with `key`.\n * @param {string} key Object key to check on `obj`.\n * @param {*} fallback If obj[key] is not present, this will be returned.\n * @returns {string[]} Returns obj[key] if it's an Array, otherwise `fallback`\n */\nfunction checkArray(obj, key, fallback) {\n\n    /* istanbul ignore if */\n    if (Object.prototype.hasOwnProperty.call(obj, key) && !Array.isArray(obj[key])) {\n        throw new TypeError(key + \", if provided, must be an Array\");\n    }\n    return obj[key] || fallback;\n}\n\n/**\n * A reducer function to invert an array to an Object mapping the string form of the key, to `true`.\n * @param {Object} map Accumulator object for the reduce.\n * @param {string} key Object key to set to `true`.\n * @returns {Object} Returns the updated Object for further reduction.\n */\nfunction invert(map, key) {\n    map[key] = true;\n    return map;\n}\n\n/**\n * Creates an object with the cap is new exceptions as its keys and true as their values.\n * @param {Object} config Rule configuration\n * @returns {Object} Object with cap is new exceptions.\n */\nfunction calculateCapIsNewExceptions(config) {\n    var capIsNewExceptions = checkArray(config, \"capIsNewExceptions\", CAPS_ALLOWED);\n\n    if (capIsNewExceptions !== CAPS_ALLOWED) {\n        capIsNewExceptions = capIsNewExceptions.concat(CAPS_ALLOWED);\n    }\n\n    return capIsNewExceptions.reduce(invert, {});\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require constructor `function` names to begin with a capital letter\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    newIsCap: {\n                        type: \"boolean\"\n                    },\n                    capIsNew: {\n                        type: \"boolean\"\n                    },\n                    newIsCapExceptions: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    capIsNewExceptions: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    properties: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var config = context.options[0] ? lodash.assign({}, context.options[0]) : {};\n\n        config.newIsCap = config.newIsCap !== false;\n        config.capIsNew = config.capIsNew !== false;\n        var skipProperties = config.properties === false;\n\n        var newIsCapExceptions = checkArray(config, \"newIsCapExceptions\", []).reduce(invert, {});\n\n        var capIsNewExceptions = calculateCapIsNewExceptions(config);\n\n        var listeners = {};\n\n        var sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Get exact callee name from expression\n         * @param {ASTNode} node CallExpression or NewExpression node\n         * @returns {string} name\n         */\n        function extractNameFromExpression(node) {\n\n            var name = \"\",\n                property;\n\n            if (node.callee.type === \"MemberExpression\") {\n                property = node.callee.property;\n\n                if (property.type === \"Literal\" && (typeof property.value === \"string\")) {\n                    name = property.value;\n                } else if (property.type === \"Identifier\" && !node.callee.computed) {\n                    name = property.name;\n                }\n            } else {\n                name = node.callee.name;\n            }\n            return name;\n        }\n\n        /**\n         * Returns the capitalization state of the string -\n         * Whether the first character is uppercase, lowercase, or non-alphabetic\n         * @param {string} str String\n         * @returns {string} capitalization state: \"non-alpha\", \"lower\", or \"upper\"\n         */\n        function getCap(str) {\n            var firstChar = str.charAt(0);\n\n            var firstCharLower = firstChar.toLowerCase();\n            var firstCharUpper = firstChar.toUpperCase();\n\n            if (firstCharLower === firstCharUpper) {\n\n                // char has no uppercase variant, so it's non-alphabetic\n                return \"non-alpha\";\n            } else if (firstChar === firstCharLower) {\n                return \"lower\";\n            } else {\n                return \"upper\";\n            }\n        }\n\n        /**\n         * Check if capitalization is allowed for a CallExpression\n         * @param {Object} allowedMap Object mapping calleeName to a Boolean\n         * @param {ASTNode} node CallExpression node\n         * @param {string} calleeName Capitalized callee name from a CallExpression\n         * @returns {Boolean} Returns true if the callee may be capitalized\n         */\n        function isCapAllowed(allowedMap, node, calleeName) {\n            if (allowedMap[calleeName] || allowedMap[sourceCode.getText(node.callee)]) {\n                return true;\n            }\n\n            if (calleeName === \"UTC\" && node.callee.type === \"MemberExpression\") {\n\n                // allow if callee is Date.UTC\n                return node.callee.object.type === \"Identifier\" &&\n                    node.callee.object.name === \"Date\";\n            }\n\n            return skipProperties && node.callee.type === \"MemberExpression\";\n        }\n\n        /**\n         * Reports the given message for the given node. The location will be the start of the property or the callee.\n         * @param {ASTNode} node CallExpression or NewExpression node.\n         * @param {string} message The message to report.\n         * @returns {void}\n         */\n        function report(node, message) {\n            var callee = node.callee;\n\n            if (callee.type === \"MemberExpression\") {\n                callee = callee.property;\n            }\n\n            context.report(node, callee.loc.start, message);\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        if (config.newIsCap) {\n            listeners.NewExpression = function(node) {\n\n                var constructorName = extractNameFromExpression(node);\n\n                if (constructorName) {\n                    var capitalization = getCap(constructorName);\n                    var isAllowed = capitalization !== \"lower\" || isCapAllowed(newIsCapExceptions, node, constructorName);\n\n                    if (!isAllowed) {\n                        report(node, \"A constructor name should not start with a lowercase letter.\");\n                    }\n                }\n            };\n        }\n\n        if (config.capIsNew) {\n            listeners.CallExpression = function(node) {\n\n                var calleeName = extractNameFromExpression(node);\n\n                if (calleeName) {\n                    var capitalization = getCap(calleeName);\n                    var isAllowed = capitalization !== \"upper\" || isCapAllowed(capIsNewExceptions, node, calleeName);\n\n                    if (!isAllowed) {\n                        report(node, \"A function with a name starting with an uppercase letter should only be used as a constructor.\");\n                    }\n                }\n            };\n        }\n\n        return listeners;\n    }\n};\n"]}