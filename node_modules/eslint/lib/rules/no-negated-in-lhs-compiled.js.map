{"version":3,"sources":["no-negated-in-lhs.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,wDADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,8BAAkB,UAAS,IAAT,EAAe;AAC7B,oBAAI,KAAK,QAAL,KAAkB,IAAlB,IAA0B,KAAK,IAAL,CAAU,IAAV,KAAmB,iBAA7C,IAAkE,KAAK,IAAL,CAAU,QAAV,KAAuB,GAA7F,EAAkG;AAC9F,4BAAQ,MAAR,CAAe,IAAf,EAAqB,+CAArB;AACH;AACJ;AANE,SAAP;AASH;AAtBY,CAAjB","file":"no-negated-in-lhs-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to disallow negated left operands of the `in` operator\n * @author Michael Ficarra\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow negating the left operand in `in` expressions\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            BinaryExpression: function(node) {\n                if (node.operator === \"in\" && node.left.type === \"UnaryExpression\" && node.left.operator === \"!\") {\n                    context.report(node, \"The 'in' expression's left operand is negated\");\n                }\n            }\n        };\n\n    }\n};\n"]}