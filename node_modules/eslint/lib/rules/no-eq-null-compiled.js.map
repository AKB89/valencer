{"version":3,"sources":["no-eq-null.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,6DADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,8BAAkB,UAAS,IAAT,EAAe;AAC7B,oBAAI,cAAc,KAAK,QAAL,KAAkB,IAAlB,IAA0B,KAAK,QAAL,KAAkB,IAA9D;;AAEA,oBAAI,KAAK,KAAL,CAAW,IAAX,KAAoB,SAApB,IAAiC,KAAK,KAAL,CAAW,GAAX,KAAmB,MAApD,IAA8D,WAA9D,IACI,KAAK,IAAL,CAAU,IAAV,KAAmB,SAAnB,IAAgC,KAAK,IAAL,CAAU,GAAV,KAAkB,MAAlD,IAA4D,WADpE,EACiF;AAC7E,4BAAQ,MAAR,CAAe,IAAf,EAAqB,mCAArB;AACH;AACJ;AATE,SAAP;AAYH;AAzBY,CAAjB","file":"no-eq-null-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag comparisons to null without a type-checking\n * operator.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `null` comparisons without type-checking operators\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            BinaryExpression: function(node) {\n                var badOperator = node.operator === \"==\" || node.operator === \"!=\";\n\n                if (node.right.type === \"Literal\" && node.right.raw === \"null\" && badOperator ||\n                        node.left.type === \"Literal\" && node.left.raw === \"null\" && badOperator) {\n                    context.report(node, \"Use ‘===’ to compare with ‘null’.\");\n                }\n            }\n        };\n\n    }\n};\n"]}