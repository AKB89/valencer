{"version":3,"sources":["no-empty.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,IAAI,gBAAgB,kEAApB;;AAEA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,iCADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,QADV;AAEI,wBAAY;AACR,iCAAiB;AACb,0BAAM;AADO;AADT,aAFhB;AAOI,kCAAsB;AAP1B,SADI;AAPN,KADO;;AAqBb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,UAAU,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,EAApC;YACI,kBAAkB,QAAQ,eAAR,IAA2B,KADjD;;AAGA,YAAI,aAAa,QAAQ,aAAR,EAAjB;;AAEA,eAAO;AACH,4BAAgB,UAAS,IAAT,EAAe;;;AAG3B,oBAAI,KAAK,IAAL,CAAU,MAAV,KAAqB,CAAzB,EAA4B;AACxB;AACH;;;AAGD,oBAAI,cAAc,IAAd,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAJ,EAA0C;AACtC;AACH;;AAED,oBAAI,mBAAmB,KAAK,MAAL,CAAY,IAAZ,KAAqB,aAA5C,EAA2D;AACvD;AACH;;;AAGD,oBAAI,WAAW,WAAX,CAAuB,IAAvB,EAA6B,QAA7B,CAAsC,MAAtC,GAA+C,CAAnD,EAAsD;AAClD;AACH;;AAED,wBAAQ,MAAR,CAAe,IAAf,EAAqB,wBAArB;AACH,aAvBE;;AAyBH,6BAAiB,UAAS,IAAT,EAAe;;AAE5B,oBAAI,OAAO,KAAK,KAAZ,KAAsB,WAAtB,IAAqC,KAAK,KAAL,CAAW,MAAX,KAAsB,CAA/D,EAAkE;AAC9D,4BAAQ,MAAR,CAAe,IAAf,EAAqB,yBAArB;AACH;AACJ;AA9BE,SAAP;AAiCH;AA5DY,CAAjB","file":"no-empty-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of an empty block statement\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nvar FUNCTION_TYPE = /^(?:ArrowFunctionExpression|Function(?:Declaration|Expression))$/;\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow empty block statements\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowEmptyCatch: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var options = context.options[0] || {},\n            allowEmptyCatch = options.allowEmptyCatch || false;\n\n        var sourceCode = context.getSourceCode();\n\n        return {\n            BlockStatement: function(node) {\n\n                // if the body is not empty, we can just return immediately\n                if (node.body.length !== 0) {\n                    return;\n                }\n\n                // a function is generally allowed to be empty\n                if (FUNCTION_TYPE.test(node.parent.type)) {\n                    return;\n                }\n\n                if (allowEmptyCatch && node.parent.type === \"CatchClause\") {\n                    return;\n                }\n\n                // any other block is only allowed to be empty, if it contains a comment\n                if (sourceCode.getComments(node).trailing.length > 0) {\n                    return;\n                }\n\n                context.report(node, \"Empty block statement.\");\n            },\n\n            SwitchStatement: function(node) {\n\n                if (typeof node.cases === \"undefined\" || node.cases.length === 0) {\n                    context.report(node, \"Empty switch statement.\");\n                }\n            }\n        };\n\n    }\n};\n"]}