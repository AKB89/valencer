{"version":3,"sources":["sort-imports.js"],"names":[],"mappings":"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","file":"sort-imports-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to require sorting of import declarations\n * @author Christian Schuller\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce sorted import declarations within modules\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    ignoreCase: {\n                        type: \"boolean\"\n                    },\n                    memberSyntaxSortOrder: {\n                        type: \"array\",\n                        items: {\n                            enum: [\"none\", \"all\", \"multiple\", \"single\"]\n                        },\n                        uniqueItems: true,\n                        minItems: 4,\n                        maxItems: 4\n                    },\n                    ignoreMemberSort: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var configuration = context.options[0] || {},\n            ignoreCase = configuration.ignoreCase || false,\n            ignoreMemberSort = configuration.ignoreMemberSort || false,\n            memberSyntaxSortOrder = configuration.memberSyntaxSortOrder || [\"none\", \"all\", \"multiple\", \"single\"],\n            previousDeclaration = null;\n\n        /**\n         * Gets the used member syntax style.\n         *\n         * import \"my-module.js\" --> none\n         * import * as myModule from \"my-module.js\" --> all\n         * import {myMember} from \"my-module.js\" --> single\n         * import {foo, bar} from  \"my-module.js\" --> multiple\n         *\n         * @param {ASTNode} node - the ImportDeclaration node.\n         * @returns {string} used member parameter style, [\"all\", \"multiple\", \"single\"]\n         */\n        function usedMemberSyntax(node) {\n            if (node.specifiers.length === 0) {\n                return \"none\";\n            } else if (node.specifiers[0].type === \"ImportNamespaceSpecifier\") {\n                return \"all\";\n            } else if (node.specifiers.length === 1) {\n                return \"single\";\n            } else {\n                return \"multiple\";\n            }\n        }\n\n        /**\n         * Gets the group by member parameter index for given declaration.\n         * @param {ASTNode} node - the ImportDeclaration node.\n         * @returns {number} the declaration group by member index.\n         */\n        function getMemberParameterGroupIndex(node) {\n            return memberSyntaxSortOrder.indexOf(usedMemberSyntax(node));\n        }\n\n        /**\n         * Gets the local name of the first imported module.\n         * @param {ASTNode} node - the ImportDeclaration node.\n         * @returns {?string} the local name of the first imported module.\n         */\n        function getFirstLocalMemberName(node) {\n            if (node.specifiers[0]) {\n                return node.specifiers[0].local.name;\n            } else {\n                return null;\n            }\n        }\n\n        return {\n            ImportDeclaration: function(node) {\n                if (previousDeclaration) {\n                    var currentLocalMemberName = getFirstLocalMemberName(node),\n                        currentMemberSyntaxGroupIndex = getMemberParameterGroupIndex(node),\n                        previousLocalMemberName = getFirstLocalMemberName(previousDeclaration),\n                        previousMemberSyntaxGroupIndex = getMemberParameterGroupIndex(previousDeclaration);\n\n                    if (ignoreCase) {\n                        previousLocalMemberName = previousLocalMemberName && previousLocalMemberName.toLowerCase();\n                        currentLocalMemberName = currentLocalMemberName && currentLocalMemberName.toLowerCase();\n                    }\n\n                    // When the current declaration uses a different member syntax,\n                    // then check if the ordering is correct.\n                    // Otherwise, make a default string compare (like rule sort-vars to be consistent) of the first used local member name.\n                    if (currentMemberSyntaxGroupIndex !== previousMemberSyntaxGroupIndex) {\n                        if (currentMemberSyntaxGroupIndex < previousMemberSyntaxGroupIndex) {\n                            context.report({\n                                node: node,\n                                message: \"Expected '{{syntaxA}}' syntax before '{{syntaxB}}' syntax.\",\n                                data: {\n                                    syntaxA: memberSyntaxSortOrder[currentMemberSyntaxGroupIndex],\n                                    syntaxB: memberSyntaxSortOrder[previousMemberSyntaxGroupIndex]\n                                }\n                            });\n                        }\n                    } else {\n                        if (previousLocalMemberName &&\n                            currentLocalMemberName &&\n                            currentLocalMemberName < previousLocalMemberName\n                        ) {\n                            context.report({\n                                node: node,\n                                message: \"Imports should be sorted alphabetically.\"\n                            });\n                        }\n                    }\n                }\n\n                // Multiple members of an import declaration should also be sorted alphabetically.\n                if (!ignoreMemberSort && node.specifiers.length > 1) {\n                    var previousSpecifier = null;\n                    var previousSpecifierName = null;\n\n                    for (var i = 0; i < node.specifiers.length; ++i) {\n                        var currentSpecifier = node.specifiers[i];\n\n                        if (currentSpecifier.type !== \"ImportSpecifier\") {\n                            continue;\n                        }\n\n                        var currentSpecifierName = currentSpecifier.local.name;\n\n                        if (ignoreCase) {\n                            currentSpecifierName = currentSpecifierName.toLowerCase();\n                        }\n\n                        if (previousSpecifier && currentSpecifierName < previousSpecifierName) {\n                            context.report({\n                                node: currentSpecifier,\n                                message: \"Member '{{memberName}}' of the import declaration should be sorted alphabetically.\",\n                                data: {\n                                    memberName: currentSpecifier.local.name\n                                }\n                            });\n                        }\n\n                        previousSpecifier = currentSpecifier;\n                        previousSpecifierName = currentSpecifierName;\n                    }\n                }\n\n                previousDeclaration = node;\n            }\n        };\n    }\n};\n"]}