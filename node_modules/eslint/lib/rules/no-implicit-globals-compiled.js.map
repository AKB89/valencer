{"version":3,"sources":["no-implicit-globals.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,sEADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,gBAAS,OAAT,EAAkB;AACtB,eAAO;AACH,qBAAS,mBAAW;AAChB,oBAAI,QAAQ,QAAQ,QAAR,EAAZ;;AAEA,sBAAM,SAAN,CAAgB,OAAhB,CAAwB,UAAS,QAAT,EAAmB;AACvC,wBAAI,SAAS,SAAb,EAAwB;AACpB;AACH;;AAED,6BAAS,IAAT,CAAc,OAAd,CAAsB,UAAS,GAAT,EAAc;AAChC,4BAAI,IAAI,IAAJ,KAAa,cAAb,IAAgC,IAAI,IAAJ,KAAa,UAAb,IAA2B,IAAI,MAAJ,CAAW,IAAX,KAAoB,KAAnF,EAA2F;AACvF,oCAAQ,MAAR,CAAe,IAAI,IAAnB,EAAyB,8DAAzB;AACH;AACJ,qBAJD;AAKH,iBAVD;;AAYA,sBAAM,QAAN,CAAe,SAAf,CAAyB,OAAzB,CAAiC,UAAS,QAAT,EAAmB;AAChD,wBAAI,gBAAgB,MAAM,GAAN,CAAU,GAAV,CAAc,SAAS,IAAvB,CAApB;;AAEA,wBAAI,iBAAiB,cAAc,SAAnC,EAA8C;AAC1C;AACH;;AAED,6BAAS,IAAT,CAAc,OAAd,CAAsB,UAAS,GAAT,EAAc;AAChC,gCAAQ,MAAR,CAAe,IAAI,IAAnB,EAAyB,8DAAzB;AACH,qBAFD;AAGH,iBAVD;AAWH;AA3BE,SAAP;AA8BH;AA1CY,CAAjB","file":"no-implicit-globals-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to check for implicit global variables and functions.\n * @author Joshua Peek\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `var` and named `function` declarations in the global scope\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        return {\n            Program: function() {\n                var scope = context.getScope();\n\n                scope.variables.forEach(function(variable) {\n                    if (variable.writeable) {\n                        return;\n                    }\n\n                    variable.defs.forEach(function(def) {\n                        if (def.type === \"FunctionName\" || (def.type === \"Variable\" && def.parent.kind === \"var\")) {\n                            context.report(def.node, \"Implicit global variable, assign as global property instead.\");\n                        }\n                    });\n                });\n\n                scope.implicit.variables.forEach(function(variable) {\n                    var scopeVariable = scope.set.get(variable.name);\n\n                    if (scopeVariable && scopeVariable.writeable) {\n                        return;\n                    }\n\n                    variable.defs.forEach(function(def) {\n                        context.report(def.node, \"Implicit global variable, assign as global property instead.\");\n                    });\n                });\n            }\n        };\n\n    }\n};\n"]}