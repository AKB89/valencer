{"version":3,"sources":["block-spacing.js"],"names":[],"mappings":"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","file":"block-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to disallow or enforce spaces inside of single line blocks.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nvar util = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent spacing inside single-line blocks\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {enum: [\"always\", \"never\"]}\n        ]\n    },\n\n    create: function(context) {\n        var always = (context.options[0] !== \"never\"),\n            message = always ? \"Requires a space\" : \"Unexpected space(s)\",\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Gets the open brace token from a given node.\n         * @param {ASTNode} node - A BlockStatement/SwitchStatement node to get.\n         * @returns {Token} The token of the open brace.\n         */\n        function getOpenBrace(node) {\n            if (node.type === \"SwitchStatement\") {\n                if (node.cases.length > 0) {\n                    return sourceCode.getTokenBefore(node.cases[0]);\n                }\n                return sourceCode.getLastToken(node, 1);\n            }\n            return sourceCode.getFirstToken(node);\n        }\n\n        /**\n         * Checks whether or not:\n         *   - given tokens are on same line.\n         *   - there is/isn't a space between given tokens.\n         * @param {Token} left - A token to check.\n         * @param {Token} right - The token which is next to `left`.\n         * @returns {boolean}\n         *    When the option is `\"always\"`, `true` if there are one or more spaces between given tokens.\n         *    When the option is `\"never\"`, `true` if there are not any spaces between given tokens.\n         *    If given tokens are not on same line, it's always `true`.\n         */\n        function isValid(left, right) {\n            return (\n                !util.isTokenOnSameLine(left, right) ||\n                sourceCode.isSpaceBetweenTokens(left, right) === always\n            );\n        }\n\n        /**\n         * Reports invalid spacing style inside braces.\n         * @param {ASTNode} node - A BlockStatement/SwitchStatement node to get.\n         * @returns {void}\n         */\n        function checkSpacingInsideBraces(node) {\n\n            // Gets braces and the first/last token of content.\n            var openBrace = getOpenBrace(node);\n            var closeBrace = sourceCode.getLastToken(node);\n            var firstToken = sourceCode.getTokenOrCommentAfter(openBrace);\n            var lastToken = sourceCode.getTokenOrCommentBefore(closeBrace);\n\n            // Skip if the node is invalid or empty.\n            if (openBrace.type !== \"Punctuator\" ||\n                openBrace.value !== \"{\" ||\n                closeBrace.type !== \"Punctuator\" ||\n                closeBrace.value !== \"}\" ||\n                firstToken === closeBrace\n            ) {\n                return;\n            }\n\n            // Skip line comments for option never\n            if (!always && firstToken.type === \"Line\") {\n                return;\n            }\n\n            // Check.\n            if (!isValid(openBrace, firstToken)) {\n                context.report({\n                    node: node,\n                    loc: openBrace.loc.start,\n                    message: message + \" after '{'.\",\n                    fix: function(fixer) {\n                        if (always) {\n                            return fixer.insertTextBefore(firstToken, \" \");\n                        }\n\n                        return fixer.removeRange([openBrace.range[1], firstToken.range[0]]);\n                    }\n                });\n            }\n            if (!isValid(lastToken, closeBrace)) {\n                context.report({\n                    node: node,\n                    loc: closeBrace.loc.start,\n                    message: message + \" before '}'.\",\n                    fix: function(fixer) {\n                        if (always) {\n                            return fixer.insertTextAfter(lastToken, \" \");\n                        }\n\n                        return fixer.removeRange([lastToken.range[1], closeBrace.range[0]]);\n                    }\n                });\n            }\n        }\n\n        return {\n            BlockStatement: checkSpacingInsideBraces,\n            SwitchStatement: checkSpacingInsideBraces\n        };\n    }\n};\n"]}