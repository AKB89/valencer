{"version":3,"sources":["no-confusing-arrow.js"],"names":[],"mappings":";;;;;;AAMA;;AAEA,IAAI,WAAW,QAAQ,iBAAR,CAAf;;;;;;;;;;;AAWA,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,WAAO,QAAQ,KAAK,IAAL,KAAc,uBAA7B;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,wEADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CAAC;AACL,kBAAM,QADD;AAEL,wBAAY;AACR,6BAAa,EAAC,MAAM,SAAP;AADL,aAFP;AAKL,kCAAsB;AALjB,SAAD;AAPN,KADO;;AAiBb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,EAAnC;AACA,YAAI,aAAa,QAAQ,aAAR,EAAjB;;;;;;;AAOA,iBAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC1B,gBAAI,OAAO,KAAK,IAAhB;;AAEA,gBAAI,cAAc,IAAd,KAAuB,EAAE,OAAO,WAAP,IAAsB,SAAS,eAAT,CAAyB,UAAzB,EAAqC,IAArC,CAAxB,CAA3B,EAAgG;AAC5F,wBAAQ,MAAR,CAAe,IAAf,EAAqB,gEAArB;AACH;AACJ;;AAED,eAAO;AACH,qCAAyB;AADtB,SAAP;AAGH;AArCY,CAAjB","file":"no-confusing-arrow-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to warn against using arrow functions when they could be\n * confused with comparisions\n * @author Jxck <https://github.com/Jxck>\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils.js\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a conditional expression.\n * @param {ASTNode} node - node to test\n * @returns {boolean} `true` if the node is a conditional expression.\n */\nfunction isConditional(node) {\n    return node && node.type === \"ConditionalExpression\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow arrow functions where they could be confused with comparisons\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                allowParens: {type: \"boolean\"}\n            },\n            additionalProperties: false\n        }]\n    },\n\n    create: function(context) {\n        var config = context.options[0] || {};\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Reports if an arrow function contains an ambiguous conditional.\n         * @param {ASTNode} node - A node to check and report.\n         * @returns {void}\n         */\n        function checkArrowFunc(node) {\n            var body = node.body;\n\n            if (isConditional(body) && !(config.allowParens && astUtils.isParenthesised(sourceCode, body))) {\n                context.report(node, \"Arrow function used ambiguously with a conditional expression.\");\n            }\n        }\n\n        return {\n            ArrowFunctionExpression: checkArrowFunc\n        };\n    }\n};\n"]}