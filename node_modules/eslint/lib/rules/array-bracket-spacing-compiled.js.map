{"version":3,"sources":["array-bracket-spacing.js"],"names":[],"mappings":"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","file":"array-bracket-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of array brackets.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"Enforce spacing inside array brackets\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n        fixable: \"whitespace\",\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    singleValue: {\n                        type: \"boolean\"\n                    },\n                    objectsInArrays: {\n                        type: \"boolean\"\n                    },\n                    arraysInArrays: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n    create: function(context) {\n        var spaced = context.options[0] === \"always\",\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether an option is set, relative to the spacing option.\n         * If spaced is \"always\", then check whether option is set to false.\n         * If spaced is \"never\", then check whether option is set to true.\n         * @param {Object} option - The option to exclude.\n         * @returns {boolean} Whether or not the property is excluded.\n         */\n        function isOptionSet(option) {\n            return context.options[1] ? context.options[1][option] === !spaced : false;\n        }\n\n        var options = {\n            spaced: spaced,\n            singleElementException: isOptionSet(\"singleValue\"),\n            objectsInArraysException: isOptionSet(\"objectsInArrays\"),\n            arraysInArraysException: isOptionSet(\"arraysInArrays\")\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n        * Reports that there shouldn't be a space after the first token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportNoBeginningSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"There should be no space after '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    var nextToken = sourceCode.getTokenAfter(token);\n\n                    return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                }\n            });\n        }\n\n        /**\n        * Reports that there shouldn't be a space before the last token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportNoEndingSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"There should be no space before '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    var previousToken = sourceCode.getTokenBefore(token);\n\n                    return fixer.removeRange([previousToken.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n        * Reports that there should be a space after the first token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"A space is required after '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n        * Reports that there should be a space before the last token\n        * @param {ASTNode} node - The node to report in the event of an error.\n        * @param {Token} token - The token to use for the report.\n        * @returns {void}\n        */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node: node,\n                loc: token.loc.start,\n                message: \"A space is required before '\" + token.value + \"'\",\n                fix: function(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n        * Determines if a node is an object type\n        * @param {ASTNode} node - The node to check.\n        * @returns {boolean} Whether or not the node is an object type.\n        */\n        function isObjectType(node) {\n            return node && (node.type === \"ObjectExpression\" || node.type === \"ObjectPattern\");\n        }\n\n        /**\n        * Determines if a node is an array type\n        * @param {ASTNode} node - The node to check.\n        * @returns {boolean} Whether or not the node is an array type.\n        */\n        function isArrayType(node) {\n            return node && (node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\");\n        }\n\n        /**\n         * Validates the spacing around array brackets\n         * @param {ASTNode} node - The node we're checking for spacing\n         * @returns {void}\n         */\n        function validateArraySpacing(node) {\n            if (options.spaced && node.elements.length === 0) {\n                return;\n            }\n\n            var first = sourceCode.getFirstToken(node),\n                second = sourceCode.getFirstToken(node, 1),\n                penultimate = sourceCode.getLastToken(node, 1),\n                last = sourceCode.getLastToken(node),\n                firstElement = node.elements[0],\n                lastElement = node.elements[node.elements.length - 1];\n\n            var openingBracketMustBeSpaced =\n                options.objectsInArraysException && isObjectType(firstElement) ||\n                options.arraysInArraysException && isArrayType(firstElement) ||\n                options.singleElementException && node.elements.length === 1\n                    ? !options.spaced : options.spaced;\n\n            var closingBracketMustBeSpaced =\n                options.objectsInArraysException && isObjectType(lastElement) ||\n                options.arraysInArraysException && isArrayType(lastElement) ||\n                options.singleElementException && node.elements.length === 1\n                    ? !options.spaced : options.spaced;\n\n            if (astUtils.isTokenOnSameLine(first, second)) {\n                if (openingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(first, second)) {\n                    reportRequiredBeginningSpace(node, first);\n                }\n                if (!openingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(first, second)) {\n                    reportNoBeginningSpace(node, first);\n                }\n            }\n\n            if (first !== penultimate && astUtils.isTokenOnSameLine(penultimate, last)) {\n                if (closingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n                    reportRequiredEndingSpace(node, last);\n                }\n                if (!closingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n                    reportNoEndingSpace(node, last);\n                }\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ArrayPattern: validateArraySpacing,\n            ArrayExpression: validateArraySpacing\n        };\n    }\n};\n"]}