{"version":3,"sources":["no-class-assign.js"],"names":[],"mappings":";;;;;AAKA;;AAEA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,oCADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;AAOtB,iBAAS,aAAT,CAAuB,QAAvB,EAAiC;AAC7B,qBAAS,sBAAT,CAAgC,SAAS,UAAzC,EAAqD,OAArD,CAA6D,UAAS,SAAT,EAAoB;AAC7E,wBAAQ,MAAR,CACI,UAAU,UADd,EAEI,wBAFJ,EAGI,EAAC,MAAM,UAAU,UAAV,CAAqB,IAA5B,EAHJ;AAKH,aAND;AAOH;;;;;;;AAOD,iBAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,oBAAQ,oBAAR,CAA6B,IAA7B,EAAmC,OAAnC,CAA2C,aAA3C;AACH;;AAED,eAAO;AACH,8BAAkB,aADf;AAEH,6BAAiB;AAFd,SAAP;AAKH;AA1CY,CAAjB","file":"no-class-assign-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to disallow modifying variables of class declarations\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow reassigning class members\",\n            category: \"ECMAScript 6\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {Variable} variable - A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            astUtils.getModifyingReferences(variable.references).forEach(function(reference) {\n                context.report(\n                    reference.identifier,\n                    \"'{{name}}' is a class.\",\n                    {name: reference.identifier.name});\n\n            });\n        }\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {ASTNode} node - A ClassDeclaration/ClassExpression node to check.\n         * @returns {void}\n         */\n        function checkForClass(node) {\n            context.getDeclaredVariables(node).forEach(checkVariable);\n        }\n\n        return {\n            ClassDeclaration: checkForClass,\n            ClassExpression: checkForClass\n        };\n\n    }\n};\n"]}