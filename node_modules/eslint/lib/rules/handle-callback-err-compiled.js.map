{"version":3,"sources":["handle-callback-err.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,qCADX;AAEF,sBAAU,sBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM;AADV,SADI;AAPN,KADO;;AAeb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,YAAI,gBAAgB,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,KAA1C;;;;;;;AAOA,iBAAS,SAAT,CAAmB,aAAnB,EAAkC;AAC9B,gBAAI,YAAY,cAAc,CAAd,CAAhB;;AAEA,mBAAO,cAAc,GAArB;AACH;;;;;;;AAOD,iBAAS,0BAAT,CAAoC,IAApC,EAA0C;AACtC,gBAAI,UAAU,aAAV,CAAJ,EAA8B;AAC1B,oBAAI,SAAS,IAAI,MAAJ,CAAW,aAAX,CAAb;;AAEA,uBAAO,OAAO,IAAP,CAAY,IAAZ,CAAP;AACH;AACD,mBAAO,SAAS,aAAhB;AACH;;;;;;;AAOD,iBAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC1B,mBAAO,MAAM,SAAN,CAAgB,MAAhB,CAAuB,UAAS,QAAT,EAAmB;AAC7C,uBAAO,SAAS,IAAT,CAAc,CAAd,KAAoB,SAAS,IAAT,CAAc,CAAd,EAAiB,IAAjB,KAA0B,WAArD;AACH,aAFM,CAAP;AAGH;;;;;;;AAOD,iBAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,gBAAI,QAAQ,QAAQ,QAAR,EAAZ;gBACI,aAAa,cAAc,KAAd,CADjB;gBAEI,iBAAiB,WAAW,CAAX,CAFrB;;AAIA,gBAAI,kBAAkB,2BAA2B,eAAe,IAA1C,CAAtB,EAAuE;AACnE,oBAAI,eAAe,UAAf,CAA0B,MAA1B,KAAqC,CAAzC,EAA4C;AACxC,4BAAQ,MAAR,CAAe,IAAf,EAAqB,+BAArB;AACH;AACJ;AACJ;;AAED,eAAO;AACH,iCAAqB,aADlB;AAEH,gCAAoB,aAFjB;AAGH,qCAAyB;AAHtB,SAAP;AAMH;AA9EY,CAAjB","file":"handle-callback-err-compiled.js","sourcesContent":["/**\n * @fileoverview Ensure handling of errors when we know they exist.\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require error handling in callbacks\",\n            category: \"Node.js and CommonJS\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"string\"\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var errorArgument = context.options[0] || \"err\";\n\n        /**\n         * Checks if the given argument should be interpreted as a regexp pattern.\n         * @param {string} stringToCheck The string which should be checked.\n         * @returns {boolean} Whether or not the string should be interpreted as a pattern.\n         */\n        function isPattern(stringToCheck) {\n            var firstChar = stringToCheck[0];\n\n            return firstChar === \"^\";\n        }\n\n        /**\n         * Checks if the given name matches the configured error argument.\n         * @param {string} name The name which should be compared.\n         * @returns {boolean} Whether or not the given name matches the configured error variable name.\n         */\n        function matchesConfiguredErrorName(name) {\n            if (isPattern(errorArgument)) {\n                var regexp = new RegExp(errorArgument);\n\n                return regexp.test(name);\n            }\n            return name === errorArgument;\n        }\n\n        /**\n         * Get the parameters of a given function scope.\n         * @param {object} scope The function scope.\n         * @returns {array} All parameters of the given scope.\n         */\n        function getParameters(scope) {\n            return scope.variables.filter(function(variable) {\n                return variable.defs[0] && variable.defs[0].type === \"Parameter\";\n            });\n        }\n\n        /**\n         * Check to see if we're handling the error object properly.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         */\n        function checkForError(node) {\n            var scope = context.getScope(),\n                parameters = getParameters(scope),\n                firstParameter = parameters[0];\n\n            if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {\n                if (firstParameter.references.length === 0) {\n                    context.report(node, \"Expected error to be handled.\");\n                }\n            }\n        }\n\n        return {\n            FunctionDeclaration: checkForError,\n            FunctionExpression: checkForError,\n            ArrowFunctionExpression: checkForError\n        };\n\n    }\n};\n"]}