{"version":3,"sources":["no-mixed-spaces-and-tabs.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,gDADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,CAAC,YAAD,EAAe,IAAf,EAAqB,KAArB;AADV,SADI;AAPN,KADO;;AAeb,YAAQ,gBAAS,OAAT,EAAkB;AACtB,YAAI,aAAa,QAAQ,aAAR,EAAjB;;AAEA,YAAI,SAAJ;YACI,cAAc,EADlB;;AAGA,gBAAQ,QAAQ,OAAR,CAAgB,CAAhB,CAAR;AACI,iBAAK,IAAL,C;AACA,iBAAK,YAAL;AACI,4BAAY,IAAZ;AACA;AACJ;AACI,4BAAY,KAAZ;AANR;;;;;;;;;;AAiBA,iBAAS,SAAT,CAAmB,GAAnB,EAAwB,IAAxB,EAA8B,MAA9B,EAAsC;AAClC,gBAAI,OAAO,IAAI,KAAJ,CAAU,IAArB,EAA2B;AACvB,uBAAO,IAAP;AACH;AACD,mBAAO,SAAS,IAAI,KAAJ,CAAU,IAAnB,IAA2B,SAAS,IAAI,KAAJ,CAAU,MAArD;AACH;;;;;;;;;;AAUD,iBAAS,QAAT,CAAkB,GAAlB,EAAuB,IAAvB,EAA6B,MAA7B,EAAqC;AACjC,gBAAI,OAAO,IAAI,GAAJ,CAAQ,IAAnB,EAAyB;AACrB,uBAAO,IAAP;AACH;AACD,mBAAO,SAAS,IAAI,GAAJ,CAAQ,IAAjB,IAAyB,SAAS,IAAI,GAAJ,CAAQ,MAAjD;AACH;;;;;;AAMD,eAAO;;AAEH,6BAAiB,yBAAS,IAAT,EAAe;AAC5B,4BAAY,IAAZ,CAAiB,KAAK,GAAtB;AACH,aAJE;;AAMH,4BAAgB,qBAAS,IAAT,EAAe;;;;;;;AAO3B,oBAAI,QAAQ,sBAAZ;oBACI,KADJ;oBAEI,QAAQ,WAAW,KAFvB;oBAGI,WAAW,WAAW,cAAX,EAHf;;AAKA,yBAAS,OAAT,CAAiB,UAAS,OAAT,EAAkB;AAC/B,gCAAY,IAAZ,CAAiB,QAAQ,GAAzB;AACH,iBAFD;;AAIA,4BAAY,IAAZ,CAAiB,UAAS,KAAT,EAAgB,MAAhB,EAAwB;AACrC,wBAAI,UAAU,KAAV,EAAiB,OAAO,KAAP,CAAa,IAA9B,EAAoC,OAAO,KAAP,CAAa,MAAjD,CAAJ,EAA8D;AAC1D,+BAAO,CAAP;AACH;;AAED,wBAAI,UAAU,MAAV,EAAkB,MAAM,KAAN,CAAY,IAA9B,EAAoC,OAAO,KAAP,CAAa,MAAjD,CAAJ,EAA8D;AAC1D,+BAAO,CAAC,CAAR;AACH;;AAED,2BAAO,CAAP;AACH,iBAVD;;AAYA,oBAAI,SAAJ,EAAe;;;;;;AAMX,4BAAQ,gBAAR;AACH;;AAED,sBAAM,OAAN,CAAc,UAAS,IAAT,EAAe,CAAf,EAAkB;AAC5B,4BAAQ,MAAM,IAAN,CAAW,IAAX,CAAR;;AAEA,wBAAI,KAAJ,EAAW;AACP,4BAAI,aAAa,IAAI,CAArB;4BACI,SAAS,MAAM,KAAN,GAAc,CAD3B;;AAGA,6BAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,YAAY,MAAhC,EAAwC,GAAxC,EAA6C;AACzC,gCAAI,UAAU,YAAY,CAAZ,CAAV,EAA0B,UAA1B,EAAsC,MAAtC,CAAJ,EAAmD;AAC/C;AACH;AACD,gCAAI,SAAS,YAAY,CAAZ,CAAT,EAAyB,UAAzB,EAAqC,MAArC,CAAJ,EAAkD;AAC9C;AACH;;AAED;AACH;;AAED,gCAAQ,MAAR,CAAe,IAAf,EAAqB,EAAE,MAAM,UAAR,EAAoB,QAAQ,MAA5B,EAArB,EAA2D,wBAA3D;AACH;AACJ,iBApBD;AAqBH;;AAhEE,SAAP;AAoEH;AApIY,CAAjB","file":"no-mixed-spaces-and-tabs-compiled.js","sourcesContent":["/**\n * @fileoverview Disallow mixed spaces and tabs for indentation\n * @author Jary Niebur\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow mixed spaces and tabs for indentation\",\n            category: \"Stylistic Issues\",\n            recommended: true\n        },\n\n        schema: [\n            {\n                enum: [\"smart-tabs\", true, false]\n            }\n        ]\n    },\n\n    create: function(context) {\n        var sourceCode = context.getSourceCode();\n\n        var smartTabs,\n            ignoredLocs = [];\n\n        switch (context.options[0]) {\n            case true: // Support old syntax, maybe add deprecation warning here\n            case \"smart-tabs\":\n                smartTabs = true;\n                break;\n            default:\n                smartTabs = false;\n        }\n\n        /**\n         * Determines if a given line and column are before a location.\n         * @param {Location} loc The location object from an AST node.\n         * @param {int} line The line to check.\n         * @param {int} column The column to check.\n         * @returns {boolean} True if the line and column are before the location, false if not.\n         * @private\n         */\n        function beforeLoc(loc, line, column) {\n            if (line < loc.start.line) {\n                return true;\n            }\n            return line === loc.start.line && column < loc.start.column;\n        }\n\n        /**\n         * Determines if a given line and column are after a location.\n         * @param {Location} loc The location object from an AST node.\n         * @param {int} line The line to check.\n         * @param {int} column The column to check.\n         * @returns {boolean} True if the line and column are after the location, false if not.\n         * @private\n         */\n        function afterLoc(loc, line, column) {\n            if (line > loc.end.line) {\n                return true;\n            }\n            return line === loc.end.line && column > loc.end.column;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            TemplateElement: function(node) {\n                ignoredLocs.push(node.loc);\n            },\n\n            \"Program:exit\": function(node) {\n\n                /*\n                 * At least one space followed by a tab\n                 * or the reverse before non-tab/-space\n                 * characters begin.\n                 */\n                var regex = /^(?=[\\t ]*(\\t | \\t))/,\n                    match,\n                    lines = sourceCode.lines,\n                    comments = sourceCode.getAllComments();\n\n                comments.forEach(function(comment) {\n                    ignoredLocs.push(comment.loc);\n                });\n\n                ignoredLocs.sort(function(first, second) {\n                    if (beforeLoc(first, second.start.line, second.start.column)) {\n                        return 1;\n                    }\n\n                    if (beforeLoc(second, first.start.line, second.start.column)) {\n                        return -1;\n                    }\n\n                    return 0;\n                });\n\n                if (smartTabs) {\n\n                    /*\n                     * At least one space followed by a tab\n                     * before non-tab/-space characters begin.\n                     */\n                    regex = /^(?=[\\t ]* \\t)/;\n                }\n\n                lines.forEach(function(line, i) {\n                    match = regex.exec(line);\n\n                    if (match) {\n                        var lineNumber = i + 1,\n                            column = match.index + 1;\n\n                        for (var j = 0; j < ignoredLocs.length; j++) {\n                            if (beforeLoc(ignoredLocs[j], lineNumber, column)) {\n                                continue;\n                            }\n                            if (afterLoc(ignoredLocs[j], lineNumber, column)) {\n                                continue;\n                            }\n\n                            return;\n                        }\n\n                        context.report(node, { line: lineNumber, column: column }, \"Mixed spaces and tabs.\");\n                    }\n                });\n            }\n\n        };\n\n    }\n};\n"]}