{"version":3,"sources":["space-in-parens.js"],"names":[],"mappings":"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","file":"space-in-parens-compiled.js","sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of parentheses.\n * @author Jonathan Rajavuori\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent spacing inside parentheses\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"array\",\n                        items: {\n                            enum: [\"{}\", \"[]\", \"()\", \"empty\"]\n                        },\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var MISSING_SPACE_MESSAGE = \"There must be a space inside this paren.\",\n            REJECTED_SPACE_MESSAGE = \"There should be no spaces inside this paren.\",\n            ALWAYS = context.options[0] === \"always\",\n\n            exceptionsArrayOptions = (context.options.length === 2) ? context.options[1].exceptions : [],\n            options = {},\n            exceptions;\n\n        if (exceptionsArrayOptions.length) {\n            options.braceException = exceptionsArrayOptions.indexOf(\"{}\") !== -1;\n            options.bracketException = exceptionsArrayOptions.indexOf(\"[]\") !== -1;\n            options.parenException = exceptionsArrayOptions.indexOf(\"()\") !== -1;\n            options.empty = exceptionsArrayOptions.indexOf(\"empty\") !== -1;\n        }\n\n        /**\n         * Produces an object with the opener and closer exception values\n         * @param {Object} opts The exception options\n         * @returns {Object} `openers` and `closers` exception values\n         * @private\n         */\n        function getExceptions() {\n            var openers = [],\n                closers = [];\n\n            if (options.braceException) {\n                openers.push(\"{\");\n                closers.push(\"}\");\n            }\n\n            if (options.bracketException) {\n                openers.push(\"[\");\n                closers.push(\"]\");\n            }\n\n            if (options.parenException) {\n                openers.push(\"(\");\n                closers.push(\")\");\n            }\n\n            if (options.empty) {\n                openers.push(\")\");\n                closers.push(\"(\");\n            }\n\n            return {\n                openers: openers,\n                closers: closers\n            };\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Determines if a token is one of the exceptions for the opener paren\n         * @param {Object} token The token to check\n         * @returns {boolean} True if the token is one of the exceptions for the opener paren\n         */\n        function isOpenerException(token) {\n            return token.type === \"Punctuator\" && exceptions.openers.indexOf(token.value) >= 0;\n        }\n\n        /**\n         * Determines if a token is one of the exceptions for the closer paren\n         * @param {Object} token The token to check\n         * @returns {boolean} True if the token is one of the exceptions for the closer paren\n         */\n        function isCloserException(token) {\n            return token.type === \"Punctuator\" && exceptions.closers.indexOf(token.value) >= 0;\n        }\n\n        /**\n         * Determines if an opener paren should have a missing space after it\n         * @param {Object} left The paren token\n         * @param {Object} right The token after it\n         * @returns {boolean} True if the paren should have a space\n         */\n        function shouldOpenerHaveSpace(left, right) {\n            if (sourceCode.isSpaceBetweenTokens(left, right)) {\n                return false;\n            }\n\n            if (ALWAYS) {\n                if (right.type === \"Punctuator\" && right.value === \")\") {\n                    return false;\n                }\n                return !isOpenerException(right);\n            } else {\n                return isOpenerException(right);\n            }\n        }\n\n        /**\n         * Determines if an closer paren should have a missing space after it\n         * @param {Object} left The token before the paren\n         * @param {Object} right The paren token\n         * @returns {boolean} True if the paren should have a space\n         */\n        function shouldCloserHaveSpace(left, right) {\n            if (left.type === \"Punctuator\" && left.value === \"(\") {\n                return false;\n            }\n\n            if (sourceCode.isSpaceBetweenTokens(left, right)) {\n                return false;\n            }\n\n            if (ALWAYS) {\n                return !isCloserException(left);\n            } else {\n                return isCloserException(left);\n            }\n        }\n\n        /**\n         * Determines if an opener paren should not have an existing space after it\n         * @param {Object} left The paren token\n         * @param {Object} right The token after it\n         * @returns {boolean} True if the paren should reject the space\n         */\n        function shouldOpenerRejectSpace(left, right) {\n            if (right.type === \"Line\") {\n                return false;\n            }\n\n            if (!astUtils.isTokenOnSameLine(left, right)) {\n                return false;\n            }\n\n            if (!sourceCode.isSpaceBetweenTokens(left, right)) {\n                return false;\n            }\n\n            if (ALWAYS) {\n                return isOpenerException(right);\n            } else {\n                return !isOpenerException(right);\n            }\n        }\n\n        /**\n         * Determines if an closer paren should not have an existing space after it\n         * @param {Object} left The token before the paren\n         * @param {Object} right The paren token\n         * @returns {boolean} True if the paren should reject the space\n         */\n        function shouldCloserRejectSpace(left, right) {\n            if (left.type === \"Punctuator\" && left.value === \"(\") {\n                return false;\n            }\n\n            if (!astUtils.isTokenOnSameLine(left, right)) {\n                return false;\n            }\n\n            if (!sourceCode.isSpaceBetweenTokens(left, right)) {\n                return false;\n            }\n\n            if (ALWAYS) {\n                return isCloserException(left);\n            } else {\n                return !isCloserException(left);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program: function checkParenSpaces(node) {\n                var tokens, prevToken, nextToken;\n\n                exceptions = getExceptions();\n                tokens = sourceCode.tokensAndComments;\n\n                tokens.forEach(function(token, i) {\n                    prevToken = tokens[i - 1];\n                    nextToken = tokens[i + 1];\n\n                    if (token.type !== \"Punctuator\") {\n                        return;\n                    }\n\n                    if (token.value !== \"(\" && token.value !== \")\") {\n                        return;\n                    }\n\n                    if (token.value === \"(\" && shouldOpenerHaveSpace(token, nextToken)) {\n                        context.report({\n                            node: node,\n                            loc: token.loc.start,\n                            message: MISSING_SPACE_MESSAGE,\n                            fix: function(fixer) {\n                                return fixer.insertTextAfter(token, \" \");\n                            }\n                        });\n                    } else if (token.value === \"(\" && shouldOpenerRejectSpace(token, nextToken)) {\n                        context.report({\n                            node: node,\n                            loc: token.loc.start,\n                            message: REJECTED_SPACE_MESSAGE,\n                            fix: function(fixer) {\n                                return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                            }\n                        });\n                    } else if (token.value === \")\" && shouldCloserHaveSpace(prevToken, token)) {\n\n                        // context.report(node, token.loc.start, MISSING_SPACE_MESSAGE);\n                        context.report({\n                            node: node,\n                            loc: token.loc.start,\n                            message: MISSING_SPACE_MESSAGE,\n                            fix: function(fixer) {\n                                return fixer.insertTextBefore(token, \" \");\n                            }\n                        });\n                    } else if (token.value === \")\" && shouldCloserRejectSpace(prevToken, token)) {\n                        context.report({\n                            node: node,\n                            loc: token.loc.start,\n                            message: REJECTED_SPACE_MESSAGE,\n                            fix: function(fixer) {\n                                return fixer.removeRange([prevToken.range[1], token.range[0]]);\n                            }\n                        });\n                    }\n                });\n            }\n        };\n\n    }\n};\n"]}