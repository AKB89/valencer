{"version":3,"sources":["template-curly-spacing.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,IAAI,aAAa,OAAjB;AACA,IAAI,cAAc,KAAlB;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,6EADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,iBAAS,YAPP;;AASF,gBAAQ,CACJ,EAAC,MAAM,CAAC,QAAD,EAAW,OAAX,CAAP,EADI;AATN,KADO;;AAeb,YAAQ,gBAAS,OAAT,EAAkB;AACtB,YAAI,aAAa,QAAQ,aAAR,EAAjB;AACA,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,MAAuB,QAApC;AACA,YAAI,SAAS,SAAS,UAAT,GAAsB,YAAnC;;;;;;;AAOA,iBAAS,kBAAT,CAA4B,KAA5B,EAAmC;AAC/B,gBAAI,YAAY,WAAW,cAAX,CAA0B,KAA1B,CAAhB;;AAEA,gBAAI,aACA,YAAY,IAAZ,CAAiB,MAAM,KAAvB,CADA,IAEA,SAAS,iBAAT,CAA2B,SAA3B,EAAsC,KAAtC,CAFA,IAGA,WAAW,oBAAX,CAAgC,SAAhC,EAA2C,KAA3C,MAAsD,MAH1D,EAIE;AACE,wBAAQ,MAAR,CAAe;AACX,yBAAK,MAAM,GAAN,CAAU,KADJ;AAEX,6BAAS,SAAS,uBAFP;AAGX,yBAAK,aAAS,KAAT,EAAgB;AACjB,4BAAI,MAAJ,EAAY;AACR,mCAAO,MAAM,gBAAN,CAAuB,KAAvB,EAA8B,GAA9B,CAAP;AACH;AACD,+BAAO,MAAM,WAAN,CAAkB,CACrB,UAAU,KAAV,CAAgB,CAAhB,CADqB,EAErB,MAAM,KAAN,CAAY,CAAZ,CAFqB,CAAlB,CAAP;AAIH;AAXU,iBAAf;AAaH;AACJ;;;;;;;AAOD,iBAAS,iBAAT,CAA2B,KAA3B,EAAkC;AAC9B,gBAAI,YAAY,WAAW,aAAX,CAAyB,KAAzB,CAAhB;;AAEA,gBAAI,aACA,WAAW,IAAX,CAAgB,MAAM,KAAtB,CADA,IAEA,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,SAAlC,CAFA,IAGA,WAAW,oBAAX,CAAgC,KAAhC,EAAuC,SAAvC,MAAsD,MAH1D,EAIE;AACE,wBAAQ,MAAR,CAAe;AACX,yBAAK;AACD,8BAAM,MAAM,GAAN,CAAU,GAAV,CAAc,IADnB;AAED,gCAAQ,MAAM,GAAN,CAAU,GAAV,CAAc,MAAd,GAAuB;AAF9B,qBADM;AAKX,6BAAS,SAAS,uBALP;AAMX,yBAAK,aAAS,KAAT,EAAgB;AACjB,4BAAI,MAAJ,EAAY;AACR,mCAAO,MAAM,eAAN,CAAsB,KAAtB,EAA6B,GAA7B,CAAP;AACH;AACD,+BAAO,MAAM,WAAN,CAAkB,CACrB,MAAM,KAAN,CAAY,CAAZ,CADqB,EAErB,UAAU,KAAV,CAAgB,CAAhB,CAFqB,CAAlB,CAAP;AAIH;AAdU,iBAAf;AAgBH;AACJ;;AAED,eAAO;AACH,6BAAiB,yBAAS,IAAT,EAAe;AAC5B,oBAAI,QAAQ,WAAW,aAAX,CAAyB,IAAzB,CAAZ;;AAEA,mCAAmB,KAAnB;AACA,kCAAkB,KAAlB;AACH;AANE,SAAP;AAQH;AAzFY,CAAjB","file":"template-curly-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar OPEN_PAREN = /\\$\\{$/;\nvar CLOSE_PAREN = /^\\}/;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require or disallow spacing around embedded expressions of template strings\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {enum: [\"always\", \"never\"]}\n        ]\n    },\n\n    create: function(context) {\n        var sourceCode = context.getSourceCode();\n        var always = context.options[0] === \"always\";\n        var prefix = always ? \"Expected\" : \"Unexpected\";\n\n        /**\n         * Checks spacing before `}` of a given token.\n         * @param {Token} token - A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingBefore(token) {\n            var prevToken = sourceCode.getTokenBefore(token);\n\n            if (prevToken &&\n                CLOSE_PAREN.test(token.value) &&\n                astUtils.isTokenOnSameLine(prevToken, token) &&\n                sourceCode.isSpaceBetweenTokens(prevToken, token) !== always\n            ) {\n                context.report({\n                    loc: token.loc.start,\n                    message: prefix + \" space(s) before '}'.\",\n                    fix: function(fixer) {\n                        if (always) {\n                            return fixer.insertTextBefore(token, \" \");\n                        }\n                        return fixer.removeRange([\n                            prevToken.range[1],\n                            token.range[0]\n                        ]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Checks spacing after `${` of a given token.\n         * @param {Token} token - A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingAfter(token) {\n            var nextToken = sourceCode.getTokenAfter(token);\n\n            if (nextToken &&\n                OPEN_PAREN.test(token.value) &&\n                astUtils.isTokenOnSameLine(token, nextToken) &&\n                sourceCode.isSpaceBetweenTokens(token, nextToken) !== always\n            ) {\n                context.report({\n                    loc: {\n                        line: token.loc.end.line,\n                        column: token.loc.end.column - 2\n                    },\n                    message: prefix + \" space(s) after '${'.\",\n                    fix: function(fixer) {\n                        if (always) {\n                            return fixer.insertTextAfter(token, \" \");\n                        }\n                        return fixer.removeRange([\n                            token.range[1],\n                            nextToken.range[0]\n                        ]);\n                    }\n                });\n            }\n        }\n\n        return {\n            TemplateElement: function(node) {\n                var token = sourceCode.getFirstToken(node);\n\n                checkSpacingBefore(token);\n                checkSpacingAfter(token);\n            }\n        };\n    }\n};\n"]}