{"version":3,"sources":["strict.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,SAAS,QAAQ,QAAR,CAAb;;;;;;AAMA,IAAI,WAAW;AACX,cAAU,wCADC;AAEX,YAAQ,sCAFG;AAGX,cAAU,mCAHC;AAIX,WAAO,+BAJI;AAKX,iBAAa,qCALF;AAMX,YAAQ,gDANG;AAOX,aAAS,kEAPE;AAQX,0BAAsB;AARX,CAAf;;;;;;;;AAiBA,SAAS,sBAAT,CAAgC,UAAhC,EAA4C;AACxC,QAAI,aAAa,EAAjB;QACI,CADJ;QACO,SADP;;AAGA,SAAK,IAAI,CAAT,EAAY,IAAI,WAAW,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,oBAAY,WAAW,CAAX,CAAZ;;AAEA,YACI,UAAU,IAAV,KAAmB,qBAAnB,IACA,UAAU,UAAV,CAAqB,IAArB,KAA8B,SAD9B,IAEA,UAAU,UAAV,CAAqB,KAArB,KAA+B,YAHnC,EAIE;AACE,uBAAW,CAAX,IAAgB,SAAhB;AACH,SAND,MAMO;AACH;AACH;AACJ;;AAED,WAAO,UAAP;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,4CADX;AAEF,sBAAU,aAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,MAAhC;AADV,SADI;AAPN,KADO;;AAeb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,YAAI,OAAO,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,MAAjC;YACI,eAAe,QAAQ,aAAR,CAAsB,YAAtB,IAAsC,EADzD;YAEI,SAAS,EAFb;YAGI,cAAc,EAHlB;YAII,IAJJ;;AAMA,YAAI,aAAa,aAAjB,EAAgC;AAC5B,mBAAO,SAAP;AACH,SAFD,MAEO,IAAI,SAAS,MAAb,EAAqB;AACxB,mBAAO,aAAa,YAAb,GAA4B,QAA5B,GAAuC,UAA9C;AACH;;;;;;;;;;AAUD,iBAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,GAAnC,EAAwC,OAAxC,EAAiD;AAC7C,gBAAI,CAAJ;;AAEA,iBAAK,IAAI,KAAT,EAAgB,IAAI,GAApB,EAAyB,GAAzB,EAA8B;AAC1B,wBAAQ,MAAR,CAAe,MAAM,CAAN,CAAf,EAAyB,OAAzB;AACH;AACJ;;;;;;;;AAQD,iBAAS,SAAT,CAAmB,KAAnB,EAA0B,OAA1B,EAAmC;AAC/B,wBAAY,KAAZ,EAAmB,CAAnB,EAAsB,MAAM,MAA5B,EAAoC,OAApC;AACH;;;;;;;;AAQD,iBAAS,oBAAT,CAA8B,KAA9B,EAAqC,OAArC,EAA8C;AAC1C,wBAAY,KAAZ,EAAmB,CAAnB,EAAsB,MAAM,MAA5B,EAAoC,OAApC;AACH;;;;;;;;;AASD,iBAAS,2BAAT,CAAqC,IAArC,EAA2C,mBAA3C,EAAgE;AAC5D,gBAAI,YAAY,YAAY,MAAZ,GAAqB,CAArC;gBACI,iBAAiB,OAAO,MAAP,KAAkB,CAAlB,IAAuB,YAAY,MAAZ,KAAuB,CADnE;gBAEI,iBAAiB,OAAO,MAAP,GAAgB,CAAhB,IAAqB,OAAO,OAAO,MAAP,GAAgB,CAAvB,CAF1C;gBAGI,WAAW,oBAAoB,MAApB,GAA6B,CAH5C;;AAKA,gBAAI,QAAJ,EAAc;AACV,oBAAI,cAAJ,EAAoB;AAChB,4BAAQ,MAAR,CAAe,oBAAoB,CAApB,CAAf,EAAuC,SAAS,WAAhD;AACH,iBAFD,MAEO,IAAI,SAAJ,EAAe;AAClB,4BAAQ,MAAR,CAAe,oBAAoB,CAApB,CAAf,EAAuC,SAAS,oBAAhD;AACH;;AAED,qCAAqB,mBAArB,EAA0C,SAAS,QAAnD;AACH,aARD,MAQO,IAAI,cAAJ,EAAoB;AACvB,wBAAQ,MAAR,CAAe,IAAf,EAAqB,SAAS,QAA9B;AACH;;AAED,mBAAO,IAAP,CAAY,kBAAkB,QAA9B;AACH;;;;;;AAMD,iBAAS,0BAAT,GAAsC;AAClC,mBAAO,GAAP;AACH;;;;;;;;;AASD,iBAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,gBAAI,UAAU,KAAK,IAAL,CAAU,IAAV,KAAmB,gBAAjC;gBACI,sBAAsB,UAClB,uBAAuB,KAAK,IAAL,CAAU,IAAjC,CADkB,GACuB,EAFjD;;AAIA,gBAAI,SAAS,UAAb,EAAyB;AACrB,4CAA4B,IAA5B,EAAkC,mBAAlC;AACH,aAFD,MAEO;AACH,0BAAU,mBAAV,EAA+B,SAAS,IAAT,CAA/B;AACH;AACJ;;AAED,eAAO;AACH,qBAAS,UAAS,IAAT,EAAe;AACpB,oBAAI,sBAAsB,uBAAuB,KAAK,IAA5B,CAA1B;;AAEA,oBAAI,KAAK,UAAL,KAAoB,QAAxB,EAAkC;AAC9B,2BAAO,QAAP;AACH;;AAED,oBAAI,SAAS,QAAb,EAAuB;AACnB,wBAAI,KAAK,IAAL,CAAU,MAAV,GAAmB,CAAnB,IAAwB,oBAAoB,MAApB,KAA+B,CAA3D,EAA8D;AAC1D,gCAAQ,MAAR,CAAe,IAAf,EAAqB,SAAS,MAA9B;AACH;AACD,yCAAqB,mBAArB,EAA0C,SAAS,QAAnD;AACH,iBALD,MAKO;AACH,8BAAU,mBAAV,EAA+B,SAAS,IAAT,CAA/B;AACH;AACJ,aAhBE;AAiBH,iCAAqB,aAjBlB;AAkBH,gCAAoB,aAlBjB;AAmBH,qCAAyB;AAnBtB,SAAP;;AAsBA,YAAI,SAAS,UAAb,EAAyB;AACrB,mBAAO,MAAP,CAAc,IAAd,EAAoB;;;AAGhB,2BAAW,YAAW;AAClB,gCAAY,IAAZ,CAAiB,IAAjB;AACH,iBALe;AAMhB,kCAAkB,YAAW;AACzB,gCAAY,GAAZ;AACH,iBARe;;AAUhB,4CAA4B,0BAVZ;AAWhB,2CAA2B,0BAXX;AAYhB,gDAAgC;AAZhB,aAApB;AAcH;;AAED,eAAO,IAAP;AACH;AAhKY,CAAjB","file":"strict-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to control usage of strict mode directives.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar lodash = require(\"lodash\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar messages = {\n    function: \"Use the function form of 'use strict'.\",\n    global: \"Use the global form of 'use strict'.\",\n    multiple: \"Multiple 'use strict' directives.\",\n    never: \"Strict mode is not permitted.\",\n    unnecessary: \"Unnecessary 'use strict' directive.\",\n    module: \"'use strict' is unnecessary inside of modules.\",\n    implied: \"'use strict' is unnecessary when implied strict mode is enabled.\",\n    unnecessaryInClasses: \"'use strict' is unnecessary inside of classes.\"\n};\n\n/**\n * Gets all of the Use Strict Directives in the Directive Prologue of a group of\n * statements.\n * @param {ASTNode[]} statements Statements in the program or function body.\n * @returns {ASTNode[]} All of the Use Strict Directives.\n */\nfunction getUseStrictDirectives(statements) {\n    var directives = [],\n        i, statement;\n\n    for (i = 0; i < statements.length; i++) {\n        statement = statements[i];\n\n        if (\n            statement.type === \"ExpressionStatement\" &&\n            statement.expression.type === \"Literal\" &&\n            statement.expression.value === \"use strict\"\n        ) {\n            directives[i] = statement;\n        } else {\n            break;\n        }\n    }\n\n    return directives;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require or disallow strict mode directives\",\n            category: \"Strict Mode\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                enum: [\"never\", \"global\", \"function\", \"safe\"]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var mode = context.options[0] || \"safe\",\n            ecmaFeatures = context.parserOptions.ecmaFeatures || {},\n            scopes = [],\n            classScopes = [],\n            rule;\n\n        if (ecmaFeatures.impliedStrict) {\n            mode = \"implied\";\n        } else if (mode === \"safe\") {\n            mode = ecmaFeatures.globalReturn ? \"global\" : \"function\";\n        }\n\n        /**\n         * Report a slice of an array of nodes with a given message.\n         * @param {ASTNode[]} nodes Nodes.\n         * @param {string} start Index to start from.\n         * @param {string} end Index to end before.\n         * @param {string} message Message to display.\n         * @returns {void}\n         */\n        function reportSlice(nodes, start, end, message) {\n            var i;\n\n            for (i = start; i < end; i++) {\n                context.report(nodes[i], message);\n            }\n        }\n\n        /**\n         * Report all nodes in an array with a given message.\n         * @param {ASTNode[]} nodes Nodes.\n         * @param {string} message Message to display.\n         * @returns {void}\n         */\n        function reportAll(nodes, message) {\n            reportSlice(nodes, 0, nodes.length, message);\n        }\n\n        /**\n         * Report all nodes in an array, except the first, with a given message.\n         * @param {ASTNode[]} nodes Nodes.\n         * @param {string} message Message to display.\n         * @returns {void}\n         */\n        function reportAllExceptFirst(nodes, message) {\n            reportSlice(nodes, 1, nodes.length, message);\n        }\n\n        /**\n         * Entering a function in 'function' mode pushes a new nested scope onto the\n         * stack. The new scope is true if the nested function is strict mode code.\n         * @param {ASTNode} node The function declaration or expression.\n         * @param {ASTNode[]} useStrictDirectives The Use Strict Directives of the node.\n         * @returns {void}\n         */\n        function enterFunctionInFunctionMode(node, useStrictDirectives) {\n            var isInClass = classScopes.length > 0,\n                isParentGlobal = scopes.length === 0 && classScopes.length === 0,\n                isParentStrict = scopes.length > 0 && scopes[scopes.length - 1],\n                isStrict = useStrictDirectives.length > 0;\n\n            if (isStrict) {\n                if (isParentStrict) {\n                    context.report(useStrictDirectives[0], messages.unnecessary);\n                } else if (isInClass) {\n                    context.report(useStrictDirectives[0], messages.unnecessaryInClasses);\n                }\n\n                reportAllExceptFirst(useStrictDirectives, messages.multiple);\n            } else if (isParentGlobal) {\n                context.report(node, messages.function);\n            }\n\n            scopes.push(isParentStrict || isStrict);\n        }\n\n        /**\n         * Exiting a function in 'function' mode pops its scope off the stack.\n         * @returns {void}\n         */\n        function exitFunctionInFunctionMode() {\n            scopes.pop();\n        }\n\n        /**\n         * Enter a function and either:\n         * - Push a new nested scope onto the stack (in 'function' mode).\n         * - Report all the Use Strict Directives (in the other modes).\n         * @param {ASTNode} node The function declaration or expression.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n            var isBlock = node.body.type === \"BlockStatement\",\n                useStrictDirectives = isBlock ?\n                    getUseStrictDirectives(node.body.body) : [];\n\n            if (mode === \"function\") {\n                enterFunctionInFunctionMode(node, useStrictDirectives);\n            } else {\n                reportAll(useStrictDirectives, messages[mode]);\n            }\n        }\n\n        rule = {\n            Program: function(node) {\n                var useStrictDirectives = getUseStrictDirectives(node.body);\n\n                if (node.sourceType === \"module\") {\n                    mode = \"module\";\n                }\n\n                if (mode === \"global\") {\n                    if (node.body.length > 0 && useStrictDirectives.length === 0) {\n                        context.report(node, messages.global);\n                    }\n                    reportAllExceptFirst(useStrictDirectives, messages.multiple);\n                } else {\n                    reportAll(useStrictDirectives, messages[mode]);\n                }\n            },\n            FunctionDeclaration: enterFunction,\n            FunctionExpression: enterFunction,\n            ArrowFunctionExpression: enterFunction\n        };\n\n        if (mode === \"function\") {\n            lodash.assign(rule, {\n\n                // Inside of class bodies are always strict mode.\n                ClassBody: function() {\n                    classScopes.push(true);\n                },\n                \"ClassBody:exit\": function() {\n                    classScopes.pop();\n                },\n\n                \"FunctionDeclaration:exit\": exitFunctionInFunctionMode,\n                \"FunctionExpression:exit\": exitFunctionInFunctionMode,\n                \"ArrowFunctionExpression:exit\": exitFunctionInFunctionMode\n            });\n        }\n\n        return rule;\n    }\n};\n"]}