{"version":3,"sources":["comma-style.js"],"names":[],"mappings":"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","file":"comma-style-compiled.js","sourcesContent":["/**\n * @fileoverview Comma style - enforces comma styles of two types: last and first\n * @author Vignesh Anand aka vegetableman\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent comma style\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                enum: [\"first\", \"last\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"object\",\n                        additionalProperties: {\n                            type: \"boolean\"\n                        }\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var style = context.options[0] || \"last\",\n            exceptions = {},\n            sourceCode = context.getSourceCode();\n\n        if (context.options.length === 2 && context.options[1].hasOwnProperty(\"exceptions\")) {\n            exceptions = context.options[1].exceptions;\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Determines if a given token is a comma operator.\n         * @param {ASTNode} token The token to check.\n         * @returns {boolean} True if the token is a comma, false if not.\n         * @private\n         */\n        function isComma(token) {\n            return !!token && (token.type === \"Punctuator\") && (token.value === \",\");\n        }\n\n        /**\n         * Validates the spacing around single items in lists.\n         * @param {Token} previousItemToken The last token from the previous item.\n         * @param {Token} commaToken The token representing the comma.\n         * @param {Token} currentItemToken The first token of the current item.\n         * @param {Token} reportItem The item to use when reporting an error.\n         * @returns {void}\n         * @private\n         */\n        function validateCommaItemSpacing(previousItemToken, commaToken, currentItemToken, reportItem) {\n\n            // if single line\n            if (astUtils.isTokenOnSameLine(commaToken, currentItemToken) &&\n                    astUtils.isTokenOnSameLine(previousItemToken, commaToken)) {\n\n                return;\n\n            } else if (!astUtils.isTokenOnSameLine(commaToken, currentItemToken) &&\n                    !astUtils.isTokenOnSameLine(previousItemToken, commaToken)) {\n\n                // lone comma\n                context.report(reportItem, {\n                    line: commaToken.loc.end.line,\n                    column: commaToken.loc.start.column\n                }, \"Bad line breaking before and after ','.\");\n\n            } else if (style === \"first\" && !astUtils.isTokenOnSameLine(commaToken, currentItemToken)) {\n\n                context.report(reportItem, \"',' should be placed first.\");\n\n            } else if (style === \"last\" && astUtils.isTokenOnSameLine(commaToken, currentItemToken)) {\n\n                context.report(reportItem, {\n                    line: commaToken.loc.end.line,\n                    column: commaToken.loc.end.column\n                }, \"',' should be placed last.\");\n            }\n        }\n\n        /**\n         * Checks the comma placement with regards to a declaration/property/element\n         * @param {ASTNode} node The binary expression node to check\n         * @param {string} property The property of the node containing child nodes.\n         * @private\n         * @returns {void}\n         */\n        function validateComma(node, property) {\n            var items = node[property],\n                arrayLiteral = (node.type === \"ArrayExpression\"),\n                previousItemToken;\n\n            if (items.length > 1 || arrayLiteral) {\n\n                // seed as opening [\n                previousItemToken = sourceCode.getFirstToken(node);\n\n                items.forEach(function(item) {\n                    var commaToken = item ? sourceCode.getTokenBefore(item) : previousItemToken,\n                        currentItemToken = item ? sourceCode.getFirstToken(item) : sourceCode.getTokenAfter(commaToken),\n                        reportItem = item || currentItemToken,\n                        tokenBeforeComma = sourceCode.getTokenBefore(commaToken);\n\n                    // Check if previous token is wrapped in parentheses\n                    if (tokenBeforeComma && tokenBeforeComma.value === \")\") {\n                        previousItemToken = tokenBeforeComma;\n                    }\n\n                    /*\n                     * This works by comparing three token locations:\n                     * - previousItemToken is the last token of the previous item\n                     * - commaToken is the location of the comma before the current item\n                     * - currentItemToken is the first token of the current item\n                     *\n                     * These values get switched around if item is undefined.\n                     * previousItemToken will refer to the last token not belonging\n                     * to the current item, which could be a comma or an opening\n                     * square bracket. currentItemToken could be a comma.\n                     *\n                     * All comparisons are done based on these tokens directly, so\n                     * they are always valid regardless of an undefined item.\n                     */\n                    if (isComma(commaToken)) {\n                        validateCommaItemSpacing(previousItemToken, commaToken,\n                                currentItemToken, reportItem);\n                    }\n\n                    previousItemToken = item ? sourceCode.getLastToken(item) : previousItemToken;\n                });\n\n                /*\n                 * Special case for array literals that have empty last items, such\n                 * as [ 1, 2, ]. These arrays only have two items show up in the\n                 * AST, so we need to look at the token to verify that there's no\n                 * dangling comma.\n                 */\n                if (arrayLiteral) {\n\n                    var lastToken = sourceCode.getLastToken(node),\n                        nextToLastToken = sourceCode.getTokenBefore(lastToken);\n\n                    if (isComma(nextToLastToken)) {\n                        validateCommaItemSpacing(\n                            sourceCode.getTokenBefore(nextToLastToken),\n                            nextToLastToken,\n                            lastToken,\n                            lastToken\n                        );\n                    }\n                }\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        var nodes = {};\n\n        if (!exceptions.VariableDeclaration) {\n            nodes.VariableDeclaration = function(node) {\n                validateComma(node, \"declarations\");\n            };\n        }\n        if (!exceptions.ObjectExpression) {\n            nodes.ObjectExpression = function(node) {\n                validateComma(node, \"properties\");\n            };\n        }\n        if (!exceptions.ArrayExpression) {\n            nodes.ArrayExpression = function(node) {\n                validateComma(node, \"elements\");\n            };\n        }\n\n        return nodes;\n    }\n};\n"]}