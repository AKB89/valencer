{"version":3,"sources":["global-require.js"],"names":[],"mappings":";;;;;AAKA;;AAEA,IAAI,qBAAqB,CACrB,sBADqB,EAErB,oBAFqB,EAGrB,kBAHqB,EAIrB,qBAJqB,EAKrB,gBALqB,EAMrB,uBANqB,EAOrB,SAPqB,EAQrB,qBARqB,CAAzB;;;;;;;;AAiBA,SAAS,aAAT,CAAuB,KAAvB,EAA8B,IAA9B,EAAoC;AAChC,QAAI,aAAa,MAAM,UAAN,CAAiB,MAAjB,CAAwB,UAAS,SAAT,EAAoB;AACzD,eAAO,UAAU,UAAV,CAAqB,KAArB,CAA2B,CAA3B,MAAkC,KAAK,KAAL,CAAW,CAAX,CAAlC,IACH,UAAU,UAAV,CAAqB,KAArB,CAA2B,CAA3B,MAAkC,KAAK,KAAL,CAAW,CAAX,CADtC;AAEH,KAHgB,CAAjB;;;AAMA,QAAI,WAAW,MAAX,KAAsB,CAA1B,EAA6B;AACzB,eAAO,WAAW,CAAX,CAAP;AACH,KAFD,MAEO;AACH,eAAO,IAAP;AACH;AACJ;;;;;;;;AAQD,SAAS,UAAT,CAAoB,KAApB,EAA2B,IAA3B,EAAiC;AAC7B,QAAI,YAAY,cAAc,KAAd,EAAqB,IAArB,CAAhB;;AAEA,WAAO,aAAa,UAAU,QAAvB,IAAmC,UAAU,QAAV,CAAmB,IAAnB,CAAwB,MAAxB,GAAiC,CAA3E;AACH;;AAED,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,kEADX;AAEF,sBAAU,sBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,eAAO;AACH,4BAAgB,UAAS,IAAT,EAAe;AAC3B,oBAAI,eAAe,QAAQ,QAAR,EAAnB;oBACI,aADJ;;AAGA,oBAAI,KAAK,MAAL,CAAY,IAAZ,KAAqB,SAArB,IAAkC,CAAC,WAAW,YAAX,EAAyB,KAAK,MAA9B,CAAvC,EAA8E;AAC1E,oCAAgB,QAAQ,YAAR,GAAuB,KAAvB,CAA6B,UAAS,MAAT,EAAiB;AAC1D,+BAAO,mBAAmB,OAAnB,CAA2B,OAAO,IAAlC,IAA0C,CAAC,CAAlD;AACH,qBAFe,CAAhB;AAGA,wBAAI,CAAC,aAAL,EAAoB;AAChB,gCAAQ,MAAR,CAAe,IAAf,EAAqB,uBAArB;AACH;AACJ;AACJ;AAbE,SAAP;AAeH;AA3BY,CAAjB","file":"global-require-compiled.js","sourcesContent":["/**\n * @fileoverview Rule for disallowing require() outside of the top-level module context\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\nvar ACCEPTABLE_PARENTS = [\n    \"AssignmentExpression\",\n    \"VariableDeclarator\",\n    \"MemberExpression\",\n    \"ExpressionStatement\",\n    \"CallExpression\",\n    \"ConditionalExpression\",\n    \"Program\",\n    \"VariableDeclaration\"\n];\n\n/**\n * Finds the escope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n    var references = scope.references.filter(function(reference) {\n        return reference.identifier.range[0] === node.range[0] &&\n            reference.identifier.range[1] === node.range[1];\n    });\n\n    /* istanbul ignore else: correctly returns null */\n    if (references.length === 1) {\n        return references[0];\n    } else {\n        return null;\n    }\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {ASTNode} node The identifier node to check.\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, node) {\n    var reference = findReference(scope, node);\n\n    return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require `require()` calls to be placed at top-level module scope\",\n            category: \"Node.js and CommonJS\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        return {\n            CallExpression: function(node) {\n                var currentScope = context.getScope(),\n                    isGoodRequire;\n\n                if (node.callee.name === \"require\" && !isShadowed(currentScope, node.callee)) {\n                    isGoodRequire = context.getAncestors().every(function(parent) {\n                        return ACCEPTABLE_PARENTS.indexOf(parent.type) > -1;\n                    });\n                    if (!isGoodRequire) {\n                        context.report(node, \"Unexpected require().\");\n                    }\n                }\n            }\n        };\n    }\n};\n"]}