{"version":3,"sources":["require-yield.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,gDADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,QAAQ,EAAZ;;;;;;;AAOA,iBAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,gBAAI,KAAK,SAAT,EAAoB;AAChB,sBAAM,IAAN,CAAW,CAAX;AACH;AACJ;;;;;;;;AAQD,iBAAS,WAAT,CAAqB,IAArB,EAA2B;AACvB,gBAAI,CAAC,KAAK,SAAV,EAAqB;AACjB;AACH;;AAED,gBAAI,aAAa,MAAM,GAAN,EAAjB;;AAEA,gBAAI,eAAe,CAAf,IAAoB,KAAK,IAAL,CAAU,IAAV,CAAe,MAAf,GAAwB,CAAhD,EAAmD;AAC/C,wBAAQ,MAAR,CACI,IADJ,EAEI,gDAFJ;AAGH;AACJ;;AAED,eAAO;AACH,iCAAqB,aADlB;AAEH,wCAA4B,WAFzB;AAGH,gCAAoB,aAHjB;AAIH,uCAA2B,WAJxB;;;AAOH,6BAAiB,YAAW;;;AAGxB,oBAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AAClB,0BAAM,MAAM,MAAN,GAAe,CAArB,KAA2B,CAA3B;AACH;AACJ;AAbE,SAAP;AAeH;AA5DY,CAAjB","file":"require-yield-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag the generator functions that does not have yield.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require generator functions to contain `yield`\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var stack = [];\n\n        /**\n         * If the node is a generator function, start counting `yield` keywords.\n         * @param {Node} node - A function node to check.\n         * @returns {void}\n         */\n        function beginChecking(node) {\n            if (node.generator) {\n                stack.push(0);\n            }\n        }\n\n        /**\n         * If the node is a generator function, end counting `yield` keywords, then\n         * reports result.\n         * @param {Node} node - A function node to check.\n         * @returns {void}\n         */\n        function endChecking(node) {\n            if (!node.generator) {\n                return;\n            }\n\n            var countYield = stack.pop();\n\n            if (countYield === 0 && node.body.body.length > 0) {\n                context.report(\n                    node,\n                    \"This generator function does not have 'yield'.\");\n            }\n        }\n\n        return {\n            FunctionDeclaration: beginChecking,\n            \"FunctionDeclaration:exit\": endChecking,\n            FunctionExpression: beginChecking,\n            \"FunctionExpression:exit\": endChecking,\n\n            // Increases the count of `yield` keyword.\n            YieldExpression: function() {\n\n                /* istanbul ignore else */\n                if (stack.length > 0) {\n                    stack[stack.length - 1] += 1;\n                }\n            }\n        };\n    }\n};\n"]}