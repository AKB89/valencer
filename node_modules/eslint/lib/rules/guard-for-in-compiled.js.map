{"version":3,"sources":["guard-for-in.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,qDADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,4BAAgB,UAAS,IAAT,EAAe;;;;;;AAM3B,oBAAI,OAAO,KAAK,IAAL,CAAU,IAAV,KAAmB,gBAAnB,GAAsC,KAAK,IAAL,CAAU,IAAV,CAAe,CAAf,CAAtC,GAA0D,KAAK,IAA1E;;AAEA,oBAAI,QAAQ,KAAK,IAAL,KAAc,aAA1B,EAAyC;AACrC,4BAAQ,MAAR,CAAe,IAAf,EAAqB,6GAArB;AACH;AACJ;AAbE,SAAP;AAgBH;AA7BY,CAAjB","file":"guard-for-in-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag for-in loops without if statements inside\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require `for-in` loops to include an `if` statement\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            ForInStatement: function(node) {\n\n                /*\n                 * If the for-in statement has {}, then the real body is the body\n                 * of the BlockStatement. Otherwise, just use body as provided.\n                 */\n                var body = node.body.type === \"BlockStatement\" ? node.body.body[0] : node.body;\n\n                if (body && body.type !== \"IfStatement\") {\n                    context.report(node, \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\");\n                }\n            }\n        };\n\n    }\n};\n"]}