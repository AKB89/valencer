{"version":3,"sources":["no-dupe-args.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,wDADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;;;;;AAWtB,iBAAS,WAAT,CAAqB,GAArB,EAA0B;AACtB,mBAAO,IAAI,IAAJ,KAAa,WAApB;AACH;;;;;;;;AAQD,iBAAS,WAAT,CAAqB,IAArB,EAA2B;AACvB,gBAAI,YAAY,QAAQ,oBAAR,CAA6B,IAA7B,CAAhB;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,EAAE,CAAxC,EAA2C;AACvC,oBAAI,WAAW,UAAU,CAAV,CAAf;;;AAGA,oBAAI,OAAO,SAAS,IAAT,CAAc,MAAd,CAAqB,WAArB,CAAX;;AAEA,oBAAI,KAAK,MAAL,IAAe,CAAnB,EAAsB;AAClB,4BAAQ,MAAR,CAAe;AACX,8BAAM,IADK;AAEX,iCAAS,6BAFE;AAGX,8BAAM,EAAC,MAAM,SAAS,IAAhB;AAHK,qBAAf;AAKH;AACJ;AACJ;;;;;;AAMD,eAAO;AACH,iCAAqB,WADlB;AAEH,gCAAoB;AAFjB,SAAP;AAKH;AA5DY,CAAjB","file":"no-dupe-args-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag duplicate arguments\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow duplicate arguments in `function` definitions\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Checks whether or not a given definition is a parameter's.\n         * @param {escope.DefEntry} def - A definition to check.\n         * @returns {boolean} `true` if the definition is a parameter's.\n         */\n        function isParameter(def) {\n            return def.type === \"Parameter\";\n        }\n\n        /**\n         * Determines if a given node has duplicate parameters.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkParams(node) {\n            var variables = context.getDeclaredVariables(node);\n\n            for (var i = 0; i < variables.length; ++i) {\n                var variable = variables[i];\n\n                // Checks and reports duplications.\n                var defs = variable.defs.filter(isParameter);\n\n                if (defs.length >= 2) {\n                    context.report({\n                        node: node,\n                        message: \"Duplicate param '{{name}}'.\",\n                        data: {name: variable.name}\n                    });\n                }\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: checkParams,\n            FunctionExpression: checkParams\n        };\n\n    }\n};\n"]}