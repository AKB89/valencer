{"version":3,"sources":["one-var-declaration-per-line.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,wDADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,CAAC,QAAD,EAAW,iBAAX;AADV,SADI;AAPN,KADO;;AAeb,YAAQ,gBAAS,OAAT,EAAkB;;AAEtB,YAAI,gBAAgB,oDAApB;AACA,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,MAAuB,QAApC;;;;;;;;;;;;AAaA,iBAAS,kBAAT,CAA4B,OAA5B,EAAqC;AACjC,mBAAO,YAAY,cAAZ,IAA8B,YAAY,gBAA1C,IAA8D,YAAY,gBAAjF;AACH;;;;;;;;AAQD,iBAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC3B,gBAAI,mBAAmB,KAAK,MAAL,CAAY,IAA/B,CAAJ,EAA0C;AACtC;AACH;;AAED,gBAAI,eAAe,KAAK,YAAxB;AACA,gBAAI,IAAJ;;AAEA,yBAAa,OAAb,CAAqB,UAAS,OAAT,EAAkB;AACnC,oBAAI,QAAQ,KAAK,GAAL,CAAS,GAAT,CAAa,IAAb,KAAsB,QAAQ,GAAR,CAAY,KAAZ,CAAkB,IAApD,EAA0D;AACtD,wBAAI,UAAU,KAAK,IAAf,IAAuB,QAAQ,IAAnC,EAAyC;AACrC,gCAAQ,MAAR,CAAe;AACX,kCAAM,IADK;AAEX,qCAAS,aAFE;AAGX,iCAAK,QAAQ,GAAR,CAAY;AAHN,yBAAf;AAKH;AACJ;AACD,uBAAO,OAAP;AACH,aAXD;AAYH;;;;;;AAMD,eAAO;AACH,iCAAqB;AADlB,SAAP;AAIH;AAvEY,CAAjB","file":"one-var-declaration-per-line-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to check multiple var declarations per line\n * @author Alberto Rodr√≠guez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require or disallow newlines around `var` declarations\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                enum: [\"always\", \"initializations\"]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var ERROR_MESSAGE = \"Expected variable declaration to be on a new line.\";\n        var always = context.options[0] === \"always\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n\n        /**\n         * Determine if provided keyword is a variant of for specifiers\n         * @private\n         * @param {string} keyword - keyword to test\n         * @returns {boolean} True if `keyword` is a variant of for specifier\n         */\n        function isForTypeSpecifier(keyword) {\n            return keyword === \"ForStatement\" || keyword === \"ForInStatement\" || keyword === \"ForOfStatement\";\n        }\n\n        /**\n         * Checks newlines around variable declarations.\n         * @private\n         * @param {ASTNode} node - `VariableDeclaration` node to test\n         * @returns {void}\n         */\n        function checkForNewLine(node) {\n            if (isForTypeSpecifier(node.parent.type)) {\n                return;\n            }\n\n            var declarations = node.declarations;\n            var prev;\n\n            declarations.forEach(function(current) {\n                if (prev && prev.loc.end.line === current.loc.start.line) {\n                    if (always || prev.init || current.init) {\n                        context.report({\n                            node: node,\n                            message: ERROR_MESSAGE,\n                            loc: current.loc.start\n                        });\n                    }\n                }\n                prev = current;\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            VariableDeclaration: checkForNewLine\n        };\n\n    }\n};\n"]}