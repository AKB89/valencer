{"version":3,"sources":["consistent-this.js"],"names":[],"mappings":"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","file":"consistent-this-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce consistent naming of \"this\" context variables\n * @author Raphael Pigulla\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent naming when capturing the current execution context\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                minLength: 1\n            },\n            uniqueItems: true\n        }\n    },\n\n    create: function(context) {\n        var aliases = [];\n\n        if (context.options.length === 0) {\n            aliases.push(\"that\");\n        } else {\n            aliases = context.options;\n        }\n\n        /**\n         * Reports that a variable declarator or assignment expression is assigning\n         * a non-'this' value to the specified alias.\n         * @param {ASTNode} node - The assigning node.\n         * @param {string} alias - the name of the alias that was incorrectly used.\n         * @returns {void}\n         */\n        function reportBadAssignment(node, alias) {\n            context.report(node,\n                \"Designated alias '{{alias}}' is not assigned to 'this'.\",\n                { alias: alias });\n        }\n\n        /**\n         * Checks that an assignment to an identifier only assigns 'this' to the\n         * appropriate alias, and the alias is only assigned to 'this'.\n         * @param {ASTNode} node - The assigning node.\n         * @param {Identifier} name - The name of the variable assigned to.\n         * @param {Expression} value - The value of the assignment.\n         * @returns {void}\n         */\n        function checkAssignment(node, name, value) {\n            var isThis = value.type === \"ThisExpression\";\n\n            if (aliases.indexOf(name) !== -1) {\n                if (!isThis || node.operator && node.operator !== \"=\") {\n                    reportBadAssignment(node, name);\n                }\n            } else if (isThis) {\n                context.report(node,\n                    \"Unexpected alias '{{name}}' for 'this'.\", { name: name });\n            }\n        }\n\n        /**\n         * Ensures that a variable declaration of the alias in a program or function\n         * is assigned to the correct value.\n         * @param {string} alias alias the check the assignment of.\n         * @param {object} scope scope of the current code we are checking.\n         * @private\n         * @returns {void}\n         */\n        function checkWasAssigned(alias, scope) {\n            var variable = scope.set.get(alias);\n\n            if (!variable) {\n                return;\n            }\n\n            if (variable.defs.some(function(def) {\n                return def.node.type === \"VariableDeclarator\" &&\n                def.node.init !== null;\n            })) {\n                return;\n            }\n\n            // The alias has been declared and not assigned: check it was\n            // assigned later in the same scope.\n            if (!variable.references.some(function(reference) {\n                var write = reference.writeExpr;\n\n                return (\n                    reference.from === scope &&\n                    write && write.type === \"ThisExpression\" &&\n                    write.parent.operator === \"=\"\n                );\n            })) {\n                variable.defs.map(function(def) {\n                    return def.node;\n                }).forEach(function(node) {\n                    reportBadAssignment(node, alias);\n                });\n            }\n        }\n\n        /**\n         * Check each alias to ensure that is was assinged to the correct value.\n         * @returns {void}\n         */\n        function ensureWasAssigned() {\n            var scope = context.getScope();\n\n            aliases.forEach(function(alias) {\n                checkWasAssigned(alias, scope);\n            });\n        }\n\n        return {\n            \"Program:exit\": ensureWasAssigned,\n            \"FunctionExpression:exit\": ensureWasAssigned,\n            \"FunctionDeclaration:exit\": ensureWasAssigned,\n\n            VariableDeclarator: function(node) {\n                var id = node.id;\n                var isDestructuring =\n                    id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\";\n\n                if (node.init !== null && !isDestructuring) {\n                    checkAssignment(node, id.name, node.init);\n                }\n            },\n\n            AssignmentExpression: function(node) {\n                if (node.left.type === \"Identifier\") {\n                    checkAssignment(node, node.left.name, node.right);\n                }\n            }\n        };\n\n    }\n};\n"]}