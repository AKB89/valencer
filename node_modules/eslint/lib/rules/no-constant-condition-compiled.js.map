{"version":3,"sources":["no-constant-condition.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,6CADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,QADV;AAEI,wBAAY;AACR,4BAAY;AACR,0BAAM;AADE;AADJ,aAFhB;AAOI,kCAAsB;AAP1B,SADI;AAPN,KADO;;AAsBb,YAAQ,gBAAS,OAAT,EAAkB;AACtB,YAAI,UAAU,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,EAApC;YACI,aAAa,QAAQ,UAAR,KAAuB,KADxC;;;;;;;;;;;;AAcA,iBAAS,iBAAT,CAA2B,IAA3B,EAAiC,QAAjC,EAA2C;AACvC,oBAAQ,KAAK,IAAb;AACI,qBAAK,SAAL;AACI,2BAAQ,aAAa,IAAb,IAAqB,KAAK,KAAL,KAAe,IAArC,IACC,aAAa,IAAb,IAAqB,KAAK,KAAL,KAAe,KAD5C;AAEJ,qBAAK,mBAAL;AACI,2BAAO,kBAAkB,KAAK,IAAvB,EAA6B,KAAK,QAAlC,KACE,kBAAkB,KAAK,KAAvB,EAA8B,KAAK,QAAnC,CADT;;;AALR;AAUA,mBAAO,KAAP;AACH;;;;;;;;;;AAUD,iBAAS,UAAT,CAAoB,IAApB,EAA0B,iBAA1B,EAA6C;AACzC,oBAAQ,KAAK,IAAb;AACI,qBAAK,SAAL;AACA,qBAAK,yBAAL;AACA,qBAAK,oBAAL;AACA,qBAAK,kBAAL;AACA,qBAAK,iBAAL;AACI,2BAAO,IAAP;;AAEJ,qBAAK,iBAAL;AACI,2BAAQ,KAAK,QAAL,KAAkB,QAAlB,IAA8B,iBAA/B,IACH,WAAW,KAAK,QAAhB,EAA0B,IAA1B,CADJ;;AAGJ,qBAAK,kBAAL;AACI,2BAAO,WAAW,KAAK,IAAhB,EAAsB,KAAtB,KACC,WAAW,KAAK,KAAhB,EAAuB,KAAvB,CADD,IAEC,KAAK,QAAL,KAAkB,IAF1B;AAGJ,qBAAK,mBAAL;AACI,wBAAI,iBAAiB,WAAW,KAAK,IAAhB,EAAsB,iBAAtB,CAArB;AACA,wBAAI,kBAAkB,WAAW,KAAK,KAAhB,EAAuB,iBAAvB,CAAtB;AACA,wBAAI,qBAAsB,kBAAkB,kBAAkB,KAAK,IAAvB,EAA6B,KAAK,QAAlC,CAA5C;AACA,wBAAI,sBAAuB,mBAAmB,kBAAkB,KAAK,KAAvB,EAA8B,KAAK,QAAnC,CAA9C;;AAEA,2BAAQ,kBAAkB,eAAnB,IAAuC,kBAAvC,IAA6D,mBAApE;AACJ,qBAAK,sBAAL;AACI,2BAAQ,KAAK,QAAL,KAAkB,GAAnB,IAA2B,WAAW,KAAK,KAAhB,EAAuB,iBAAvB,CAAlC;;AAEJ,qBAAK,oBAAL;AACI,2BAAO,WAAW,KAAK,WAAL,CAAiB,KAAK,WAAL,CAAiB,MAAjB,GAA0B,CAA3C,CAAX,EAA0D,iBAA1D,CAAP;;;AA3BR;AA+BA,mBAAO,KAAP;AACH;;;;;;;;AAQD,iBAAS,sBAAT,CAAgC,IAAhC,EAAsC;AAClC,gBAAI,KAAK,IAAL,IAAa,WAAW,KAAK,IAAhB,EAAsB,IAAtB,CAAjB,EAA8C;AAC1C,wBAAQ,MAAR,CAAe,IAAf,EAAqB,gCAArB;AACH;AACJ;;;;;;;;AAQD,iBAAS,SAAT,CAAmB,IAAnB,EAAyB;AACrB,gBAAI,UAAJ,EAAgB;AACZ,uCAAuB,IAAvB;AACH;AACJ;;;;;;AAMD,eAAO;AACH,mCAAuB,sBADpB;AAEH,yBAAa,sBAFV;AAGH,4BAAgB,SAHb;AAIH,8BAAkB,SAJf;AAKH,0BAAc;AALX,SAAP;AAQH;AAlIY,CAAjB","file":"no-constant-condition-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use constant conditions\n * @author Christian Schulz <http://rndm.de>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow constant expressions in conditions\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    checkLoops: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n\n        ]\n    },\n\n    create: function(context) {\n        var options = context.options[0] || {},\n            checkLoops = options.checkLoops !== false;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n\n        /**\n         * Checks if a branch node of LogicalExpression short circuits the whole condition\n         * @param {ASTNode} node The branch of main condition which needs to be checked\n         * @param {string} operator The operator of the main LogicalExpression.\n         * @returns {boolean} true when condition short circuits whole condition\n         */\n        function isLogicalIdentity(node, operator) {\n            switch (node.type) {\n                case \"Literal\":\n                    return (operator === \"||\" && node.value === true) ||\n                           (operator === \"&&\" && node.value === false);\n                case \"LogicalExpression\":\n                    return isLogicalIdentity(node.left, node.operator) ||\n                             isLogicalIdentity(node.right, node.operator);\n\n                     // no default\n            }\n            return false;\n        }\n\n        /**\n         * Checks if a node has a constant truthiness value.\n         * @param {ASTNode} node The AST node to check.\n         * @param {boolean} inBooleanPosition `false` if checking branch of a condition.\n         *  `true` in all other cases\n         * @returns {Bool} true when node's truthiness is constant\n         * @private\n         */\n        function isConstant(node, inBooleanPosition) {\n            switch (node.type) {\n                case \"Literal\":\n                case \"ArrowFunctionExpression\":\n                case \"FunctionExpression\":\n                case \"ObjectExpression\":\n                case \"ArrayExpression\":\n                    return true;\n\n                case \"UnaryExpression\":\n                    return (node.operator === \"typeof\" && inBooleanPosition) ||\n                        isConstant(node.argument, true);\n\n                case \"BinaryExpression\":\n                    return isConstant(node.left, false) &&\n                            isConstant(node.right, false) &&\n                            node.operator !== \"in\";\n                case \"LogicalExpression\":\n                    var isLeftConstant = isConstant(node.left, inBooleanPosition);\n                    var isRightConstant = isConstant(node.right, inBooleanPosition);\n                    var isLeftShortCircuit = (isLeftConstant && isLogicalIdentity(node.left, node.operator));\n                    var isRightShortCircuit = (isRightConstant && isLogicalIdentity(node.right, node.operator));\n\n                    return (isLeftConstant && isRightConstant) || isLeftShortCircuit || isRightShortCircuit;\n                case \"AssignmentExpression\":\n                    return (node.operator === \"=\") && isConstant(node.right, inBooleanPosition);\n\n                case \"SequenceExpression\":\n                    return isConstant(node.expressions[node.expressions.length - 1], inBooleanPosition);\n\n                // no default\n            }\n            return false;\n        }\n\n        /**\n         * Reports when the given node contains a constant condition.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkConstantCondition(node) {\n            if (node.test && isConstant(node.test, true)) {\n                context.report(node, \"Unexpected constant condition.\");\n            }\n        }\n\n        /**\n         * Checks node when checkLoops option is enabled\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkLoop(node) {\n            if (checkLoops) {\n                checkConstantCondition(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ConditionalExpression: checkConstantCondition,\n            IfStatement: checkConstantCondition,\n            WhileStatement: checkLoop,\n            DoWhileStatement: checkLoop,\n            ForStatement: checkLoop\n        };\n\n    }\n};\n"]}