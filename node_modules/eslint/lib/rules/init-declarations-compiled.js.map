{"version":3,"sources":["init-declarations.js"],"names":[],"mappings":";;;;;AAKA;;;;;;;;;;;;AAWA,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AACtB,WAAO,MAAM,IAAN,KAAe,gBAAf,IACP,MAAM,IAAN,KAAe,gBADR,IAEP,MAAM,IAAN,KAAe,cAFf;AAGH;;;;;;;AAOD,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,QAAI,cAAc,KAAK,MAAvB;AACA,QAAI,QAAQ,YAAY,MAAxB;;AAEA,QAAI,UAAU,KAAV,CAAJ,EAAsB;AAClB,YAAI,MAAM,IAAN,KAAe,cAAnB,EAAmC;AAC/B,mBAAO,MAAM,IAAN,KAAe,WAAtB;AACH;AACD,eAAO,MAAM,IAAN,KAAe,WAAtB;AACH;AACD,WAAO,QAAQ,KAAK,IAAb,CAAP;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,0DADX;AAEF,sBAAU,WAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AACJ,mBAAO,CACH;AACI,sBAAM,OADV;AAEI,uBAAO,CACH;AACI,0BAAM,CAAC,QAAD;AADV,iBADG,CAFX;AAOI,0BAAU,CAPd;AAQI,0BAAU;AARd,aADG,EAWH;AACI,sBAAM,OADV;AAEI,uBAAO,CACH;AACI,0BAAM,CAAC,OAAD;AADV,iBADG,EAIH;AACI,0BAAM,QADV;AAEI,gCAAY;AACR,2CAAmB;AACf,kCAAM;AADS;AADX,qBAFhB;AAOI,0CAAsB;AAP1B,iBAJG,CAFX;AAgBI,0BAAU,CAhBd;AAiBI,0BAAU;AAjBd,aAXG;AADH;AAPN,KADO;;AA2Cb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,YAAI,cAAc,QAAlB;YACI,aAAa,OADjB;;AAGA,YAAI,OAAO,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,WAAjC;AACA,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,EAAnC;;;;;;AAMA,eAAO;AACH,wCAA4B,UAAS,IAAT,EAAe;;AAEvC,oBAAI,OAAO,KAAK,IAAhB;oBACI,eAAe,KAAK,YADxB;;AAGA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,aAAa,MAAjC,EAAyC,EAAE,CAA3C,EAA8C;AAC1C,wBAAI,cAAc,aAAa,CAAb,CAAlB;wBACI,KAAK,YAAY,EADrB;wBAEI,cAAc,cAAc,WAAd,CAFlB;wBAGI,mBAAmB,OAAO,iBAAP,IAA4B,UAAU,KAAK,MAAf,CAHnD;;AAKA,wBAAI,GAAG,IAAH,KAAY,YAAhB,EAA8B;AAC1B;AACH;;AAED,wBAAI,SAAS,WAAT,IAAwB,CAAC,WAA7B,EAA0C;AACtC,gCAAQ,MAAR,CAAe,WAAf,EAA4B,eAAe,GAAG,IAAlB,GAAyB,yCAArD;AACH,qBAFD,MAEO,IAAI,SAAS,UAAT,IAAuB,SAAS,OAAhC,IAA2C,WAA3C,IAA0D,CAAC,gBAA/D,EAAiF;AACpF,gCAAQ,MAAR,CAAe,WAAf,EAA4B,eAAe,GAAG,IAAlB,GAAyB,6CAArD;AACH;AACJ;AACJ;AAtBE,SAAP;AAwBH;AA/EY,CAAjB","file":"init-declarations-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to control the style of variable initializations.\n * @author Colin Ihrig\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a for loop.\n * @param {ASTNode} block - A node to check.\n * @returns {boolean} `true` when the node is a for loop.\n */\nfunction isForLoop(block) {\n    return block.type === \"ForInStatement\" ||\n    block.type === \"ForOfStatement\" ||\n    block.type === \"ForStatement\";\n}\n\n/**\n * Checks whether or not a given declarator node has its initializer.\n * @param {ASTNode} node - A declarator node to check.\n * @returns {boolean} `true` when the node has its initializer.\n */\nfunction isInitialized(node) {\n    var declaration = node.parent;\n    var block = declaration.parent;\n\n    if (isForLoop(block)) {\n        if (block.type === \"ForStatement\") {\n            return block.init === declaration;\n        }\n        return block.left === declaration;\n    }\n    return Boolean(node.init);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require or disallow initialization in `var` declarations\",\n            category: \"Variables\",\n            recommended: false\n        },\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                ignoreForLoopInit: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        }\n    },\n\n    create: function(context) {\n\n        var MODE_ALWAYS = \"always\",\n            MODE_NEVER = \"never\";\n\n        var mode = context.options[0] || MODE_ALWAYS;\n        var params = context.options[1] || {};\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            \"VariableDeclaration:exit\": function(node) {\n\n                var kind = node.kind,\n                    declarations = node.declarations;\n\n                for (var i = 0; i < declarations.length; ++i) {\n                    var declaration = declarations[i],\n                        id = declaration.id,\n                        initialized = isInitialized(declaration),\n                        isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);\n\n                    if (id.type !== \"Identifier\") {\n                        continue;\n                    }\n\n                    if (mode === MODE_ALWAYS && !initialized) {\n                        context.report(declaration, \"Variable '\" + id.name + \"' should be initialized on declaration.\");\n                    } else if (mode === MODE_NEVER && kind !== \"const\" && initialized && !isIgnoredForLoop) {\n                        context.report(declaration, \"Variable '\" + id.name + \"' should not be initialized on declaration.\");\n                    }\n                }\n            }\n        };\n    }\n};\n"]}