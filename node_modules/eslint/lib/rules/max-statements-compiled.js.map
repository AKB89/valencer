{"version":3,"sources":["max-statements.js"],"names":[],"mappings":"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","file":"max-statements-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to set the maximum number of statements in a function.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce a maximum number of statements allowed in `function` blocks\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    ignoreTopLevelFunctions: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        var functionStack = [],\n            option = context.options[0],\n            maxStatements = 10,\n            ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false,\n            topLevelFunctions = [];\n\n        if (typeof option === \"object\" && option.hasOwnProperty(\"maximum\") && typeof option.maximum === \"number\") {\n            maxStatements = option.maximum;\n        }\n        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {\n            maxStatements = option.max;\n        }\n        if (typeof option === \"number\") {\n            maxStatements = option;\n        }\n\n        /**\n         * Reports a node if it has too many statements\n         * @param {ASTNode} node node to evaluate\n         * @param {int} count Number of statements in node\n         * @param {int} max Maximum number of statements allowed\n         * @returns {void}\n         * @private\n         */\n        function reportIfTooManyStatements(node, count, max) {\n            if (count > max) {\n                context.report(\n                    node,\n                    \"This function has too many statements ({{count}}). Maximum allowed is {{max}}.\",\n                    { count: count, max: max });\n            }\n        }\n\n        /**\n         * When parsing a new function, store it in our function stack\n         * @returns {void}\n         * @private\n         */\n        function startFunction() {\n            functionStack.push(0);\n        }\n\n        /**\n         * Evaluate the node at the end of function\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function endFunction(node) {\n            var count = functionStack.pop();\n\n            if (ignoreTopLevelFunctions && functionStack.length === 0) {\n                topLevelFunctions.push({ node: node, count: count});\n            } else {\n                reportIfTooManyStatements(node, count, maxStatements);\n            }\n        }\n\n        /**\n         * Increment the count of the functions\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function countStatements(node) {\n            functionStack[functionStack.length - 1] += node.body.length;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: startFunction,\n            FunctionExpression: startFunction,\n            ArrowFunctionExpression: startFunction,\n\n            BlockStatement: countStatements,\n\n            \"FunctionDeclaration:exit\": endFunction,\n            \"FunctionExpression:exit\": endFunction,\n            \"ArrowFunctionExpression:exit\": endFunction,\n\n            \"Program:exit\": function() {\n                if (topLevelFunctions.length === 1) {\n                    return;\n                }\n\n                topLevelFunctions.forEach(function(element) {\n                    var count = element.count;\n                    var node = element.node;\n\n                    reportIfTooManyStatements(node, count, maxStatements);\n                });\n            }\n        };\n\n    }\n};\n"]}