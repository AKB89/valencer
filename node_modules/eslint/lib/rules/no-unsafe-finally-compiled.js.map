{"version":3,"sources":["no-unsafe-finally.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,kCAAkC,oFAAtC;AACA,IAAI,2BAA2B,+KAA/B;AACA,IAAI,8BAA8B,+JAAlC;;;;;;AAOA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,oDADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX;AADJ,KADO;AAQb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;;AAQtB,iBAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC1B,mBAAO,KAAK,MAAL,CAAY,IAAZ,KAAqB,cAArB,IAAuC,KAAK,MAAL,CAAY,SAAZ,KAA0B,IAAxE;AACH;;;;;;;;;AASD,iBAAS,gBAAT,CAA0B,IAA1B,EAAgC,KAAhC,EAAuC;AACnC,gBAAI,cAAc,KAAlB;AACA,gBAAI,gBAAJ;;AAEA,gBAAI,KAAK,IAAL,KAAc,gBAAd,IAAkC,CAAC,KAAK,KAA5C,EAAmD;AAC/C,mCAAmB,wBAAnB;AACH,aAFD,MAEO,IAAI,KAAK,IAAL,KAAc,mBAAlB,EAAuC;AAC1C,mCAAmB,2BAAnB;AACH,aAFM,MAEA;AACH,mCAAmB,+BAAnB;AACH;;AAED,mBAAO,QAAQ,CAAC,iBAAiB,IAAjB,CAAsB,KAAK,IAA3B,CAAhB,EAAkD;AAC9C,oBAAI,KAAK,MAAL,CAAY,KAAZ,IAAqB,KAArB,IAA+B,KAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,KAA2B,MAAM,IAApE,EAA2E;AACvE,kCAAc,IAAd;AACH;AACD,oBAAI,eAAe,IAAf,CAAJ,EAA0B;AACtB,wBAAI,SAAS,WAAb,EAA0B;AACtB,+BAAO,KAAP;AACH;AACD,2BAAO,IAAP;AACH;AACD,uBAAO,KAAK,MAAZ;AACH;AACD,mBAAO,KAAP;AACH;;;;;;;;AAQD,iBAAS,KAAT,CAAe,IAAf,EAAqB;AACjB,gBAAI,iBAAiB,IAAjB,EAAuB,KAAK,KAA5B,CAAJ,EAAwC;AACpC,wBAAQ,MAAR,CAAe;AACX,6BAAS,qBAAqB,KAAK,IADxB;AAEX,0BAAM,IAFK;AAGX,0BAAM,KAAK,GAAL,CAAS,IAHJ;AAIX,4BAAQ,KAAK,GAAL,CAAS;AAJN,iBAAf;AAMH;AACJ;;AAED,eAAO;AACH,6BAAiB,KADd;AAEH,4BAAgB,KAFb;AAGH,4BAAgB,KAHb;AAIH,+BAAmB;AAJhB,SAAP;AAMH;AA7EY,CAAjB","file":"no-unsafe-finally-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag unsafe statements in finally block\n * @author Onur Temizkan\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar SENTINEL_NODE_TYPE_RETURN_THROW = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/;\nvar SENTINEL_NODE_TYPE_BREAK = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement|SwitchStatement)$/;\nvar SENTINEL_NODE_TYPE_CONTINUE = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement)$/;\n\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow control flow statements in finally blocks\",\n            category: \"Possible Errors\",\n            recommended: false\n        }\n    },\n    create: function(context) {\n\n        /**\n         * Checks if the node is the finalizer of a TryStatement\n         *\n         * @param {ASTNode} node - node to check.\n         * @returns {Boolean} - true if the node is the finalizer of a TryStatement\n         */\n        function isFinallyBlock(node) {\n            return node.parent.type === \"TryStatement\" && node.parent.finalizer === node;\n        }\n\n        /**\n         * Climbs up the tree if the node is not a sentinel node\n         *\n         * @param {ASTNode} node - node to check.\n         * @param {String} label - label of the break or continue statement\n         * @returns {Boolean} - return whether the node is a finally block or a sentinel node\n         */\n        function isInFinallyBlock(node, label) {\n            var labelInside = false;\n            var sentinelNodeType;\n\n            if (node.type === \"BreakStatement\" && !node.label) {\n                sentinelNodeType = SENTINEL_NODE_TYPE_BREAK;\n            } else if (node.type === \"ContinueStatement\") {\n                sentinelNodeType = SENTINEL_NODE_TYPE_CONTINUE;\n            } else {\n                sentinelNodeType = SENTINEL_NODE_TYPE_RETURN_THROW;\n            }\n\n            while (node && !sentinelNodeType.test(node.type)) {\n                if (node.parent.label && label && (node.parent.label.name === label.name)) {\n                    labelInside = true;\n                }\n                if (isFinallyBlock(node)) {\n                    if (label && labelInside) {\n                        return false;\n                    }\n                    return true;\n                }\n                node = node.parent;\n            }\n            return false;\n        }\n\n        /**\n         * Checks whether the possibly-unsafe statement is inside a finally block.\n         *\n         * @param {ASTNode} node - node to check.\n         * @returns {void}\n         */\n        function check(node) {\n            if (isInFinallyBlock(node, node.label)) {\n                context.report({\n                    message: \"Unsafe usage of \" + node.type,\n                    node: node,\n                    line: node.loc.line,\n                    column: node.loc.column\n                });\n            }\n        }\n\n        return {\n            ReturnStatement: check,\n            ThrowStatement: check,\n            BreakStatement: check,\n            ContinueStatement: check\n        };\n    }\n};\n"]}