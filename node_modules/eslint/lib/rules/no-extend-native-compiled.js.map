{"version":3,"sources":["no-extend-native.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,UAAU,QAAQ,SAAR,CAAd;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,iCADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,QADV;AAEI,wBAAY;AACR,4BAAY;AACR,0BAAM,OADE;AAER,2BAAO;AACH,8BAAM;AADH,qBAFC;AAKR,iCAAa;AALL;AADJ,aAFhB;AAWI,kCAAsB;AAX1B,SADI;AAPN,KADO;;AAyBb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,EAAnC;AACA,YAAI,aAAa,OAAO,UAAP,IAAqB,EAAtC;AACA,YAAI,mBAAmB,OAAO,IAAP,CAAY,QAAQ,OAApB,EAA6B,MAA7B,CAAoC,UAAS,OAAT,EAAkB;AACzE,mBAAO,QAAQ,CAAR,EAAW,WAAX,OAA6B,QAAQ,CAAR,CAApC;AACH,SAFsB,CAAvB;;AAIA,YAAI,WAAW,MAAf,EAAuB;AACnB,+BAAmB,iBAAiB,MAAjB,CAAwB,UAAS,OAAT,EAAkB;AACzD,uBAAO,WAAW,OAAX,CAAmB,OAAnB,MAAgC,CAAC,CAAxC;AACH,aAFkB,CAAnB;AAGH;;AAED,eAAO;;;AAGH,kCAAsB,UAAS,IAAT,EAAe;AACjC,oBAAI,MAAM,KAAK,IAAf;oBACI,YADJ;;AAGA,oBAAI,IAAI,IAAJ,KAAa,kBAAb,IAAmC,IAAI,MAAJ,CAAW,IAAX,KAAoB,kBAA3D,EAA+E;AAC3E;AACH;;AAED,+BAAe,IAAI,MAAJ,CAAW,QAAX,GACX,IAAI,MAAJ,CAAW,QAAX,CAAoB,IAApB,KAA6B,SAA7B,IAA0C,IAAI,MAAJ,CAAW,QAAX,CAAoB,KAApB,KAA8B,WAD7D,GAEX,IAAI,MAAJ,CAAW,QAAX,CAAoB,IAApB,KAA6B,WAFjC;;AAIA,oBAAI,CAAC,YAAL,EAAmB;AACf;AACH;;AAED,iCAAiB,OAAjB,CAAyB,UAAS,OAAT,EAAkB;AACvC,wBAAI,IAAI,MAAJ,CAAW,MAAX,CAAkB,IAAlB,KAA2B,OAA/B,EAAwC;AACpC,gCAAQ,MAAR,CAAe,IAAf,EAAqB,UAAU,0DAA/B;AACH;AACJ,iBAJD;AAKH,aAxBE;;;AA2BH,4BAAgB,UAAS,IAAT,EAAe;;AAE3B,oBAAI,SAAS,KAAK,MAAlB;oBACI,OADJ;oBAEI,MAFJ;;;AAKA,oBAAI,OAAO,IAAP,KAAgB,kBAAhB,IACA,OAAO,MAAP,CAAc,IAAd,KAAuB,QADvB,KAEC,OAAO,QAAP,CAAgB,IAAhB,KAAyB,gBAAzB,IAA6C,OAAO,QAAP,CAAgB,IAAhB,KAAyB,kBAFvE,CAAJ,EAEgG;;;AAG5F,8BAAU,KAAK,SAAL,CAAe,CAAf,CAAV;AACA,6BAAS,WAAW,QAAQ,MAA5B;AACA,wBAAI,UACA,OAAO,IAAP,KAAgB,YADhB,IAEC,iBAAiB,OAAjB,CAAyB,OAAO,IAAhC,IAAwC,CAAC,CAF1C,IAGA,QAAQ,QAAR,CAAiB,IAAjB,KAA0B,WAH9B,EAG2C;;AAEvC,gCAAQ,MAAR,CAAe,IAAf,EAAqB,OAAO,IAAP,GAAc,0DAAnC;AACH;AACJ;AAEJ;AAlDE,SAAP;AAqDH;AA5FY,CAAjB","file":"no-extend-native-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag adding properties to native object's prototypes.\n * @author David Nelson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar globals = require(\"globals\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow extending native types\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        },\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var config = context.options[0] || {};\n        var exceptions = config.exceptions || [];\n        var modifiedBuiltins = Object.keys(globals.builtin).filter(function(builtin) {\n            return builtin[0].toUpperCase() === builtin[0];\n        });\n\n        if (exceptions.length) {\n            modifiedBuiltins = modifiedBuiltins.filter(function(builtIn) {\n                return exceptions.indexOf(builtIn) === -1;\n            });\n        }\n\n        return {\n\n            // handle the Array.prototype.extra style case\n            AssignmentExpression: function(node) {\n                var lhs = node.left,\n                    affectsProto;\n\n                if (lhs.type !== \"MemberExpression\" || lhs.object.type !== \"MemberExpression\") {\n                    return;\n                }\n\n                affectsProto = lhs.object.computed ?\n                    lhs.object.property.type === \"Literal\" && lhs.object.property.value === \"prototype\" :\n                    lhs.object.property.name === \"prototype\";\n\n                if (!affectsProto) {\n                    return;\n                }\n\n                modifiedBuiltins.forEach(function(builtin) {\n                    if (lhs.object.object.name === builtin) {\n                        context.report(node, builtin + \" prototype is read only, properties should not be added.\");\n                    }\n                });\n            },\n\n            // handle the Object.definePropert[y|ies](Array.prototype) case\n            CallExpression: function(node) {\n\n                var callee = node.callee,\n                    subject,\n                    object;\n\n                // only worry about Object.definePropert[y|ies]\n                if (callee.type === \"MemberExpression\" &&\n                    callee.object.name === \"Object\" &&\n                    (callee.property.name === \"defineProperty\" || callee.property.name === \"defineProperties\")) {\n\n                    // verify the object being added to is a native prototype\n                    subject = node.arguments[0];\n                    object = subject && subject.object;\n                    if (object &&\n                        object.type === \"Identifier\" &&\n                        (modifiedBuiltins.indexOf(object.name) > -1) &&\n                        subject.property.name === \"prototype\") {\n\n                        context.report(node, object.name + \" prototype is read only, properties should not be added.\");\n                    }\n                }\n\n            }\n        };\n\n    }\n};\n"]}