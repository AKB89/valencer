{"version":3,"sources":["jsx-quotes.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,IAAI,iBAAiB;AACjB,qBAAiB;AACb,eAAO,IADM;AAEb,qBAAa,aAFA;AAGb,iBAAS,UAAS,GAAT,EAAc;AACnB,mBAAO,IAAI,OAAJ,CAAY,IAAZ,EAAkB,IAAlB,CAAP;AACH;AALY,KADA;AAQjB,qBAAiB;AACb,eAAO,GADM;AAEb,qBAAa,aAFA;AAGb,iBAAS,UAAS,GAAT,EAAc;AACnB,mBAAO,IAAI,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAAP;AACH;AALY;AARA,CAArB;;;;;;AAqBA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,gFADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,iBAAS,YAPP;;AASF,gBAAQ,CACJ;AACI,kBAAM,CAAE,eAAF,EAAmB,eAAnB;AADV,SADI;AATN,KADO;;AAiBb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,cAAc,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,eAAxC;YACI,UAAU,eAAe,WAAf,CADd;;;;;;;;AASA,iBAAS,kBAAT,CAA4B,IAA5B,EAAkC;AAC9B,mBAAO,KAAK,KAAL,CAAW,OAAX,CAAmB,QAAQ,KAA3B,MAAsC,CAAC,CAAvC,IAA4C,SAAS,cAAT,CAAwB,KAAK,GAA7B,EAAkC,QAAQ,KAA1C,CAAnD;AACH;;AAED,eAAO;AACH,0BAAc,UAAS,IAAT,EAAe;AACzB,oBAAI,iBAAiB,KAAK,KAA1B;;AAEA,oBAAI,kBAAkB,SAAS,eAAT,CAAyB,cAAzB,CAAlB,IAA8D,CAAC,mBAAmB,cAAnB,CAAnE,EAAuG;AACnG,4BAAQ,MAAR,CAAe;AACX,8BAAM,cADK;AAEX,iCAAS,yBAAyB,QAAQ,WAAjC,GAA+C,GAF7C;AAGX,6BAAK,UAAS,KAAT,EAAgB;AACjB,mCAAO,MAAM,WAAN,CAAkB,cAAlB,EAAkC,QAAQ,OAAR,CAAgB,eAAe,GAA/B,CAAlC,CAAP;AACH;AALU,qBAAf;AAOH;AACJ;AAbE,SAAP;AAeH;AA9CY,CAAjB","file":"jsx-quotes-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to ensure consistent quotes used in jsx syntax.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nvar QUOTE_SETTINGS = {\n    \"prefer-double\": {\n        quote: \"\\\"\",\n        description: \"singlequote\",\n        convert: function(str) {\n            return str.replace(/'/g, \"\\\"\");\n        }\n    },\n    \"prefer-single\": {\n        quote: \"'\",\n        description: \"doublequote\",\n        convert: function(str) {\n            return str.replace(/\"/g, \"'\");\n        }\n    }\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce the consistent use of either double or single quotes in JSX attributes\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [ \"prefer-single\", \"prefer-double\" ]\n            }\n        ]\n    },\n\n    create: function(context) {\n        var quoteOption = context.options[0] || \"prefer-double\",\n            setting = QUOTE_SETTINGS[quoteOption];\n\n        /**\n         * Checks if the given string literal node uses the expected quotes\n         * @param {ASTNode} node - A string literal node.\n         * @returns {boolean} Whether or not the string literal used the expected quotes.\n         * @public\n         */\n        function usesExpectedQuotes(node) {\n            return node.value.indexOf(setting.quote) !== -1 || astUtils.isSurroundedBy(node.raw, setting.quote);\n        }\n\n        return {\n            JSXAttribute: function(node) {\n                var attributeValue = node.value;\n\n                if (attributeValue && astUtils.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {\n                    context.report({\n                        node: attributeValue,\n                        message: \"Unexpected usage of \" + setting.description + \".\",\n                        fix: function(fixer) {\n                            return fixer.replaceText(attributeValue, setting.convert(attributeValue.raw));\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"]}