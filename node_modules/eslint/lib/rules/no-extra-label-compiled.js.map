{"version":3,"sources":["no-extra-label.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,6BADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,YAAY,IAAhB;;;;;;;;AAQA,iBAAS,uBAAT,CAAiC,IAAjC,EAAuC;AACnC,wBAAY;AACR,uBAAO,SAAS,QAAT,CAAkB,IAAlB,CADC;AAER,2BAAW,IAFH;AAGR,uBAAO;AAHC,aAAZ;AAKH;;;;;;;AAOD,iBAAS,sBAAT,GAAkC;AAC9B,wBAAY,UAAU,KAAtB;AACH;;;;;;;;;;;AAWD,iBAAS,qBAAT,CAA+B,IAA/B,EAAqC;AACjC,gBAAI,CAAC,SAAS,oBAAT,CAA8B,KAAK,IAAnC,CAAL,EAA+C;AAC3C,4BAAY;AACR,2BAAO,KAAK,KAAL,CAAW,IADV;AAER,+BAAW,KAFH;AAGR,2BAAO;AAHC,iBAAZ;AAKH;AACJ;;;;;;;;;;;AAWD,iBAAS,oBAAT,CAA8B,IAA9B,EAAoC;AAChC,gBAAI,CAAC,SAAS,oBAAT,CAA8B,KAAK,IAAnC,CAAL,EAA+C;AAC3C,4BAAY,UAAU,KAAtB;AACH;AACJ;;;;;;;;;AASD,iBAAS,mBAAT,CAA6B,IAA7B,EAAmC;AAC/B,gBAAI,CAAC,KAAK,KAAV,EAAiB;AACb;AACH;;AAED,gBAAI,YAAY,KAAK,KAArB;AACA,gBAAI,QAAQ,UAAU,IAAtB;AACA,gBAAI,OAAO,SAAX;;AAEA,mBAAO,IAAP,EAAa;AACT,oBAAI,KAAK,SAAL,IAAkB,KAAK,KAAL,KAAe,KAArC,EAA4C;AACxC,wBAAI,KAAK,SAAL,IAAkB,KAAK,KAAL,KAAe,KAArC,EAA4C;AACxC,gCAAQ,MAAR,CAAe;AACX,kCAAM,SADK;AAEX,qCAAS,uCAFE;AAGX,kCAAM;AAHK,yBAAf;AAKH;AACD;AACH;;AAED,uBAAO,KAAK,KAAZ;AACH;AACJ;;AAED,eAAO;AACH,4BAAgB,uBADb;AAEH,mCAAuB,sBAFpB;AAGH,8BAAkB,uBAHf;AAIH,qCAAyB,sBAJtB;AAKH,0BAAc,uBALX;AAMH,iCAAqB,sBANlB;AAOH,4BAAgB,uBAPb;AAQH,mCAAuB,sBARpB;AASH,4BAAgB,uBATb;AAUH,mCAAuB,sBAVpB;AAWH,6BAAiB,uBAXd;AAYH,oCAAwB,sBAZrB;AAaH,8BAAkB,qBAbf;AAcH,qCAAyB,oBAdtB;AAeH,4BAAgB,mBAfb;AAgBH,+BAAmB;AAhBhB,SAAP;AAkBH;AAzHY,CAAjB","file":"no-extra-label-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to disallow unnecessary labels\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow unnecessary labels\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var scopeInfo = null;\n\n        /**\n         * Creates a new scope with a breakable statement.\n         *\n         * @param {ASTNode} node - A node to create. This is a BreakableStatement.\n         * @returns {void}\n         */\n        function enterBreakableStatement(node) {\n            scopeInfo = {\n                label: astUtils.getLabel(node),\n                breakable: true,\n                upper: scopeInfo\n            };\n        }\n\n        /**\n         * Removes the top scope of the stack.\n         *\n         * @returns {void}\n         */\n        function exitBreakableStatement() {\n            scopeInfo = scopeInfo.upper;\n        }\n\n        /**\n         * Creates a new scope with a labeled statement.\n         *\n         * This ignores it if the body is a breakable statement.\n         * In this case it's handled in the `enterBreakableStatement` function.\n         *\n         * @param {ASTNode} node - A node to create. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function enterLabeledStatement(node) {\n            if (!astUtils.isBreakableStatement(node.body)) {\n                scopeInfo = {\n                    label: node.label.name,\n                    breakable: false,\n                    upper: scopeInfo\n                };\n            }\n        }\n\n        /**\n         * Removes the top scope of the stack.\n         *\n         * This ignores it if the body is a breakable statement.\n         * In this case it's handled in the `exitBreakableStatement` function.\n         *\n         * @param {ASTNode} node - A node. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function exitLabeledStatement(node) {\n            if (!astUtils.isBreakableStatement(node.body)) {\n                scopeInfo = scopeInfo.upper;\n            }\n        }\n\n        /**\n         * Reports a given control node if it's unnecessary.\n         *\n         * @param {ASTNode} node - A node. This is a BreakStatement or a\n         *      ContinueStatement.\n         * @returns {void}\n         */\n        function reportIfUnnecessary(node) {\n            if (!node.label) {\n                return;\n            }\n\n            var labelNode = node.label;\n            var label = labelNode.name;\n            var info = scopeInfo;\n\n            while (info) {\n                if (info.breakable || info.label === label) {\n                    if (info.breakable && info.label === label) {\n                        context.report({\n                            node: labelNode,\n                            message: \"This label '{{name}}' is unnecessary.\",\n                            data: labelNode\n                        });\n                    }\n                    return;\n                }\n\n                info = info.upper;\n            }\n        }\n\n        return {\n            WhileStatement: enterBreakableStatement,\n            \"WhileStatement:exit\": exitBreakableStatement,\n            DoWhileStatement: enterBreakableStatement,\n            \"DoWhileStatement:exit\": exitBreakableStatement,\n            ForStatement: enterBreakableStatement,\n            \"ForStatement:exit\": exitBreakableStatement,\n            ForInStatement: enterBreakableStatement,\n            \"ForInStatement:exit\": exitBreakableStatement,\n            ForOfStatement: enterBreakableStatement,\n            \"ForOfStatement:exit\": exitBreakableStatement,\n            SwitchStatement: enterBreakableStatement,\n            \"SwitchStatement:exit\": exitBreakableStatement,\n            LabeledStatement: enterLabeledStatement,\n            \"LabeledStatement:exit\": exitLabeledStatement,\n            BreakStatement: reportIfUnnecessary,\n            ContinueStatement: reportIfUnnecessary\n        };\n    }\n};\n"]}