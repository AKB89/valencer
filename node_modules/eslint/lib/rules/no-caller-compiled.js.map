{"version":3,"sources":["no-caller.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,8DADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,8BAAkB,UAAS,IAAT,EAAe;AAC7B,oBAAI,aAAa,KAAK,MAAL,CAAY,IAA7B;oBACI,eAAe,KAAK,QAAL,CAAc,IADjC;;AAGA,oBAAI,eAAe,WAAf,IAA8B,CAAC,KAAK,QAApC,IAAgD,YAAhD,IAAgE,aAAa,KAAb,CAAmB,aAAnB,CAApE,EAAuG;AACnG,4BAAQ,MAAR,CAAe,IAAf,EAAqB,+BAArB,EAAsD,EAAE,UAAU,YAAZ,EAAtD;AACH;AAEJ;AAVE,SAAP;AAaH;AA1BY,CAAjB","file":"no-caller-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of arguments.callee and arguments.caller.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow the use of `arguments.caller` or `arguments.callee`\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            MemberExpression: function(node) {\n                var objectName = node.object.name,\n                    propertyName = node.property.name;\n\n                if (objectName === \"arguments\" && !node.computed && propertyName && propertyName.match(/^calle[er]$/)) {\n                    context.report(node, \"Avoid arguments.{{property}}.\", { property: propertyName });\n                }\n\n            }\n        };\n\n    }\n};\n"]}