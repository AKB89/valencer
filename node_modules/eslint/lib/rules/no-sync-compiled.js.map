{"version":3,"sources":["no-sync.js"],"names":[],"mappings":";;;;;;;AAOA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,8BADX;AAEF,sBAAU,sBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,8BAAkB,UAAS,IAAT,EAAe;AAC7B,oBAAI,eAAe,KAAK,QAAL,CAAc,IAAjC;oBACI,YAAY,SADhB;;AAGA,oBAAI,UAAU,IAAV,CAAe,YAAf,MAAiC,IAArC,EAA2C;AACvC,4BAAQ,MAAR,CAAe,IAAf,EAAqB,8BAA8B,YAA9B,GAA6C,IAAlE;AACH;AACJ;AATE,SAAP;AAYH;AAzBY,CAAjB","file":"no-sync-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to check for properties whose identifier ends with the string Sync\n * @author Matt DuVall<http://mattduvall.com/>\n */\n\n/* jshint node:true */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow synchronous methods\",\n            category: \"Node.js and CommonJS\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            MemberExpression: function(node) {\n                var propertyName = node.property.name,\n                    syncRegex = /.*Sync$/;\n\n                if (syncRegex.exec(propertyName) !== null) {\n                    context.report(node, \"Unexpected sync method: '\" + propertyName + \"'.\");\n                }\n            }\n        };\n\n    }\n};\n"]}