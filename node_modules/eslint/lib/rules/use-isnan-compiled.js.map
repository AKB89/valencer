{"version":3,"sources":["use-isnan.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,oDADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;AACH,8BAAkB,UAAS,IAAT,EAAe;AAC7B,oBAAI,qBAAqB,IAArB,CAA0B,KAAK,QAA/B,MAA6C,KAAK,IAAL,CAAU,IAAV,KAAmB,KAAnB,IAA4B,KAAK,KAAL,CAAW,IAAX,KAAoB,KAA7F,CAAJ,EAAyG;AACrG,4BAAQ,MAAR,CAAe,IAAf,EAAqB,6CAArB;AACH;AACJ;AALE,SAAP;AAQH;AArBY,CAAjB","file":"use-isnan-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag comparisons to the value NaN\n * @author James Allardice\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require calls to `isNaN()` when checking for `NaN`\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n            BinaryExpression: function(node) {\n                if (/^(?:[<>]|[!=]=)=?$/.test(node.operator) && (node.left.name === \"NaN\" || node.right.name === \"NaN\")) {\n                    context.report(node, \"Use the isNaN function to compare with NaN.\");\n                }\n            }\n        };\n\n    }\n};\n"]}