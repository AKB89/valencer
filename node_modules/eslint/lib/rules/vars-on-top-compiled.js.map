{"version":3,"sources":["vars-on-top.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,2EADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,eAAe,kEAAnB;;;;;;;;;;AAUA,iBAAS,kBAAT,CAA4B,IAA5B,EAAkC;AAC9B,mBAAO,KAAK,IAAL,KAAc,qBAAd,IACH,KAAK,UAAL,CAAgB,IAAhB,KAAyB,SADtB,IACmC,OAAO,KAAK,UAAL,CAAgB,KAAvB,KAAiC,QAD3E;AAEH;;;;;;;AAOD,iBAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC3B,mBAAO,KAAK,IAAL,KAAc,mBAAd,IAAqC,KAAK,IAAL,KAAc,iBAAnD,IACH,KAAK,IAAL,KAAc,wBADX,IACuC,KAAK,IAAL,KAAc,0BAD5D;AAEH;;;;;;;;AAQD,iBAAS,qBAAT,CAA+B,IAA/B,EAAqC;AACjC,mBACI,KAAK,IAAL,KAAc,qBAAd,IAEI,KAAK,IAAL,KAAc,wBAAd,IACA,KAAK,WADL,IAEA,KAAK,WAAL,CAAiB,IAAjB,KAA0B,qBALlC;AAQH;;;;;;;;AAQD,iBAAS,UAAT,CAAoB,IAApB,EAA0B,UAA1B,EAAsC;AAClC,gBAAI,IAAI,CAAR;gBACI,IAAI,WAAW,MADnB;;;AAIA,mBAAO,IAAI,CAAX,EAAc,EAAE,CAAhB,EAAmB;AACf,oBAAI,CAAC,mBAAmB,WAAW,CAAX,CAAnB,CAAD,IAAsC,CAAC,gBAAgB,WAAW,CAAX,CAAhB,CAA3C,EAA2E;AACvE;AACH;AACJ;;AAED,mBAAO,IAAI,CAAX,EAAc,EAAE,CAAhB,EAAmB;AACf,oBAAI,CAAC,sBAAsB,WAAW,CAAX,CAAtB,CAAL,EAA2C;AACvC,2BAAO,KAAP;AACH;AACD,oBAAI,WAAW,CAAX,MAAkB,IAAtB,EAA4B;AACxB,2BAAO,IAAP;AACH;AACJ;;AAED,mBAAO,KAAP;AACH;;;;;;;;AAQD,iBAAS,cAAT,CAAwB,IAAxB,EAA8B,MAA9B,EAAsC;AAClC,gBAAI,CAAC,WAAW,IAAX,EAAiB,OAAO,IAAxB,CAAL,EAAoC;AAChC,wBAAQ,MAAR,CAAe,IAAf,EAAqB,YAArB;AACH;AACJ;;;;;;;;;AASD,iBAAS,kBAAT,CAA4B,IAA5B,EAAkC,MAAlC,EAA0C,WAA1C,EAAuD;AACnD,gBAAI,EAAE,WAAW,IAAX,CAAgB,YAAY,IAA5B,KACE,OAAO,IAAP,KAAgB,gBADlB,IAEE,WAAW,IAAX,EAAiB,OAAO,IAAxB,CAFJ,CAAJ,EAEwC;AACpC,wBAAQ,MAAR,CAAe,IAAf,EAAqB,YAArB;AACH;AACJ;;;;;;AAMD,eAAO;AACH,iCAAqB,UAAS,IAAT,EAAe;AAChC,oBAAI,YAAY,QAAQ,YAAR,EAAhB;AACA,oBAAI,SAAS,UAAU,GAAV,EAAb;AACA,oBAAI,cAAc,UAAU,GAAV,EAAlB;;AAEA,oBAAI,KAAK,IAAL,KAAc,KAAlB,EAAyB;;AACrB,wBAAI,OAAO,IAAP,KAAgB,wBAApB,EAA8C;AAC1C,+BAAO,MAAP;AACA,iCAAS,WAAT;AACA,sCAAc,UAAU,GAAV,EAAd;AACH;;AAED,wBAAI,OAAO,IAAP,KAAgB,SAApB,EAA+B;;AAC3B,uCAAe,IAAf,EAAqB,MAArB;AACH,qBAFD,MAEO;AACH,2CAAmB,IAAnB,EAAyB,MAAzB,EAAiC,WAAjC;AACH;AACJ;AACJ;AAnBE,SAAP;AAsBH;AAxIY,CAAjB","file":"vars-on-top-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce var declarations are only at the top of a function.\n * @author Danny Fritz\n * @author Gyandeep Singh\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require `var` declarations be placed at the top of their containing scope\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var errorMessage = \"All 'var' declarations must be at the top of the function scope.\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * @param {ASTNode} node - any node\n         * @returns {Boolean} whether the given node structurally represents a directive\n         */\n        function looksLikeDirective(node) {\n            return node.type === \"ExpressionStatement\" &&\n                node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\n        }\n\n        /**\n         * Check to see if its a ES6 import declaration\n         * @param {ASTNode} node - any node\n         * @returns {Boolean} whether the given node represents a import declaration\n         */\n        function looksLikeImport(node) {\n            return node.type === \"ImportDeclaration\" || node.type === \"ImportSpecifier\" ||\n                node.type === \"ImportDefaultSpecifier\" || node.type === \"ImportNamespaceSpecifier\";\n        }\n\n        /**\n         * Checks whether a given node is a variable declaration or not.\n         *\n         * @param {ASTNode} node - any node\n         * @returns {boolean} `true` if the node is a variable declaration.\n         */\n        function isVariableDeclaration(node) {\n            return (\n                node.type === \"VariableDeclaration\" ||\n                (\n                    node.type === \"ExportNamedDeclaration\" &&\n                    node.declaration &&\n                    node.declaration.type === \"VariableDeclaration\"\n                )\n            );\n        }\n\n        /**\n         * Checks whether this variable is on top of the block body\n         * @param {ASTNode} node - The node to check\n         * @param {ASTNode[]} statements - collection of ASTNodes for the parent node block\n         * @returns {Boolean} True if var is on top otherwise false\n         */\n        function isVarOnTop(node, statements) {\n            var i = 0,\n                l = statements.length;\n\n            // skip over directives\n            for (; i < l; ++i) {\n                if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {\n                    break;\n                }\n            }\n\n            for (; i < l; ++i) {\n                if (!isVariableDeclaration(statements[i])) {\n                    return false;\n                }\n                if (statements[i] === node) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks whether variable is on top at the global level\n         * @param {ASTNode} node - The node to check\n         * @param {ASTNode} parent - Parent of the node\n         * @returns {void}\n         */\n        function globalVarCheck(node, parent) {\n            if (!isVarOnTop(node, parent.body)) {\n                context.report(node, errorMessage);\n            }\n        }\n\n        /**\n         * Checks whether variable is on top at functional block scope level\n         * @param {ASTNode} node - The node to check\n         * @param {ASTNode} parent - Parent of the node\n         * @param {ASTNode} grandParent - Parent of the node's parent\n         * @returns {void}\n         */\n        function blockScopeVarCheck(node, parent, grandParent) {\n            if (!(/Function/.test(grandParent.type) &&\n                    parent.type === \"BlockStatement\" &&\n                    isVarOnTop(node, parent.body))) {\n                context.report(node, errorMessage);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            VariableDeclaration: function(node) {\n                var ancestors = context.getAncestors();\n                var parent = ancestors.pop();\n                var grandParent = ancestors.pop();\n\n                if (node.kind === \"var\") { // check variable is `var` type and not `let` or `const`\n                    if (parent.type === \"ExportNamedDeclaration\") {\n                        node = parent;\n                        parent = grandParent;\n                        grandParent = ancestors.pop();\n                    }\n\n                    if (parent.type === \"Program\") { // That means its a global variable\n                        globalVarCheck(node, parent);\n                    } else {\n                        blockScopeVarCheck(node, parent, grandParent);\n                    }\n                }\n            }\n        };\n\n    }\n};\n"]}