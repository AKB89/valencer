{"version":3,"sources":["space-before-blocks.js"],"names":[],"mappings":"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","file":"space-before-blocks-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to ensure whitespace before blocks.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent spacing before blocks\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"always\", \"never\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            keywords: {\n                                enum: [\"always\", \"never\"]\n                            },\n                            functions: {\n                                enum: [\"always\", \"never\"]\n                            },\n                            classes: {\n                                enum: [\"always\", \"never\"]\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ]\n    },\n\n    create: function(context) {\n        var config = context.options[0],\n            sourceCode = context.getSourceCode(),\n            checkFunctions = true,\n            checkKeywords = true,\n            checkClasses = true;\n\n        if (typeof config === \"object\") {\n            checkFunctions = config.functions !== \"never\";\n            checkKeywords = config.keywords !== \"never\";\n            checkClasses = config.classes !== \"never\";\n        } else if (config === \"never\") {\n            checkFunctions = false;\n            checkKeywords = false;\n            checkClasses = false;\n        }\n\n        /**\n         * Checks whether or not a given token is an arrow operator (=>) or a keyword\n         * in order to avoid to conflict with `arrow-spacing` and `keyword-spacing`.\n         *\n         * @param {Token} token - A token to check.\n         * @returns {boolean} `true` if the token is an arrow operator.\n         */\n        function isConflicted(token) {\n            return (token.type === \"Punctuator\" && token.value === \"=>\") || token.type === \"Keyword\";\n        }\n\n        /**\n         * Checks the given BlockStatement node has a preceding space if it doesnâ€™t start on a new line.\n         * @param {ASTNode|Token} node The AST node of a BlockStatement.\n         * @returns {void} undefined.\n         */\n        function checkPrecedingSpace(node) {\n            var precedingToken = sourceCode.getTokenBefore(node),\n                hasSpace,\n                parent,\n                requireSpace;\n\n            if (precedingToken && !isConflicted(precedingToken) && astUtils.isTokenOnSameLine(precedingToken, node)) {\n                hasSpace = sourceCode.isSpaceBetweenTokens(precedingToken, node);\n                parent = context.getAncestors().pop();\n                if (parent.type === \"FunctionExpression\" || parent.type === \"FunctionDeclaration\") {\n                    requireSpace = checkFunctions;\n                } else if (node.type === \"ClassBody\") {\n                    requireSpace = checkClasses;\n                } else {\n                    requireSpace = checkKeywords;\n                }\n\n                if (requireSpace) {\n                    if (!hasSpace) {\n                        context.report({\n                            node: node,\n                            message: \"Missing space before opening brace.\",\n                            fix: function(fixer) {\n                                return fixer.insertTextBefore(node, \" \");\n                            }\n                        });\n                    }\n                } else {\n                    if (hasSpace) {\n                        context.report({\n                            node: node,\n                            message: \"Unexpected space before opening brace.\",\n                            fix: function(fixer) {\n                                return fixer.removeRange([precedingToken.range[1], node.range[0]]);\n                            }\n                        });\n                    }\n                }\n            }\n        }\n\n        /**\n         * Checks if the CaseBlock of an given SwitchStatement node has a preceding space.\n         * @param {ASTNode} node The node of a SwitchStatement.\n         * @returns {void} undefined.\n         */\n        function checkSpaceBeforeCaseBlock(node) {\n            var cases = node.cases,\n                firstCase,\n                openingBrace;\n\n            if (cases.length > 0) {\n                firstCase = cases[0];\n                openingBrace = sourceCode.getTokenBefore(firstCase);\n            } else {\n                openingBrace = sourceCode.getLastToken(node, 1);\n            }\n\n            checkPrecedingSpace(openingBrace);\n        }\n\n        return {\n            BlockStatement: checkPrecedingSpace,\n            ClassBody: checkPrecedingSpace,\n            SwitchStatement: checkSpaceBeforeCaseBlock\n        };\n\n    }\n};\n"]}