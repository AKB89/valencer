{"version":3,"sources":["no-invalid-regexp.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,IAAI,SAAS,QAAQ,QAAR,CAAb;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,sEADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CAAC;AACL,kBAAM,QADD;AAEL,wBAAY;AACR,uCAAuB;AACnB,0BAAM,OADa;AAEnB,2BAAO;AACH,8BAAM;AADH;AAFY;AADf,aAFP;AAUL,kCAAsB;AAVjB,SAAD;AAPN,KADO;;AAsBb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,YAAI,UAAU,QAAQ,OAAR,CAAgB,CAAhB,CAAd;YACI,eAAe,EADnB;;AAGA,YAAI,WAAW,QAAQ,qBAAvB,EAA8C;AAC1C,2BAAe,QAAQ,qBAAR,CAA8B,IAA9B,CAAmC,EAAnC,CAAf;AACH;;;;;;;;AAQD,iBAAS,QAAT,CAAkB,IAAlB,EAAwB;AACpB,mBAAO,QAAQ,KAAK,IAAL,KAAc,SAAtB,IAAmC,OAAO,KAAK,KAAZ,KAAsB,QAAhE;AACH;;;;;;;;AAQD,iBAAS,KAAT,CAAe,IAAf,EAAqB;AACjB,gBAAI,KAAK,MAAL,CAAY,IAAZ,KAAqB,YAArB,IAAqC,KAAK,MAAL,CAAY,IAAZ,KAAqB,QAA1D,IAAsE,SAAS,KAAK,SAAL,CAAe,CAAf,CAAT,CAA1E,EAAuG;AACnG,oBAAI,QAAQ,SAAS,KAAK,SAAL,CAAe,CAAf,CAAT,IAA8B,KAAK,SAAL,CAAe,CAAf,EAAkB,KAAhD,GAAwD,EAApE;;AAEA,oBAAI,YAAJ,EAAkB;AACd,4BAAQ,MAAM,OAAN,CAAc,IAAI,MAAJ,CAAW,MAAM,YAAN,GAAqB,GAAhC,EAAqC,IAArC,CAAd,EAA0D,EAA1D,CAAR;AACH;;AAED,oBAAI;AACA,yBAAK,IAAI,MAAJ,CAAW,KAAK,SAAL,CAAe,CAAf,EAAkB,KAA7B,CAAL;AACH,iBAFD,CAEE,OAAO,CAAP,EAAU;AACR,4BAAQ,MAAR,CAAe,IAAf,EAAqB,EAAE,OAAvB;AACH;;AAED,oBAAI,KAAJ,EAAW;;AAEP,wBAAI;AACA,+BAAO,KAAP,CAAa,QAAQ,KAArB,EAA4B,QAAQ,aAApC;AACH,qBAFD,CAEE,OAAO,EAAP,EAAW;AACT,gCAAQ,MAAR,CAAe,IAAf,EAAqB,mDAAmD,KAAnD,GAA2D,GAAhF;AACH;AACJ;AAEJ;AACJ;;AAED,eAAO;AACH,4BAAgB,KADb;AAEH,2BAAe;AAFZ,SAAP;AAKH;AA9EY,CAAjB","file":"no-invalid-regexp-compiled.js","sourcesContent":["/**\n * @fileoverview Validate strings passed to the RegExp constructor\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar espree = require(\"espree\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow invalid regular expression strings in `RegExp` constructors\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                allowConstructorFlags: {\n                    type: \"array\",\n                    items: {\n                        type: \"string\"\n                    }\n                }\n            },\n            additionalProperties: false\n        }]\n    },\n\n    create: function(context) {\n\n        var options = context.options[0],\n            allowedFlags = \"\";\n\n        if (options && options.allowConstructorFlags) {\n            allowedFlags = options.allowConstructorFlags.join(\"\");\n        }\n\n        /**\n         * Check if node is a string\n         * @param {ASTNode} node node to evaluate\n         * @returns {boolean} True if its a string\n         * @private\n         */\n        function isString(node) {\n            return node && node.type === \"Literal\" && typeof node.value === \"string\";\n        }\n\n        /**\n         * Validate strings passed to the RegExp constructor\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function check(node) {\n            if (node.callee.type === \"Identifier\" && node.callee.name === \"RegExp\" && isString(node.arguments[0])) {\n                var flags = isString(node.arguments[1]) ? node.arguments[1].value : \"\";\n\n                if (allowedFlags) {\n                    flags = flags.replace(new RegExp(\"[\" + allowedFlags + \"]\", \"gi\"), \"\");\n                }\n\n                try {\n                    void new RegExp(node.arguments[0].value);\n                } catch (e) {\n                    context.report(node, e.message);\n                }\n\n                if (flags) {\n\n                    try {\n                        espree.parse(\"/./\" + flags, context.parserOptions);\n                    } catch (ex) {\n                        context.report(node, \"Invalid flags supplied to RegExp constructor '\" + flags + \"'\");\n                    }\n                }\n\n            }\n        }\n\n        return {\n            CallExpression: check,\n            NewExpression: check\n        };\n\n    }\n};\n"]}