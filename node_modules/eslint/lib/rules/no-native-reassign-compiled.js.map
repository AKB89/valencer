{"version":3,"sources":["no-native-reassign.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,qCADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,QADV;AAEI,wBAAY;AACR,4BAAY;AACR,0BAAM,OADE;AAER,2BAAO,EAAC,MAAM,QAAP,EAFC;AAGR,iCAAa;AAHL;AADJ,aAFhB;AASI,kCAAsB;AAT1B,SADI;AAPN,KADO;;AAuBb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,CAAb;AACA,YAAI,aAAc,UAAU,OAAO,UAAlB,IAAiC,EAAlD;;;;;;;;;AASA,iBAAS,cAAT,CAAwB,SAAxB,EAAmC,KAAnC,EAA0C,UAA1C,EAAsD;AAClD,gBAAI,aAAa,UAAU,UAA3B;;AAEA,gBAAI,UAAU,IAAV,KAAmB,KAAnB,IACA,UAAU,OAAV,EADA;;;;AAKC,sBAAU,CAAV,IAAe,WAAW,QAAQ,CAAnB,EAAsB,UAAtB,KAAqC,UALrD,CAAJ,EAME;AACE,wBAAQ,MAAR,CAAe;AACX,0BAAM,UADK;AAEX,6BAAS,wCAFE;AAGX,0BAAM;AAHK,iBAAf;AAKH;AACJ;;;;;;;AAOD,iBAAS,aAAT,CAAuB,QAAvB,EAAiC;AAC7B,gBAAI,SAAS,SAAT,KAAuB,KAAvB,IAAgC,WAAW,OAAX,CAAmB,SAAS,IAA5B,MAAsC,CAAC,CAA3E,EAA8E;AAC1E,yBAAS,UAAT,CAAoB,OAApB,CAA4B,cAA5B;AACH;AACJ;;AAED,eAAO;AACH,qBAAS,YAAW;AAChB,oBAAI,cAAc,QAAQ,QAAR,EAAlB;;AAEA,4BAAY,SAAZ,CAAsB,OAAtB,CAA8B,aAA9B;AACH;AALE,SAAP;AAOH;AAtEY,CAAjB","file":"no-native-reassign-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when re-assigning native objects\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow reassigning native objects\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"array\",\n                        items: {type: \"string\"},\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var config = context.options[0];\n        var exceptions = (config && config.exceptions) || [];\n\n        /**\n         * Reports write references.\n         * @param {Reference} reference - A reference to check.\n         * @param {int} index - The index of the reference in the references.\n         * @param {Reference[]} references - The array that the reference belongs to.\n         * @returns {void}\n         */\n        function checkReference(reference, index, references) {\n            var identifier = reference.identifier;\n\n            if (reference.init === false &&\n                reference.isWrite() &&\n\n                // Destructuring assignments can have multiple default value,\n                // so possibly there are multiple writeable references for the same identifier.\n                (index === 0 || references[index - 1].identifier !== identifier)\n            ) {\n                context.report({\n                    node: identifier,\n                    message: \"{{name}} is a read-only native object.\",\n                    data: identifier\n                });\n            }\n        }\n\n        /**\n         * Reports write references if a given variable is readonly builtin.\n         * @param {Variable} variable - A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {\n                variable.references.forEach(checkReference);\n            }\n        }\n\n        return {\n            Program: function() {\n                var globalScope = context.getScope();\n\n                globalScope.variables.forEach(checkVariable);\n            }\n        };\n    }\n};\n"]}