{"version":3,"sources":["no-nested-ternary.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,qCADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;AACH,mCAAuB,UAAS,IAAT,EAAe;AAClC,oBAAI,KAAK,SAAL,CAAe,IAAf,KAAwB,uBAAxB,IACI,KAAK,UAAL,CAAgB,IAAhB,KAAyB,uBADjC,EAC0D;AACtD,4BAAQ,MAAR,CAAe,IAAf,EAAqB,iCAArB;AACH;AACJ;AANE,SAAP;AAQH;AArBY,CAAjB","file":"no-nested-ternary-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag nested ternary expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow nested ternary expressions\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n            ConditionalExpression: function(node) {\n                if (node.alternate.type === \"ConditionalExpression\" ||\n                        node.consequent.type === \"ConditionalExpression\") {\n                    context.report(node, \"Do not nest ternary expressions\");\n                }\n            }\n        };\n    }\n};\n"]}