{"version":3,"sources":["prefer-rest-params.js"],"names":[],"mappings":";;;;;AAKA;;;;;;;;;;;;AAWA,SAAS,sBAAT,CAAgC,KAAhC,EAAuC;AACnC,QAAI,YAAY,MAAM,SAAtB;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,EAAE,CAAxC,EAA2C;AACvC,YAAI,WAAW,UAAU,CAAV,CAAf;;AAEA,YAAI,SAAS,IAAT,KAAkB,WAAtB,EAAmC;;;;AAI/B,mBAAQ,SAAS,WAAT,CAAqB,MAArB,KAAgC,CAAjC,GAAsC,QAAtC,GAAiD,IAAxD;AACH;AACJ;;;AAGD,WAAO,IAAP;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,gDADX;AAEF,sBAAU,cAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;;AAQtB,iBAAS,MAAT,CAAgB,SAAhB,EAA2B;AACvB,oBAAQ,MAAR,CAAe;AACX,sBAAM,UAAU,UADL;AAEX,yBAAS;AAFE,aAAf;AAIH;;;;;;;AAOD,iBAAS,iBAAT,GAA6B;AACzB,gBAAI,eAAe,uBAAuB,QAAQ,QAAR,EAAvB,CAAnB;;AAEA,gBAAI,YAAJ,EAAkB;AACd,6BAAa,UAAb,CAAwB,OAAxB,CAAgC,MAAhC;AACH;AACJ;;AAED,eAAO;AACH,iCAAqB,iBADlB;AAEH,gCAAoB;AAFjB,SAAP;AAIH;AA3CY,CAAjB","file":"prefer-rest-params-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the variable object of `arguments` which is defined implicitly.\n * @param {escope.Scope} scope - A scope to get.\n * @returns {escope.Variable} The found variable object.\n */\nfunction getVariableOfArguments(scope) {\n    var variables = scope.variables;\n\n    for (var i = 0; i < variables.length; ++i) {\n        var variable = variables[i];\n\n        if (variable.name === \"arguments\") {\n\n            // If there was a parameter which is named \"arguments\", the implicit \"arguments\" is not defined.\n            // So does fast return with null.\n            return (variable.identifiers.length === 0) ? variable : null;\n        }\n    }\n\n    /* istanbul ignore next : unreachable */\n    return null;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require rest parameters instead of `arguments`\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        /**\n         * Reports a given reference.\n         *\n         * @param {escope.Reference} reference - A reference to report.\n         * @returns {void}\n         */\n        function report(reference) {\n            context.report({\n                node: reference.identifier,\n                message: \"Use the rest parameters instead of 'arguments'.\"\n            });\n        }\n\n        /**\n         * Reports references of the implicit `arguments` variable if exist.\n         *\n         * @returns {void}\n         */\n        function checkForArguments() {\n            var argumentsVar = getVariableOfArguments(context.getScope());\n\n            if (argumentsVar) {\n                argumentsVar.references.forEach(report);\n            }\n        }\n\n        return {\n            FunctionDeclaration: checkForArguments,\n            FunctionExpression: checkForArguments\n        };\n    }\n};\n"]}