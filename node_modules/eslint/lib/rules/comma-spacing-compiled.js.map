{"version":3,"sources":["comma-spacing.js"],"names":[],"mappings":"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","file":"comma-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Comma spacing - validates spacing before and after comma\n * @author Vignesh Anand aka vegetableman.\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent spacing before and after commas\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: {\n                        type: \"boolean\"\n                    },\n                    after: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var sourceCode = context.getSourceCode();\n        var tokensAndComments = sourceCode.tokensAndComments;\n\n        var options = {\n            before: context.options[0] ? !!context.options[0].before : false,\n            after: context.options[0] ? !!context.options[0].after : true\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // list of comma tokens to ignore for the check of leading whitespace\n        var commaTokensToIgnore = [];\n\n        /**\n         * Determines if a given token is a comma operator.\n         * @param {ASTNode} token The token to check.\n         * @returns {boolean} True if the token is a comma, false if not.\n         * @private\n         */\n        function isComma(token) {\n            return !!token && (token.type === \"Punctuator\") && (token.value === \",\");\n        }\n\n        /**\n         * Reports a spacing error with an appropriate message.\n         * @param {ASTNode} node The binary expression node to report.\n         * @param {string} dir Is the error \"before\" or \"after\" the comma?\n         * @param {ASTNode} otherNode The node at the left or right of `node`\n         * @returns {void}\n         * @private\n         */\n        function report(node, dir, otherNode) {\n            context.report({\n                node: node,\n                fix: function(fixer) {\n                    if (options[dir]) {\n                        if (dir === \"before\") {\n                            return fixer.insertTextBefore(node, \" \");\n                        } else {\n                            return fixer.insertTextAfter(node, \" \");\n                        }\n                    } else {\n                        var start, end;\n                        var newText = \"\";\n\n                        if (dir === \"before\") {\n                            start = otherNode.range[1];\n                            end = node.range[0];\n                        } else {\n                            start = node.range[1];\n                            end = otherNode.range[0];\n                        }\n\n                        return fixer.replaceTextRange([start, end], newText);\n                    }\n                },\n                message: options[dir] ?\n                  \"A space is required \" + dir + \" ','.\" :\n                  \"There should be no space \" + dir + \" ','.\"\n            });\n        }\n\n        /**\n         * Validates the spacing around a comma token.\n         * @param {Object} tokens - The tokens to be validated.\n         * @param {Token} tokens.comma The token representing the comma.\n         * @param {Token} [tokens.left] The last token before the comma.\n         * @param {Token} [tokens.right] The first token after the comma.\n         * @param {Token|ASTNode} reportItem The item to use when reporting an error.\n         * @returns {void}\n         * @private\n         */\n        function validateCommaItemSpacing(tokens, reportItem) {\n            if (tokens.left && astUtils.isTokenOnSameLine(tokens.left, tokens.comma) &&\n                    (options.before !== sourceCode.isSpaceBetweenTokens(tokens.left, tokens.comma))\n            ) {\n                report(reportItem, \"before\", tokens.left);\n            }\n\n            if (tokens.right && !options.after && tokens.right.type === \"Line\") {\n                return;\n            }\n\n            if (tokens.right && astUtils.isTokenOnSameLine(tokens.comma, tokens.right) &&\n                    (options.after !== sourceCode.isSpaceBetweenTokens(tokens.comma, tokens.right))\n            ) {\n                report(reportItem, \"after\", tokens.right);\n            }\n        }\n\n        /**\n         * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n         * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\n         * @returns {void}\n         */\n        function addNullElementsToIgnoreList(node) {\n            var previousToken = sourceCode.getFirstToken(node);\n\n            node.elements.forEach(function(element) {\n                var token;\n\n                if (element === null) {\n                    token = sourceCode.getTokenAfter(previousToken);\n\n                    if (isComma(token)) {\n                        commaTokensToIgnore.push(token);\n                    }\n                } else {\n                    token = sourceCode.getTokenAfter(element);\n                }\n\n                previousToken = token;\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            \"Program:exit\": function() {\n\n                var previousToken,\n                    nextToken;\n\n                tokensAndComments.forEach(function(token, i) {\n\n                    if (!isComma(token)) {\n                        return;\n                    }\n\n                    if (token && token.type === \"JSXText\") {\n                        return;\n                    }\n\n                    previousToken = tokensAndComments[i - 1];\n                    nextToken = tokensAndComments[i + 1];\n\n                    validateCommaItemSpacing({\n                        comma: token,\n                        left: isComma(previousToken) || commaTokensToIgnore.indexOf(token) > -1 ? null : previousToken,\n                        right: isComma(nextToken) ? null : nextToken\n                    }, token);\n                });\n            },\n            ArrayExpression: addNullElementsToIgnoreList,\n            ArrayPattern: addNullElementsToIgnoreList\n\n        };\n\n    }\n};\n"]}