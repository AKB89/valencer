{"version":3,"sources":["semi.js"],"names":[],"mappings":"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","file":"semi-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag missing semicolons.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require or disallow semicolons instead of ASI\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"code\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                omitLastInOneLineBlock: {type: \"boolean\"}\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        }\n    },\n\n    create: function(context) {\n\n        var OPT_OUT_PATTERN = /[\\[\\(\\/\\+\\-]/; // One of [(/+-\n        var options = context.options[1];\n        var never = context.options[0] === \"never\",\n            exceptOneLine = options && options.omitLastInOneLineBlock === true,\n            sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports a semicolon error with appropriate location and message.\n         * @param {ASTNode} node The node with an extra or missing semicolon.\n         * @param {boolean} missing True if the semicolon is missing.\n         * @returns {void}\n         */\n        function report(node, missing) {\n            var message,\n                fix,\n                lastToken = sourceCode.getLastToken(node),\n                loc = lastToken.loc;\n\n            if (!missing) {\n                message = \"Missing semicolon.\";\n                loc = loc.end;\n                fix = function(fixer) {\n                    return fixer.insertTextAfter(lastToken, \";\");\n                };\n            } else {\n                message = \"Extra semicolon.\";\n                loc = loc.start;\n                fix = function(fixer) {\n                    return fixer.remove(lastToken);\n                };\n            }\n\n            context.report({\n                node: node,\n                loc: loc,\n                message: message,\n                fix: fix\n            });\n\n        }\n\n        /**\n         * Checks whether a token is a semicolon punctuator.\n         * @param {Token} token The token.\n         * @returns {boolean} True if token is a semicolon punctuator.\n         */\n        function isSemicolon(token) {\n            return (token.type === \"Punctuator\" && token.value === \";\");\n        }\n\n        /**\n         * Check if a semicolon is unnecessary, only true if:\n         *   - next token is on a new line and is not one of the opt-out tokens\n         *   - next token is a valid statement divider\n         * @param {Token} lastToken last token of current node.\n         * @returns {boolean} whether the semicolon is unnecessary.\n         */\n        function isUnnecessarySemicolon(lastToken) {\n            var isDivider, isOptOutToken, lastTokenLine, nextToken, nextTokenLine;\n\n            if (!isSemicolon(lastToken)) {\n                return false;\n            }\n\n            nextToken = sourceCode.getTokenAfter(lastToken);\n\n            if (!nextToken) {\n                return true;\n            }\n\n            lastTokenLine = lastToken.loc.end.line;\n            nextTokenLine = nextToken.loc.start.line;\n            isOptOutToken = OPT_OUT_PATTERN.test(nextToken.value);\n            isDivider = (nextToken.value === \"}\" || nextToken.value === \";\");\n\n            return (lastTokenLine !== nextTokenLine && !isOptOutToken) || isDivider;\n        }\n\n        /**\n         * Checks a node to see if it's in a one-liner block statement.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} whether the node is in a one-liner block statement.\n         */\n        function isOneLinerBlock(node) {\n            var nextToken = sourceCode.getTokenAfter(node);\n\n            if (!nextToken || nextToken.value !== \"}\") {\n                return false;\n            }\n\n            var parent = node.parent;\n\n            return parent && parent.type === \"BlockStatement\" &&\n              parent.loc.start.line === parent.loc.end.line;\n        }\n\n        /**\n         * Checks a node to see if it's followed by a semicolon.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolon(node) {\n            var lastToken = sourceCode.getLastToken(node);\n\n            if (never) {\n                if (isUnnecessarySemicolon(lastToken)) {\n                    report(node, true);\n                }\n            } else {\n                if (!isSemicolon(lastToken)) {\n                    if (!exceptOneLine || !isOneLinerBlock(node)) {\n                        report(node);\n                    }\n                } else {\n                    if (exceptOneLine && isOneLinerBlock(node)) {\n                        report(node, true);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Checks to see if there's a semicolon after a variable declaration.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolonForVariableDeclaration(node) {\n            var ancestors = context.getAncestors(),\n                parentIndex = ancestors.length - 1,\n                parent = ancestors[parentIndex];\n\n            if ((parent.type !== \"ForStatement\" || parent.init !== node) &&\n                (!/^For(?:In|Of)Statement/.test(parent.type) || parent.left !== node)\n            ) {\n                checkForSemicolon(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            VariableDeclaration: checkForSemicolonForVariableDeclaration,\n            ExpressionStatement: checkForSemicolon,\n            ReturnStatement: checkForSemicolon,\n            ThrowStatement: checkForSemicolon,\n            DoWhileStatement: checkForSemicolon,\n            DebuggerStatement: checkForSemicolon,\n            BreakStatement: checkForSemicolon,\n            ContinueStatement: checkForSemicolon,\n            ImportDeclaration: checkForSemicolon,\n            ExportAllDeclaration: checkForSemicolon,\n            ExportNamedDeclaration: function(node) {\n                if (!node.declaration) {\n                    checkForSemicolon(node);\n                }\n            },\n            ExportDefaultDeclaration: function(node) {\n                if (!/(?:Class|Function)Declaration/.test(node.declaration.type)) {\n                    checkForSemicolon(node);\n                }\n            }\n        };\n\n    }\n};\n"]}