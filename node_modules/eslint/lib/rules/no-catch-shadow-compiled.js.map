{"version":3,"sources":["no-catch-shadow.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,gFADX;AAEF,sBAAU,WAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;;;;;;AAYtB,iBAAS,gBAAT,CAA0B,KAA1B,EAAiC,IAAjC,EAAuC;AACnC,mBAAO,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,IAAlC,MAA4C,IAAnD;AACH;;;;;;AAMD,eAAO;;AAEH,yBAAa,UAAS,IAAT,EAAe;AACxB,oBAAI,QAAQ,QAAQ,QAAR,EAAZ;;;;AAIA,oBAAI,MAAM,KAAN,KAAgB,IAApB,EAA0B;AACtB,4BAAQ,MAAM,KAAd;AACH;;AAED,oBAAI,iBAAiB,KAAjB,EAAwB,KAAK,KAAL,CAAW,IAAnC,CAAJ,EAA8C;AAC1C,4BAAQ,MAAR,CAAe,IAAf,EAAqB,6DAArB,EACQ,EAAE,MAAM,KAAK,KAAL,CAAW,IAAnB,EADR;AAEH;AACJ;AAfE,SAAP;AAkBH;AAjDY,CAAjB","file":"no-catch-shadow-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag variable leak in CatchClauses in IE 8 and earlier\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `catch` clause parameters from shadowing variables in the outer scope\",\n            category: \"Variables\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Check if the parameters are been shadowed\n         * @param {object} scope current scope\n         * @param {string} name parameter name\n         * @returns {boolean} True is its been shadowed\n         */\n        function paramIsShadowing(scope, name) {\n            return astUtils.getVariableByName(scope, name) !== null;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            CatchClause: function(node) {\n                var scope = context.getScope();\n\n                // When blockBindings is enabled, CatchClause creates its own scope\n                // so start from one upper scope to exclude the current node\n                if (scope.block === node) {\n                    scope = scope.upper;\n                }\n\n                if (paramIsShadowing(scope, node.param.name)) {\n                    context.report(node, \"Value of '{{name}}' may be overwritten in IE 8 and earlier.\",\n                            { name: node.param.name });\n                }\n            }\n        };\n\n    }\n};\n"]}