{"version":3,"sources":["no-shadow-restricted-names.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,sDADX;AAEF,sBAAU,WAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,gBAAS,OAAT,EAAkB;;AAEtB,YAAI,aAAa,CAAC,WAAD,EAAc,KAAd,EAAqB,UAArB,EAAiC,WAAjC,EAA8C,MAA9C,CAAjB;;;;;;;;AAQA,iBAAS,iBAAT,CAA2B,EAA3B,EAA+B;AAC3B,gBAAI,WAAW,OAAX,CAAmB,GAAG,IAAtB,IAA8B,CAAC,CAAnC,EAAsC;AAClC,wBAAQ,MAAR,CAAe,EAAf,EAAmB,mCAAmC,GAAG,IAAtC,GAA6C,IAAhE;AACH;AACJ;;AAED,eAAO;AACH,gCAAoB,4BAAS,IAAT,EAAe;AAC/B,kCAAkB,KAAK,EAAvB;AACH,aAHE;AAIH,qCAAyB,iCAAS,IAAT,EAAe;AACpC,mBAAG,GAAH,CAAO,IAAP,CAAY,KAAK,MAAjB,EAAyB,iBAAzB;AACH,aANE;AAOH,gCAAoB,4BAAS,IAAT,EAAe;AAC/B,oBAAI,KAAK,EAAT,EAAa;AACT,sCAAkB,KAAK,EAAvB;AACH;AACD,mBAAG,GAAH,CAAO,IAAP,CAAY,KAAK,MAAjB,EAAyB,iBAAzB;AACH,aAZE;AAaH,iCAAqB,6BAAS,IAAT,EAAe;AAChC,oBAAI,KAAK,EAAT,EAAa;AACT,sCAAkB,KAAK,EAAvB;AACA,uBAAG,GAAH,CAAO,IAAP,CAAY,KAAK,MAAjB,EAAyB,iBAAzB;AACH;AACJ,aAlBE;AAmBH,yBAAa,qBAAS,IAAT,EAAe;AACxB,kCAAkB,KAAK,KAAvB;AACH;AArBE,SAAP;AAwBH;AAnDY,CAAjB","file":"no-shadow-restricted-names-compiled.js","sourcesContent":["/**\n * @fileoverview Disallow shadowing of NaN, undefined, and Infinity (ES5 section 15.1.1)\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow identifiers from shadowing restricted names\",\n            category: \"Variables\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        var RESTRICTED = [\"undefined\", \"NaN\", \"Infinity\", \"arguments\", \"eval\"];\n\n        /**\n         * Check if the node name is present inside the restricted list\n         * @param {ASTNode} id id to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForViolation(id) {\n            if (RESTRICTED.indexOf(id.name) > -1) {\n                context.report(id, \"Shadowing of global property '\" + id.name + \"'.\");\n            }\n        }\n\n        return {\n            VariableDeclarator: function(node) {\n                checkForViolation(node.id);\n            },\n            ArrowFunctionExpression: function(node) {\n                [].map.call(node.params, checkForViolation);\n            },\n            FunctionExpression: function(node) {\n                if (node.id) {\n                    checkForViolation(node.id);\n                }\n                [].map.call(node.params, checkForViolation);\n            },\n            FunctionDeclaration: function(node) {\n                if (node.id) {\n                    checkForViolation(node.id);\n                    [].map.call(node.params, checkForViolation);\n                }\n            },\n            CatchClause: function(node) {\n                checkForViolation(node.param);\n            }\n        };\n\n    }\n};\n"]}