{"version":3,"sources":["space-before-function-paren.js"],"names":[],"mappings":"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","file":"space-before-function-paren-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to validate spacing before function paren.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent spacing before `function` definition opening parenthesis\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"always\", \"never\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            anonymous: {\n                                enum: [\"always\", \"never\", \"ignore\"]\n                            },\n                            named: {\n                                enum: [\"always\", \"never\", \"ignore\"]\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var configuration = context.options[0],\n            sourceCode = context.getSourceCode(),\n            requireAnonymousFunctionSpacing = true,\n            forbidAnonymousFunctionSpacing = false,\n            requireNamedFunctionSpacing = true,\n            forbidNamedFunctionSpacing = false;\n\n        if (typeof configuration === \"object\") {\n            requireAnonymousFunctionSpacing = (\n                !configuration.anonymous || configuration.anonymous === \"always\");\n            forbidAnonymousFunctionSpacing = configuration.anonymous === \"never\";\n            requireNamedFunctionSpacing = (\n                !configuration.named || configuration.named === \"always\");\n            forbidNamedFunctionSpacing = configuration.named === \"never\";\n        } else if (configuration === \"never\") {\n            requireAnonymousFunctionSpacing = false;\n            forbidAnonymousFunctionSpacing = true;\n            requireNamedFunctionSpacing = false;\n            forbidNamedFunctionSpacing = true;\n        }\n\n        /**\n         * Determines whether a function has a name.\n         * @param {ASTNode} node The function node.\n         * @returns {boolean} Whether the function has a name.\n         */\n        function isNamedFunction(node) {\n            var parent;\n\n            if (node.id) {\n                return true;\n            }\n\n            parent = node.parent;\n            return parent.type === \"MethodDefinition\" ||\n                (parent.type === \"Property\" &&\n                    (\n                        parent.kind === \"get\" ||\n                        parent.kind === \"set\" ||\n                        parent.method\n                    )\n                );\n        }\n\n        /**\n         * Validates the spacing before function parentheses.\n         * @param {ASTNode} node The node to be validated.\n         * @returns {void}\n         */\n        function validateSpacingBeforeParentheses(node) {\n            var isNamed = isNamedFunction(node),\n                leftToken,\n                rightToken,\n                location;\n\n            if (node.generator && !isNamed) {\n                return;\n            }\n\n            rightToken = sourceCode.getFirstToken(node);\n            while (rightToken.value !== \"(\") {\n                rightToken = sourceCode.getTokenAfter(rightToken);\n            }\n            leftToken = sourceCode.getTokenBefore(rightToken);\n            location = leftToken.loc.end;\n\n            if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\n                if ((isNamed && forbidNamedFunctionSpacing) || (!isNamed && forbidAnonymousFunctionSpacing)) {\n                    context.report({\n                        node: node,\n                        loc: location,\n                        message: \"Unexpected space before function parentheses.\",\n                        fix: function(fixer) {\n                            return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                        }\n                    });\n                }\n            } else {\n                if ((isNamed && requireNamedFunctionSpacing) || (!isNamed && requireAnonymousFunctionSpacing)) {\n                    context.report({\n                        node: node,\n                        loc: location,\n                        message: \"Missing space before function parentheses.\",\n                        fix: function(fixer) {\n                            return fixer.insertTextAfter(leftToken, \" \");\n                        }\n                    });\n                }\n            }\n        }\n\n        return {\n            FunctionDeclaration: validateSpacingBeforeParentheses,\n            FunctionExpression: validateSpacingBeforeParentheses\n        };\n    }\n};\n"]}