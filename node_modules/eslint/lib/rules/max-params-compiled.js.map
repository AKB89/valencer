{"version":3,"sources":["max-params.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,kEADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,mBAAO,CACH;AACI,sBAAM,SADV;AAEI,yBAAS;AAFb,aADG,EAKH;AACI,sBAAM,QADV;AAEI,4BAAY;AACR,6BAAS;AACL,8BAAM,SADD;AAEL,iCAAS;AAFJ,qBADD;AAKR,yBAAK;AACD,8BAAM,SADL;AAED,iCAAS;AAFR;AALG,iBAFhB;AAYI,sCAAsB;AAZ1B,aALG;AADX,SADI;AAPN,KADO;;AAkCb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,CAAb;YACI,YAAY,CADhB;;AAGA,YAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,cAAP,CAAsB,SAAtB,CAA9B,IAAkE,OAAO,OAAO,OAAd,KAA0B,QAAhG,EAA0G;AACtG,wBAAY,OAAO,OAAnB;AACH;AACD,YAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,cAAP,CAAsB,KAAtB,CAA9B,IAA8D,OAAO,OAAO,GAAd,KAAsB,QAAxF,EAAkG;AAC9F,wBAAY,OAAO,GAAnB;AACH;AACD,YAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,wBAAY,MAAZ;AACH;;;;;;;;AAQD,iBAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,gBAAI,KAAK,MAAL,CAAY,MAAZ,GAAqB,SAAzB,EAAoC;AAChC,wBAAQ,MAAR,CAAe,IAAf,EAAqB,gFAArB,EAAuG;AACnG,2BAAO,KAAK,MAAL,CAAY,MADgF;AAEnG,yBAAK;AAF8F,iBAAvG;AAIH;AACJ;;AAED,eAAO;AACH,iCAAqB,aADlB;AAEH,qCAAyB,aAFtB;AAGH,gCAAoB;AAHjB,SAAP;AAMH;AAtEY,CAAjB","file":"max-params-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when a function has too many parameters\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce a maximum number of parameters in `function` definitions\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var option = context.options[0],\n            numParams = 3;\n\n        if (typeof option === \"object\" && option.hasOwnProperty(\"maximum\") && typeof option.maximum === \"number\") {\n            numParams = option.maximum;\n        }\n        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {\n            numParams = option.max;\n        }\n        if (typeof option === \"number\") {\n            numParams = option;\n        }\n\n        /**\n         * Checks a function to see if it has too many parameters.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkFunction(node) {\n            if (node.params.length > numParams) {\n                context.report(node, \"This function has too many parameters ({{count}}). Maximum allowed is {{max}}.\", {\n                    count: node.params.length,\n                    max: numParams\n                });\n            }\n        }\n\n        return {\n            FunctionDeclaration: checkFunction,\n            ArrowFunctionExpression: checkFunction,\n            FunctionExpression: checkFunction\n        };\n\n    }\n};\n"]}