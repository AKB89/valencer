{"version":3,"sources":["radix.js"],"names":[],"mappings":"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","file":"radix-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of parseInt without a radix argument\n * @author James Allardice\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar MODE_ALWAYS = \"always\",\n    MODE_AS_NEEDED = \"as-needed\";\n\n/**\n * Checks whether a given variable is shadowed or not.\n *\n * @param {escope.Variable} variable - A variable to check.\n * @returns {boolean} `true` if the variable is shadowed.\n */\nfunction isShadowed(variable) {\n    return variable.defs.length >= 1;\n}\n\n/**\n * Checks whether a given node is a MemberExpression of `parseInt` method or not.\n *\n * @param {ASTNode} node - A node to check.\n * @returns {boolean} `true` if the node is a MemberExpression of `parseInt`\n *      method.\n */\nfunction isParseIntMethod(node) {\n    return (\n        node.type === \"MemberExpression\" &&\n        !node.computed &&\n        node.property.type === \"Identifier\" &&\n        node.property.name === \"parseInt\"\n    );\n}\n\n/**\n * Checks whether a given node is a valid value of radix or not.\n *\n * The following values are invalid.\n *\n * - A literal except numbers.\n * - undefined.\n *\n * @param {ASTNode} radix - A node of radix to check.\n * @returns {boolean} `true` if the node is valid.\n */\nfunction isValidRadix(radix) {\n    return !(\n        (radix.type === \"Literal\" && typeof radix.value !== \"number\") ||\n        (radix.type === \"Identifier\" && radix.name === \"undefined\")\n    );\n}\n\n/**\n * Checks whether a given node is a default value of radix or not.\n *\n * @param {ASTNode} radix - A node of radix to check.\n * @returns {boolean} `true` if the node is the literal node of `10`.\n */\nfunction isDefaultRadix(radix) {\n    return radix.type === \"Literal\" && radix.value === 10;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce the consistent use of the radix argument when using `parseInt()`\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                enum: [\"always\", \"as-needed\"]\n            }\n        ]\n    },\n\n    create: function(context) {\n        var mode = context.options[0] || MODE_ALWAYS;\n\n        /**\n         * Checks the arguments of a given CallExpression node and reports it if it\n         * offends this rule.\n         *\n         * @param {ASTNode} node - A CallExpression node to check.\n         * @returns {void}\n         */\n        function checkArguments(node) {\n            var args = node.arguments;\n\n            switch (args.length) {\n                case 0:\n                    context.report({\n                        node: node,\n                        message: \"Missing parameters.\"\n                    });\n                    break;\n\n                case 1:\n                    if (mode === MODE_ALWAYS) {\n                        context.report({\n                            node: node,\n                            message: \"Missing radix parameter.\"\n                        });\n                    }\n                    break;\n\n                default:\n                    if (mode === MODE_AS_NEEDED && isDefaultRadix(args[1])) {\n                        context.report({\n                            node: node,\n                            message: \"Redundant radix parameter.\"\n                        });\n                    } else if (!isValidRadix(args[1])) {\n                        context.report({\n                            node: node,\n                            message: \"Invalid radix parameter.\"\n                        });\n                    }\n                    break;\n            }\n        }\n\n        return {\n            \"Program:exit\": function() {\n                var scope = context.getScope();\n                var variable;\n\n                // Check `parseInt()`\n                variable = astUtils.getVariableByName(scope, \"parseInt\");\n                if (!isShadowed(variable)) {\n                    variable.references.forEach(function(reference) {\n                        var node = reference.identifier;\n\n                        if (astUtils.isCallee(node)) {\n                            checkArguments(node.parent);\n                        }\n                    });\n                }\n\n                // Check `Number.parseInt()`\n                variable = astUtils.getVariableByName(scope, \"Number\");\n                if (!isShadowed(variable)) {\n                    variable.references.forEach(function(reference) {\n                        var node = reference.identifier.parent;\n\n                        if (isParseIntMethod(node) && astUtils.isCallee(node)) {\n                            checkArguments(node.parent);\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"]}