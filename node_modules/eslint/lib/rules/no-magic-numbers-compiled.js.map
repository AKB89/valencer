{"version":3,"sources":["no-magic-numbers.js"],"names":[],"mappings":"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","file":"no-magic-numbers-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag statements that use magic numbers (adapted from https://github.com/danielstjules/buddy.js)\n * @author Vincent Lemeunier\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow magic numbers\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                detectObjects: {\n                    type: \"boolean\"\n                },\n                enforceConst: {\n                    type: \"boolean\"\n                },\n                ignore: {\n                    type: \"array\",\n                    items: {\n                        type: \"number\"\n                    },\n                    uniqueItems: true\n                },\n                ignoreArrayIndexes: {\n                    type: \"boolean\"\n                }\n            },\n            additionalProperties: false\n        }]\n    },\n\n    create: function(context) {\n        var config = context.options[0] || {},\n            detectObjects = !!config.detectObjects,\n            enforceConst = !!config.enforceConst,\n            ignore = config.ignore || [],\n            ignoreArrayIndexes = !!config.ignoreArrayIndexes;\n\n        /**\n         * Returns whether the node is number literal\n         * @param {Node} node - the node literal being evaluated\n         * @returns {boolean} true if the node is a number literal\n         */\n        function isNumber(node) {\n            return typeof node.value === \"number\";\n        }\n\n        /**\n         * Returns whether the number should be ignored\n         * @param {number} num - the number\n         * @returns {boolean} true if the number should be ignored\n         */\n        function shouldIgnoreNumber(num) {\n            return ignore.indexOf(num) !== -1;\n        }\n\n        /**\n         * Returns whether the number should be ignored when used as a radix within parseInt() or Number.parseInt()\n         * @param {ASTNode} parent - the non-\"UnaryExpression\" parent\n         * @param {ASTNode} node - the node literal being evaluated\n         * @returns {boolean} true if the number should be ignored\n         */\n        function shouldIgnoreParseInt(parent, node) {\n            return parent.type === \"CallExpression\" && node === parent.arguments[1] &&\n                (parent.callee.name === \"parseInt\" ||\n                parent.callee.type === \"MemberExpression\" &&\n                parent.callee.object.name === \"Number\" &&\n                parent.callee.property.name === \"parseInt\");\n        }\n\n        /**\n         * Returns whether the number should be ignored when used to define a JSX prop\n         * @param {ASTNode} parent - the non-\"UnaryExpression\" parent\n         * @returns {boolean} true if the number should be ignored\n         */\n        function shouldIgnoreJSXNumbers(parent) {\n            return parent.type.indexOf(\"JSX\") === 0;\n        }\n\n        /**\n         * Returns whether the number should be ignored when used as an array index with enabled 'ignoreArrayIndexes' option.\n         * @param {ASTNode} parent - the non-\"UnaryExpression\" parent.\n         * @returns {boolean} true if the number should be ignored\n         */\n        function shouldIgnoreArrayIndexes(parent) {\n            return parent.type === \"MemberExpression\" && ignoreArrayIndexes;\n        }\n\n        return {\n            Literal: function(node) {\n                var parent = node.parent,\n                    value = node.value,\n                    raw = node.raw,\n                    okTypes = detectObjects ? [] : [\"ObjectExpression\", \"Property\", \"AssignmentExpression\"];\n\n                if (!isNumber(node)) {\n                    return;\n                }\n\n                // For negative magic numbers: update the value and parent node\n                if (parent.type === \"UnaryExpression\" && parent.operator === \"-\") {\n                    node = parent;\n                    parent = node.parent;\n                    value = -value;\n                    raw = \"-\" + raw;\n                }\n\n                if (shouldIgnoreNumber(value) ||\n                    shouldIgnoreParseInt(parent, node) ||\n                    shouldIgnoreArrayIndexes(parent) ||\n                    shouldIgnoreJSXNumbers(parent)) {\n                    return;\n                }\n\n                if (parent.type === \"VariableDeclarator\") {\n                    if (enforceConst && parent.parent.kind !== \"const\") {\n                        context.report({\n                            node: node,\n                            message: \"Number constants declarations must use 'const'\"\n                        });\n                    }\n                } else if (okTypes.indexOf(parent.type) === -1 ||\n                    (parent.type === \"AssignmentExpression\" && parent.operator !== \"=\")) {\n                    context.report({\n                        node: node,\n                        message: \"No magic number: \" + raw\n                    });\n                }\n            }\n        };\n    }\n};\n"]}