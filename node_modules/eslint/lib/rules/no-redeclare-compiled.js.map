{"version":3,"sources":["no-redeclare.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,8BADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,QADV;AAEI,wBAAY;AACR,gCAAgB,EAAC,MAAM,SAAP;AADR,aAFhB;AAKI,kCAAsB;AAL1B,SADI;AAPN,KADO;;AAmBb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,UAAU;AACV,4BAAgB,QAAQ,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,QAAQ,OAAR,CAAgB,CAAhB,EAAmB,cAAjD;AADN,SAAd;;;;;;;;AAUA,iBAAS,oBAAT,CAA8B,KAA9B,EAAqC;AACjC,kBAAM,SAAN,CAAgB,OAAhB,CAAwB,UAAS,QAAT,EAAmB;AACvC,oBAAI,aAAa,QAAQ,cAAR,IAA0B,eAAe,QAA1D;AACA,oBAAI,QAAQ,CAAC,aAAa,CAAb,GAAiB,CAAlB,IAAuB,SAAS,WAAT,CAAqB,MAAxD;;AAEA,oBAAI,SAAS,CAAb,EAAgB;AACZ,6BAAS,WAAT,CAAqB,IAArB,CAA0B,UAAS,CAAT,EAAY,CAAZ,EAAe;AACrC,+BAAO,EAAE,KAAF,CAAQ,CAAR,IAAa,EAAE,KAAF,CAAQ,CAAR,CAApB;AACH,qBAFD;;AAIA,yBAAK,IAAI,IAAK,aAAa,CAAb,GAAiB,CAA1B,EAA8B,IAAI,SAAS,WAAT,CAAqB,MAA5D,EAAoE,IAAI,CAAxE,EAA2E,GAA3E,EAAgF;AAC5E,gCAAQ,MAAR,CACI,SAAS,WAAT,CAAqB,CAArB,CADJ,EAEI,4BAFJ,EAGI,EAAC,GAAG,SAAS,IAAb,EAHJ;AAIH;AACJ;AACJ,aAhBD;AAkBH;;;;;;;;AAQD,iBAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC1B,gBAAI,QAAQ,QAAQ,QAAR,EAAZ;gBACI,gBAAgB,QAAQ,aAD5B;gBAEI,eAAe,cAAc,YAAd,IAA8B,EAFjD;;;AAKA,gBAAI,aAAa,YAAb,IAA6B,KAAK,UAAL,KAAoB,QAArD,EAA+D;AAC3D,qCAAqB,MAAM,WAAN,CAAkB,CAAlB,CAArB;AACH,aAFD,MAEO;AACH,qCAAqB,KAArB;AACH;AACJ;;;;;;;AAOD,iBAAS,aAAT,GAAyB;AACrB,iCAAqB,QAAQ,QAAR,EAArB;AACH;;AAED,YAAI,QAAQ,aAAR,CAAsB,WAAtB,IAAqC,CAAzC,EAA4C;AACxC,mBAAO;AACH,yBAAS,cADN;AAEH,gCAAgB,aAFb;AAGH,iCAAiB;AAHd,aAAP;AAKH,SAND,MAMO;AACH,mBAAO;AACH,yBAAS,cADN;AAEH,qCAAqB,aAFlB;AAGH,oCAAoB,aAHjB;AAIH,yCAAyB;AAJtB,aAAP;AAMH;AACJ;AA7FY,CAAjB","file":"no-redeclare-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when the same variable is declared more then once.\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `var` redeclaration\",\n            category: \"Best Practices\",\n            recommended: true\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    builtinGlobals: {type: \"boolean\"}\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var options = {\n            builtinGlobals: Boolean(context.options[0] && context.options[0].builtinGlobals)\n        };\n\n        /**\n         * Find variables in a given scope and flag redeclared ones.\n         * @param {Scope} scope - An escope scope object.\n         * @returns {void}\n         * @private\n         */\n        function findVariablesInScope(scope) {\n            scope.variables.forEach(function(variable) {\n                var hasBuiltin = options.builtinGlobals && \"writeable\" in variable;\n                var count = (hasBuiltin ? 1 : 0) + variable.identifiers.length;\n\n                if (count >= 2) {\n                    variable.identifiers.sort(function(a, b) {\n                        return a.range[1] - b.range[1];\n                    });\n\n                    for (var i = (hasBuiltin ? 0 : 1), l = variable.identifiers.length; i < l; i++) {\n                        context.report(\n                            variable.identifiers[i],\n                            \"'{{a}}' is already defined\",\n                            {a: variable.name});\n                    }\n                }\n            });\n\n        }\n\n        /**\n         * Find variables in the current scope.\n         * @param {ASTNode} node - The Program node.\n         * @returns {void}\n         * @private\n         */\n        function checkForGlobal(node) {\n            var scope = context.getScope(),\n                parserOptions = context.parserOptions,\n                ecmaFeatures = parserOptions.ecmaFeatures || {};\n\n            // Nodejs env or modules has a special scope.\n            if (ecmaFeatures.globalReturn || node.sourceType === \"module\") {\n                findVariablesInScope(scope.childScopes[0]);\n            } else {\n                findVariablesInScope(scope);\n            }\n        }\n\n        /**\n         * Find variables in the current scope.\n         * @returns {void}\n         * @private\n         */\n        function checkForBlock() {\n            findVariablesInScope(context.getScope());\n        }\n\n        if (context.parserOptions.ecmaVersion >= 6) {\n            return {\n                Program: checkForGlobal,\n                BlockStatement: checkForBlock,\n                SwitchStatement: checkForBlock\n            };\n        } else {\n            return {\n                Program: checkForGlobal,\n                FunctionDeclaration: checkForBlock,\n                FunctionExpression: checkForBlock,\n                ArrowFunctionExpression: checkForBlock\n            };\n        }\n    }\n};\n"]}