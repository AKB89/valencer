{"version":3,"sources":["no-shadow.js"],"names":[],"mappings":"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","file":"no-shadow-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag on declaring variables already declared in the outer scope\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `var` declarations from shadowing variables in the outer scope\",\n            category: \"Variables\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    builtinGlobals: {type: \"boolean\"},\n                    hoist: {enum: [\"all\", \"functions\", \"never\"]},\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        var options = {\n            builtinGlobals: Boolean(context.options[0] && context.options[0].builtinGlobals),\n            hoist: (context.options[0] && context.options[0].hoist) || \"functions\",\n            allow: (context.options[0] && context.options[0].allow) || []\n        };\n\n        /**\n         * Check if variable name is allowed.\n         *\n         * @param  {ASTNode} variable The variable to check.\n         * @returns {boolean} Whether or not the variable name is allowed.\n         */\n        function isAllowed(variable) {\n            return options.allow.indexOf(variable.name) !== -1;\n        }\n\n        /**\n         * Checks if a variable of the class name in the class scope of ClassDeclaration.\n         *\n         * ClassDeclaration creates two variables of its name into its outer scope and its class scope.\n         * So we should ignore the variable in the class scope.\n         *\n         * @param {Object} variable The variable to check.\n         * @returns {boolean} Whether or not the variable of the class name in the class scope of ClassDeclaration.\n         */\n        function isDuplicatedClassNameVariable(variable) {\n            var block = variable.scope.block;\n\n            return block.type === \"ClassDeclaration\" && block.id === variable.identifiers[0];\n        }\n\n        /**\n         * Checks if a variable is inside the initializer of scopeVar.\n         *\n         * To avoid reporting at declarations such as `var a = function a() {};`.\n         * But it should report `var a = function(a) {};` or `var a = function() { function a() {} };`.\n         *\n         * @param {Object} variable The variable to check.\n         * @param {Object} scopeVar The scope variable to look for.\n         * @returns {boolean} Whether or not the variable is inside initializer of scopeVar.\n         */\n        function isOnInitializer(variable, scopeVar) {\n            var outerScope = scopeVar.scope;\n            var outerDef = scopeVar.defs[0];\n            var outer = outerDef && outerDef.parent && outerDef.parent.range;\n            var innerScope = variable.scope;\n            var innerDef = variable.defs[0];\n            var inner = innerDef && innerDef.name.range;\n\n            return (\n                outer &&\n                inner &&\n                outer[0] < inner[0] &&\n                inner[1] < outer[1] &&\n                ((innerDef.type === \"FunctionName\" && innerDef.node.type === \"FunctionExpression\") || innerDef.node.type === \"ClassExpression\") &&\n                outerScope === innerScope.upper\n            );\n        }\n\n        /**\n         * Get a range of a variable's identifier node.\n         * @param {Object} variable The variable to get.\n         * @returns {Array|undefined} The range of the variable's identifier node.\n         */\n        function getNameRange(variable) {\n            var def = variable.defs[0];\n\n            return def && def.name.range;\n        }\n\n        /**\n         * Checks if a variable is in TDZ of scopeVar.\n         * @param {Object} variable The variable to check.\n         * @param {Object} scopeVar The variable of TDZ.\n         * @returns {boolean} Whether or not the variable is in TDZ of scopeVar.\n         */\n        function isInTdz(variable, scopeVar) {\n            var outerDef = scopeVar.defs[0];\n            var inner = getNameRange(variable);\n            var outer = getNameRange(scopeVar);\n\n            return (\n                inner &&\n                outer &&\n                inner[1] < outer[0] &&\n\n                // Excepts FunctionDeclaration if is {\"hoist\":\"function\"}.\n                (options.hoist !== \"functions\" || !outerDef || outerDef.node.type !== \"FunctionDeclaration\")\n            );\n        }\n\n        /**\n         * Checks the current context for shadowed variables.\n         * @param {Scope} scope - Fixme\n         * @returns {void}\n         */\n        function checkForShadows(scope) {\n            var variables = scope.variables;\n\n            for (var i = 0; i < variables.length; ++i) {\n                var variable = variables[i];\n\n                // Skips \"arguments\" or variables of a class name in the class scope of ClassDeclaration.\n                if (variable.identifiers.length === 0 ||\n                    isDuplicatedClassNameVariable(variable) ||\n                    isAllowed(variable)\n                ) {\n                    continue;\n                }\n\n                // Gets shadowed variable.\n                var shadowed = astUtils.getVariableByName(scope.upper, variable.name);\n\n                if (shadowed &&\n                    (shadowed.identifiers.length > 0 || (options.builtinGlobals && \"writeable\" in shadowed)) &&\n                    !isOnInitializer(variable, shadowed) &&\n                    !(options.hoist !== \"all\" && isInTdz(variable, shadowed))\n                ) {\n                    context.report({\n                        node: variable.identifiers[0],\n                        message: \"'{{name}}' is already declared in the upper scope.\",\n                        data: variable\n                    });\n                }\n            }\n        }\n\n        return {\n            \"Program:exit\": function() {\n                var globalScope = context.getScope();\n                var stack = globalScope.childScopes.slice();\n                var scope;\n\n                while (stack.length) {\n                    scope = stack.pop();\n                    stack.push.apply(stack, scope.childScopes);\n                    checkForShadows(scope);\n                }\n            }\n        };\n\n    }\n};\n"]}