{"version":3,"sources":["no-new-wrappers.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,6EADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,2BAAe,UAAS,IAAT,EAAe;AAC1B,oBAAI,iBAAiB,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,MAAhC,EAAwC,MAAxC,CAArB;;AAEA,oBAAI,eAAe,OAAf,CAAuB,KAAK,MAAL,CAAY,IAAnC,IAA2C,CAAC,CAAhD,EAAmD;AAC/C,4BAAQ,MAAR,CAAe,IAAf,EAAqB,qCAArB,EAA4D,EAAE,IAAI,KAAK,MAAL,CAAY,IAAlB,EAA5D;AACH;AACJ;AARE,SAAP;AAWH;AAxBY,CAAjB","file":"no-new-wrappers-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when using constructor for wrapper objects\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `new` operators with the `String`, `Number`, and `Boolean` objects\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            NewExpression: function(node) {\n                var wrapperObjects = [\"String\", \"Number\", \"Boolean\", \"Math\", \"JSON\"];\n\n                if (wrapperObjects.indexOf(node.callee.name) > -1) {\n                    context.report(node, \"Do not use {{fn}} as a constructor.\", { fn: node.callee.name });\n                }\n            }\n        };\n\n    }\n};\n"]}