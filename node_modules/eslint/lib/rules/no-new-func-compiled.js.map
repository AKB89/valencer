{"version":3,"sources":["no-new-func.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,qDADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;;;;;;AAYtB,iBAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC1B,gBAAI,KAAK,MAAL,CAAY,IAAZ,KAAqB,UAAzB,EAAqC;AACjC,wBAAQ,MAAR,CAAe,IAAf,EAAqB,mCAArB;AACH;AACJ;;AAED,eAAO;AACH,2BAAe,cADZ;AAEH,4BAAgB;AAFb,SAAP;AAKH;AAlCY,CAAjB","file":"no-new-func-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when using new Function\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow `new` operators with the `Function` object\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Checks if the callee is the Function constructor, and if so, reports an issue.\n         * @param {ASTNode} node The node to check and report on\n         * @returns {void}\n         * @private\n         */\n        function validateCallee(node) {\n            if (node.callee.name === \"Function\") {\n                context.report(node, \"The Function constructor is eval.\");\n            }\n        }\n\n        return {\n            NewExpression: validateCallee,\n            CallExpression: validateCallee\n        };\n\n    }\n};\n"]}