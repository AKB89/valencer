{"version":3,"sources":["no-useless-rename.js"],"names":[],"mappings":"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","file":"no-useless-rename-compiled.js","sourcesContent":["/**\n * @fileoverview Disallow renaming import, export, and destructured assignments to the same name.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow renaming import, export, and destructured assignments to the same name\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n        fixable: \"code\",\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    ignoreDestructuring: { type: \"boolean\" },\n                    ignoreImport: { type: \"boolean\" },\n                    ignoreExport: { type: \"boolean\" }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var options = context.options[0] || {},\n            ignoreDestructuring = options.ignoreDestructuring === true,\n            ignoreImport = options.ignoreImport === true,\n            ignoreExport = options.ignoreExport === true;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports error for unnecessarily renamed assignments\n         * @param {ASTNode} node - node to report\n         * @param {ASTNode} initial - node with initial name value\n         * @param {ASTNode} result - node with new name value\n         * @param {string} type - the type of the offending node\n         * @returns {void}\n         */\n        function reportError(node, initial, result, type) {\n            var name = initial.type === \"Identifier\" ? initial.name : initial.value;\n\n            return context.report({\n                node: node,\n                message: \"{{type}} {{name}} unnecessarily renamed.\",\n                data: {\n                    name: name,\n                    type: type\n                },\n                fix: function(fixer) {\n                    return fixer.replaceTextRange([\n                        initial.range[0],\n                        result.range[1]\n                    ], name);\n                }\n            });\n        }\n\n        /**\n         * Checks whether a destructured assignment is unnecessarily renamed\n         * @param {ASTNode} node - node to check\n         * @returns {void}\n         */\n        function checkDestructured(node) {\n            var properties,\n                i;\n\n            if (ignoreDestructuring) {\n                return;\n            }\n\n            properties = node.properties;\n\n            for (i = 0; i < properties.length; i++) {\n                if (properties[i].shorthand) {\n                    return;\n                }\n\n                if (properties[i].computed) {\n                    return;\n                }\n\n                if (properties[i].key.type === \"Identifier\" && properties[i].key.name === properties[i].value.name ||\n                        properties[i].key.type === \"Literal\" && properties[i].key.value === properties[i].value.name) {\n                    reportError(properties[i], properties[i].key, properties[i].value, \"Destructuring assignment\");\n                }\n            }\n        }\n\n        /**\n         * Checks whether an import is unnecessarily renamed\n         * @param {ASTNode} node - node to check\n         * @returns {void}\n         */\n        function checkImport(node) {\n            if (ignoreImport) {\n                return;\n            }\n\n            if (node.imported.name === node.local.name &&\n                    node.imported !== node.local) {\n                reportError(node, node.imported, node.local, \"Import\");\n            }\n        }\n\n        /**\n         * Checks whether an export is unnecessarily renamed\n         * @param {ASTNode} node - node to check\n         * @returns {void}\n         */\n        function checkExport(node) {\n            if (ignoreExport) {\n                return;\n            }\n\n            if (node.local.name === node.exported.name &&\n                    node.local !== node.exported) {\n                reportError(node, node.local, node.exported, \"Export\");\n            }\n\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ObjectPattern: checkDestructured,\n            ImportSpecifier: checkImport,\n            ExportSpecifier: checkExport\n        };\n    }\n};\n"]}