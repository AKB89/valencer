{"version":3,"sources":["eol-last.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,kDADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,iBAAS,YAPP;;AASF,gBAAQ,CACJ;AACI,kBAAM,CAAC,MAAD,EAAS,SAAT;AADV,SADI;AATN,KADO;;AAiBb,YAAQ,UAAS,OAAT,EAAkB;;;;;;AAMtB,eAAO;;AAEH,qBAAS,SAAS,WAAT,CAAqB,IAArB,EAA2B;;AAEhC,oBAAI,aAAa,QAAQ,aAAR,EAAjB;oBACI,MAAM,WAAW,OAAX,EADV;oBAEI,WAAW,EAAC,QAAQ,CAAT,EAFf;oBAGI,iBAAiB,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,MAH3C;oBAII,YAAY,mBAAmB,MAAnB,GAA4B,IAA5B,GAAmC,MAJnD;;AAMA,oBAAI,IAAI,IAAI,MAAJ,GAAa,CAAjB,MAAwB,IAA5B,EAAkC;;;AAG9B,6BAAS,IAAT,GAAgB,IAAI,KAAJ,CAAU,KAAV,EAAiB,MAAjC;AACA,4BAAQ,MAAR,CAAe;AACX,8BAAM,IADK;AAEX,6BAAK,QAFM;AAGX,iCAAS,gDAHE;AAIX,6BAAK,UAAS,KAAT,EAAgB;AACjB,mCAAO,MAAM,oBAAN,CAA2B,CAAC,CAAD,EAAI,IAAI,MAAR,CAA3B,EAA4C,SAA5C,CAAP;AACH;AANU,qBAAf;AAQH;AACJ;;AAvBE,SAAP;AA2BH;AAlDY,CAAjB","file":"eol-last-compiled.js","sourcesContent":["/**\n * @fileoverview Require file to end with single newline.\n * @author Nodeca Team <https://github.com/nodeca>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce at least one newline at the end of files\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"unix\", \"windows\"]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            Program: function checkBadEOF(node) {\n\n                var sourceCode = context.getSourceCode(),\n                    src = sourceCode.getText(),\n                    location = {column: 1},\n                    linebreakStyle = context.options[0] || \"unix\",\n                    linebreak = linebreakStyle === \"unix\" ? \"\\n\" : \"\\r\\n\";\n\n                if (src[src.length - 1] !== \"\\n\") {\n\n                    // file is not newline-terminated\n                    location.line = src.split(/\\n/g).length;\n                    context.report({\n                        node: node,\n                        loc: location,\n                        message: \"Newline required at end of file but not found.\",\n                        fix: function(fixer) {\n                            return fixer.insertTextAfterRange([0, src.length], linebreak);\n                        }\n                    });\n                }\n            }\n\n        };\n\n    }\n};\n"]}