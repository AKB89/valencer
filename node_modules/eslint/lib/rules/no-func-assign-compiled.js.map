{"version":3,"sources":["no-func-assign.js"],"names":[],"mappings":";;;;;AAKA;;AAEA,IAAI,WAAW,QAAQ,cAAR,CAAf;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,8CADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;;;;;;AAOtB,iBAAS,cAAT,CAAwB,UAAxB,EAAoC;AAChC,qBAAS,sBAAT,CAAgC,UAAhC,EAA4C,OAA5C,CAAoD,UAAS,SAAT,EAAoB;AACpE,wBAAQ,MAAR,CACI,UAAU,UADd,EAEI,2BAFJ,EAGI,EAAC,MAAM,UAAU,UAAV,CAAqB,IAA5B,EAHJ;AAIH,aALD;AAMH;;;;;;;AAOD,iBAAS,aAAT,CAAuB,QAAvB,EAAiC;AAC7B,gBAAI,SAAS,IAAT,CAAc,CAAd,EAAiB,IAAjB,KAA0B,cAA9B,EAA8C;AAC1C,+BAAe,SAAS,UAAxB;AACH;AACJ;;;;;;;AAOD,iBAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC5B,oBAAQ,oBAAR,CAA6B,IAA7B,EAAmC,OAAnC,CAA2C,aAA3C;AACH;;AAED,eAAO;AACH,iCAAqB,gBADlB;AAEH,gCAAoB;AAFjB,SAAP;AAIH;AAnDY,CAAjB","file":"no-func-assign-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of function declaration identifiers as variables.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow reassigning `function` declarations\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        /**\n         * Reports a reference if is non initializer and writable.\n         * @param {References} references - Collection of reference to check.\n         * @returns {void}\n         */\n        function checkReference(references) {\n            astUtils.getModifyingReferences(references).forEach(function(reference) {\n                context.report(\n                    reference.identifier,\n                    \"'{{name}}' is a function.\",\n                    {name: reference.identifier.name});\n            });\n        }\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {Variable} variable - A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            if (variable.defs[0].type === \"FunctionName\") {\n                checkReference(variable.references);\n            }\n        }\n\n        /**\n         * Checks parameters of a given function node.\n         * @param {ASTNode} node - A function node to check.\n         * @returns {void}\n         */\n        function checkForFunction(node) {\n            context.getDeclaredVariables(node).forEach(checkVariable);\n        }\n\n        return {\n            FunctionDeclaration: checkForFunction,\n            FunctionExpression: checkForFunction\n        };\n    }\n};\n"]}