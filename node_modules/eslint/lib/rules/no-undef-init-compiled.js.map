{"version":3,"sources":["no-undef-init.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,gDADX;AAEF,sBAAU,WAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,gCAAoB,UAAS,IAAT,EAAe;AAC/B,oBAAI,OAAO,KAAK,EAAL,CAAQ,IAAnB;oBACI,OAAO,KAAK,IAAL,IAAa,KAAK,IAAL,CAAU,IADlC;;AAGA,oBAAI,SAAS,WAAT,IAAwB,KAAK,MAAL,CAAY,IAAZ,KAAqB,OAAjD,EAA0D;AACtD,4BAAQ,MAAR,CAAe,IAAf,EAAqB,2DAArB,EAAkF,EAAE,MAAM,IAAR,EAAlF;AACH;AACJ;AATE,SAAP;AAYH;AAzBY,CAAjB","file":"no-undef-init-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when initializing to undefined\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow initializing variables to `undefined`\",\n            category: \"Variables\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            VariableDeclarator: function(node) {\n                var name = node.id.name,\n                    init = node.init && node.init.name;\n\n                if (init === \"undefined\" && node.parent.kind !== \"const\") {\n                    context.report(node, \"It's not necessary to initialize '{{name}}' to undefined.\", { name: name });\n                }\n            }\n        };\n\n    }\n};\n"]}