{"version":3,"sources":["no-self-assign.js"],"names":[],"mappings":"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","file":"no-self-assign-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to disallow assignments where both sides are exactly the same\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Traverses 2 Pattern nodes in parallel, then reports self-assignments.\n *\n * @param {ASTNode|null} left - A left node to traverse. This is a Pattern or\n *      a Property.\n * @param {ASTNode|null} right - A right node to traverse. This is a Pattern or\n *      a Property.\n * @param {function} report - A callback function to report.\n * @returns {void}\n */\nfunction eachSelfAssignment(left, right, report) {\n    var i, j;\n\n    if (!left || !right) {\n\n        // do nothing\n    } else if (\n        left.type === \"Identifier\" &&\n        right.type === \"Identifier\" &&\n        left.name === right.name\n    ) {\n        report(right);\n    } else if (\n        left.type === \"ArrayPattern\" &&\n        right.type === \"ArrayExpression\"\n    ) {\n        var end = Math.min(left.elements.length, right.elements.length);\n\n        for (i = 0; i < end; ++i) {\n            var rightElement = right.elements[i];\n\n            eachSelfAssignment(left.elements[i], rightElement, report);\n\n            // After a spread element, those indices are unknown.\n            if (rightElement && rightElement.type === \"SpreadElement\") {\n                break;\n            }\n        }\n    } else if (\n        left.type === \"RestElement\" &&\n        right.type === \"SpreadElement\"\n    ) {\n        eachSelfAssignment(left.argument, right.argument, report);\n    } else if (\n        left.type === \"ObjectPattern\" &&\n        right.type === \"ObjectExpression\" &&\n        right.properties.length >= 1\n    ) {\n\n        // Gets the index of the last spread property.\n        // It's possible to overwrite properties followed by it.\n        var startJ = 0;\n\n        for (i = right.properties.length - 1; i >= 0; --i) {\n            if (right.properties[i].type === \"ExperimentalSpreadProperty\") {\n                startJ = i + 1;\n                break;\n            }\n        }\n\n        for (i = 0; i < left.properties.length; ++i) {\n            for (j = startJ; j < right.properties.length; ++j) {\n                eachSelfAssignment(\n                    left.properties[i],\n                    right.properties[j],\n                    report\n                );\n            }\n        }\n    } else if (\n        left.type === \"Property\" &&\n        right.type === \"Property\" &&\n        !left.computed &&\n        !right.computed &&\n        right.kind === \"init\" &&\n        !right.method &&\n        left.key.name === right.key.name\n    ) {\n        eachSelfAssignment(left.value, right.value, report);\n    }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow assignments where both sides are exactly the same\",\n            category: \"Best Practices\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        /**\n         * Reports a given node as self assignments.\n         *\n         * @param {ASTNode} node - A node to report. This is an Identifier node.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({\n                node: node,\n                message: \"'{{name}}' is assigned to itself.\",\n                data: node\n            });\n        }\n\n        return {\n            AssignmentExpression: function(node) {\n                if (node.operator === \"=\") {\n                    eachSelfAssignment(node.left, node.right, report);\n                }\n            }\n        };\n    }\n};\n"]}