{"version":3,"sources":["no-console.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,+BADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,QADV;AAEI,wBAAY;AACR,uBAAO;AACH,0BAAM,OADH;AAEH,2BAAO;AACH,8BAAM;AADH,qBAFJ;AAKH,8BAAU,CALP;AAMH,iCAAa;AANV;AADC,aAFhB;AAYI,kCAAsB;AAZ1B,SADI;AAPN,KADO;;AA0Bb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,8BAAkB,UAAS,IAAT,EAAe;;AAE7B,oBAAI,KAAK,MAAL,CAAY,IAAZ,KAAqB,SAAzB,EAAoC;AAChC,wBAAI,eAAe,IAAnB;;AAEA,wBAAI,QAAQ,OAAR,CAAgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,4BAAI,oBAAoB,QAAQ,OAAR,CAAgB,CAAhB,EAAmB,KAA3C;AACA,4BAAI,iBAAiB,KAAK,QAAL,CAAc,IAAnC;AACA,4BAAI,oBAAqB,kBAAkB,OAAlB,CAA0B,cAA1B,IAA4C,CAAC,CAAtE;;AAEA,4BAAI,iBAAJ,EAAuB;AACnB,2CAAe,KAAf;AACH;AACJ;;AAED,wBAAI,YAAJ,EAAkB;AACd,gCAAQ,MAAR,CAAe,IAAf,EAAqB,+BAArB;AACH;AACJ;AACJ;AArBE,SAAP;AAwBH;AApDY,CAAjB","file":"no-console-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of console object\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow the use of `console`\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        },\n                        minItems: 1,\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        return {\n\n            MemberExpression: function(node) {\n\n                if (node.object.name === \"console\") {\n                    var blockConsole = true;\n\n                    if (context.options.length > 0) {\n                        var allowedProperties = context.options[0].allow;\n                        var passedProperty = node.property.name;\n                        var propertyIsAllowed = (allowedProperties.indexOf(passedProperty) > -1);\n\n                        if (propertyIsAllowed) {\n                            blockConsole = false;\n                        }\n                    }\n\n                    if (blockConsole) {\n                        context.report(node, \"Unexpected console statement.\");\n                    }\n                }\n            }\n        };\n\n    }\n};\n"]}