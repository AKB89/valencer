{"version":3,"sources":["object-shorthand.js"],"names":[],"mappings":"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","file":"object-shorthand-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce concise object methods and properties.\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\nvar OPTIONS = {\n    always: \"always\",\n    never: \"never\",\n    methods: \"methods\",\n    properties: \"properties\"\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require or disallow method and property shorthand syntax for object literals\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\", \"methods\", \"properties\", \"never\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\", \"methods\", \"properties\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                avoidQuotes: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\", \"methods\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                ignoreConstructors: {\n                                    type: \"boolean\"\n                                },\n                                avoidQuotes: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        }\n    },\n\n    create: function(context) {\n        var APPLY = context.options[0] || OPTIONS.always;\n        var APPLY_TO_METHODS = APPLY === OPTIONS.methods || APPLY === OPTIONS.always;\n        var APPLY_TO_PROPS = APPLY === OPTIONS.properties || APPLY === OPTIONS.always;\n        var APPLY_NEVER = APPLY === OPTIONS.never;\n\n        var PARAMS = context.options[1] || {};\n        var IGNORE_CONSTRUCTORS = PARAMS.ignoreConstructors;\n        var AVOID_QUOTES = PARAMS.avoidQuotes;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Determines if the first character of the name is a capital letter.\n         * @param {string} name The name of the node to evaluate.\n         * @returns {boolean} True if the first character of the property name is a capital letter, false if not.\n         * @private\n         */\n        function isConstructor(name) {\n            var firstChar = name.charAt(0);\n\n            return firstChar === firstChar.toUpperCase();\n        }\n\n        /**\n          * Checks whether a node is a string literal.\n          * @param   {ASTNode} node - Any AST node.\n          * @returns {boolean} `true` if it is a string literal.\n          */\n        function isStringLiteral(node) {\n            return node.type === \"Literal\" && typeof node.value === \"string\";\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Property: function(node) {\n                var isConciseProperty = node.method || node.shorthand,\n                    type;\n\n                // Ignore destructuring assignment\n                if (node.parent.type === \"ObjectPattern\") {\n                    return;\n                }\n\n                // if we're \"never\" and concise we should warn now\n                if (APPLY_NEVER && isConciseProperty) {\n                    type = node.method ? \"method\" : \"property\";\n                    context.report(node, \"Expected longform \" + type + \" syntax.\");\n                }\n\n                // {'xyz'() {}} should be written as {'xyz': function() {}}\n                if (AVOID_QUOTES && isStringLiteral(node.key) && isConciseProperty) {\n                    context.report(node, \"Expected longform method syntax for string literal keys.\");\n                }\n\n                // at this point if we're concise or if we're \"never\" we can leave\n                if (APPLY_NEVER || AVOID_QUOTES || isConciseProperty) {\n                    return;\n                }\n\n                // only computed methods can fail the following checks\n                if (node.computed && node.value.type !== \"FunctionExpression\") {\n                    return;\n                }\n\n                // getters and setters are ignored\n                if (node.kind === \"get\" || node.kind === \"set\") {\n                    return;\n                }\n\n                if (node.value.type === \"FunctionExpression\" && !node.value.id && APPLY_TO_METHODS) {\n                    if (IGNORE_CONSTRUCTORS && isConstructor(node.key.name)) {\n                        return;\n                    }\n\n                    // {x: function(){}} should be written as {x() {}}\n                    context.report(node, \"Expected method shorthand.\");\n                } else if (node.value.type === \"Identifier\" && node.key.name === node.value.name && APPLY_TO_PROPS) {\n\n                    // {x: x} should be written as {x}\n                    context.report(node, \"Expected property shorthand.\");\n                } else if (node.value.type === \"Identifier\" && node.key.type === \"Literal\" && node.key.value === node.value.name && APPLY_TO_PROPS) {\n\n                    // {\"x\": x} should be written as {x}\n                    context.report(node, \"Expected property shorthand.\");\n                }\n            }\n        };\n    }\n};\n"]}