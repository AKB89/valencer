{"version":3,"sources":["quote-props.js"],"names":[],"mappings":"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","file":"quote-props-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag non-quoted property names in object literals.\n * @author Mathias Bynens <http://mathiasbynens.be/>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar espree = require(\"espree\"),\n    keywords = require(\"../util/keywords\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require quotes around object literal property names\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\", \"as-needed\", \"consistent\", \"consistent-as-needed\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\", \"as-needed\", \"consistent\", \"consistent-as-needed\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                keywords: {\n                                    type: \"boolean\"\n                                },\n                                unnecessary: {\n                                    type: \"boolean\"\n                                },\n                                numbers: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        }\n    },\n\n    create: function(context) {\n\n        var MODE = context.options[0],\n            KEYWORDS = context.options[1] && context.options[1].keywords,\n            CHECK_UNNECESSARY = !context.options[1] || context.options[1].unnecessary !== false,\n            NUMBERS = context.options[1] && context.options[1].numbers,\n\n            MESSAGE_UNNECESSARY = \"Unnecessarily quoted property '{{property}}' found.\",\n            MESSAGE_UNQUOTED = \"Unquoted property '{{property}}' found.\",\n            MESSAGE_NUMERIC = \"Unquoted number literal '{{property}}' used as key.\",\n            MESSAGE_RESERVED = \"Unquoted reserved word '{{property}}' used as key.\";\n\n\n        /**\n         * Checks whether a certain string constitutes an ES3 token\n         * @param   {string} tokenStr - The string to be checked.\n         * @returns {boolean} `true` if it is an ES3 token.\n         */\n        function isKeyword(tokenStr) {\n            return keywords.indexOf(tokenStr) >= 0;\n        }\n\n        /**\n         * Checks if an espree-tokenized key has redundant quotes (i.e. whether quotes are unnecessary)\n         * @param   {string} rawKey The raw key value from the source\n         * @param   {espreeTokens} tokens The espree-tokenized node key\n         * @param   {boolean} [skipNumberLiterals=false] Indicates whether number literals should be checked\n         * @returns {boolean} Whether or not a key has redundant quotes.\n         * @private\n         */\n        function areQuotesRedundant(rawKey, tokens, skipNumberLiterals) {\n            return tokens.length === 1 && tokens[0].start === 0 && tokens[0].end === rawKey.length &&\n                ([\"Identifier\", \"Keyword\", \"Null\", \"Boolean\"].indexOf(tokens[0].type) >= 0 ||\n                (tokens[0].type === \"Numeric\" && !skipNumberLiterals && \"\" + +tokens[0].value === tokens[0].value));\n        }\n\n        /**\n         * Ensures that a property's key is quoted only when necessary\n         * @param   {ASTNode} node Property AST node\n         * @returns {void}\n         */\n        function checkUnnecessaryQuotes(node) {\n            var key = node.key,\n                isKeywordToken,\n                tokens;\n\n            if (node.method || node.computed || node.shorthand) {\n                return;\n            }\n\n            if (key.type === \"Literal\" && typeof key.value === \"string\") {\n                try {\n                    tokens = espree.tokenize(key.value);\n                } catch (e) {\n                    return;\n                }\n\n                if (tokens.length !== 1) {\n                    return;\n                }\n\n                isKeywordToken = isKeyword(tokens[0].value);\n\n                if (isKeywordToken && KEYWORDS) {\n                    return;\n                }\n\n                if (CHECK_UNNECESSARY && areQuotesRedundant(key.value, tokens, NUMBERS)) {\n                    context.report(node, MESSAGE_UNNECESSARY, {property: key.value});\n                }\n            } else if (KEYWORDS && key.type === \"Identifier\" && isKeyword(key.name)) {\n                context.report(node, MESSAGE_RESERVED, {property: key.name});\n            } else if (NUMBERS && key.type === \"Literal\" && typeof key.value === \"number\") {\n                context.report(node, MESSAGE_NUMERIC, {property: key.value});\n            }\n        }\n\n        /**\n         * Ensures that a property's key is quoted\n         * @param   {ASTNode} node Property AST node\n         * @returns {void}\n         */\n        function checkOmittedQuotes(node) {\n            var key = node.key;\n\n            if (!node.method && !node.computed && !node.shorthand && !(key.type === \"Literal\" && typeof key.value === \"string\")) {\n                context.report(node, MESSAGE_UNQUOTED, {\n                    property: key.name || key.value\n                });\n            }\n        }\n\n        /**\n         * Ensures that an object's keys are consistently quoted, optionally checks for redundancy of quotes\n         * @param   {ASTNode} node Property AST node\n         * @param   {boolean} checkQuotesRedundancy Whether to check quotes' redundancy\n         * @returns {void}\n         */\n        function checkConsistency(node, checkQuotesRedundancy) {\n            var quotes = false,\n                lackOfQuotes = false,\n                necessaryQuotes = false;\n\n            node.properties.forEach(function(property) {\n                var key = property.key,\n                    tokens;\n\n                if (!key || property.method || property.computed || property.shorthand) {\n                    return;\n                }\n\n                if (key.type === \"Literal\" && typeof key.value === \"string\") {\n\n                    quotes = true;\n\n                    if (checkQuotesRedundancy) {\n                        try {\n                            tokens = espree.tokenize(key.value);\n                        } catch (e) {\n                            necessaryQuotes = true;\n                            return;\n                        }\n\n                        necessaryQuotes = necessaryQuotes || !areQuotesRedundant(key.value, tokens) || KEYWORDS && isKeyword(tokens[0].value);\n                    }\n                } else if (KEYWORDS && checkQuotesRedundancy && key.type === \"Identifier\" && isKeyword(key.name)) {\n                    necessaryQuotes = true;\n                    context.report(node, \"Properties should be quoted as '{{property}}' is a reserved word.\", {property: key.name});\n                } else {\n                    lackOfQuotes = true;\n                }\n\n                if (quotes && lackOfQuotes) {\n                    context.report(node, \"Inconsistently quoted property '{{key}}' found.\", {\n                        key: key.name || key.value\n                    });\n                }\n            });\n\n            if (checkQuotesRedundancy && quotes && !necessaryQuotes) {\n                context.report(node, \"Properties shouldn't be quoted as all quotes are redundant.\");\n            }\n        }\n\n        return {\n            Property: function(node) {\n                if (MODE === \"always\" || !MODE) {\n                    checkOmittedQuotes(node);\n                }\n                if (MODE === \"as-needed\") {\n                    checkUnnecessaryQuotes(node);\n                }\n            },\n            ObjectExpression: function(node) {\n                if (MODE === \"consistent\") {\n                    checkConsistency(node, false);\n                }\n                if (MODE === \"consistent-as-needed\") {\n                    checkConsistency(node, true);\n                }\n            }\n        };\n\n    }\n};\n"]}