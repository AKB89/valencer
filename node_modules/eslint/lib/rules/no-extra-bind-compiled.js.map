{"version":3,"sources":["no-extra-bind.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,yCADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,YAAY,IAAhB;;;;;;;;;AASA,iBAAS,MAAT,CAAgB,IAAhB,EAAsB;AAClB,oBAAQ,MAAR,CAAe;AACX,sBAAM,KAAK,MAAL,CAAY,MADP;AAEX,yBAAS,sCAFE;AAGX,qBAAK,KAAK,MAAL,CAAY,QAAZ,CAAqB,GAArB,CAAyB;AAHnB,aAAf;AAKH;;;;;;;;;AASD,iBAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC3B,gBAAI,KAAK,QAAT,EAAmB;AACf,wBAAQ,KAAK,QAAL,CAAc,IAAtB;AACI,yBAAK,SAAL;AACI,+BAAO,OAAO,KAAK,QAAL,CAAc,KAArB,CAAP;AACJ,yBAAK,iBAAL;AACI,4BAAI,KAAK,QAAL,CAAc,WAAd,CAA0B,MAA1B,KAAqC,CAAzC,EAA4C;AACxC,mCAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,EAAwB,KAAxB,CAA8B,MAArC;AACH;;;AAGL;AACI,+BAAO,KAAP;AAVR;AAYH;AACD,mBAAO,KAAK,QAAL,CAAc,IAArB;AACH;;;;;;;;;;;;AAYD,iBAAS,oBAAT,CAA8B,IAA9B,EAAoC;AAChC,gBAAI,SAAS,KAAK,MAAlB;AACA,gBAAI,cAAc,OAAO,MAAzB;;AAEA,mBACI,eACA,YAAY,IAAZ,KAAqB,gBADrB,IAEA,YAAY,MAAZ,KAAuB,MAFvB,IAGA,YAAY,SAAZ,CAAsB,MAAtB,KAAiC,CAHjC,IAIA,OAAO,IAAP,KAAgB,kBAJhB,IAKA,OAAO,MAAP,KAAkB,IALlB,IAMA,gBAAgB,MAAhB,MAA4B,MAPhC;AASH;;;;;;;;;AASD,iBAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,wBAAY;AACR,yBAAS,qBAAqB,IAArB,CADD;AAER,2BAAW,KAFH;AAGR,uBAAO;AAHC,aAAZ;AAKH;;;;;;;;;;;AAWD,iBAAS,YAAT,CAAsB,IAAtB,EAA4B;AACxB,gBAAI,UAAU,OAAV,IAAqB,CAAC,UAAU,SAApC,EAA+C;AAC3C,uBAAO,IAAP;AACH;;AAED,wBAAY,UAAU,KAAtB;AACH;;;;;;;;;;AAUD,iBAAS,iBAAT,CAA2B,IAA3B,EAAiC;AAC7B,gBAAI,qBAAqB,IAArB,CAAJ,EAAgC;AAC5B,uBAAO,IAAP;AACH;AACJ;;;;;;;AAOD,iBAAS,eAAT,GAA2B;AACvB,gBAAI,SAAJ,EAAe;AACX,0BAAU,SAAV,GAAsB,IAAtB;AACH;AACJ;;AAED,eAAO;AACH,4CAAgC,iBAD7B;AAEH,iCAAqB,aAFlB;AAGH,wCAA4B,YAHzB;AAIH,gCAAoB,aAJjB;AAKH,uCAA2B,YALxB;AAMH,4BAAgB;AANb,SAAP;AAQH;AAhJY,CAAjB","file":"no-extra-bind-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag unnecessary bind calls\n * @author Bence DÃ¡nyi <bence@danyi.me>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow unnecessary calls to `.bind()`\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var scopeInfo = null;\n\n        /**\n         * Reports a given function node.\n         *\n         * @param {ASTNode} node - A node to report. This is a FunctionExpression or\n         *      an ArrowFunctionExpression.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({\n                node: node.parent.parent,\n                message: \"The function binding is unnecessary.\",\n                loc: node.parent.property.loc.start\n            });\n        }\n\n        /**\n         * Gets the property name of a given node.\n         * If the property name is dynamic, this returns an empty string.\n         *\n         * @param {ASTNode} node - A node to check. This is a MemberExpression.\n         * @returns {string} The property name of the node.\n         */\n        function getPropertyName(node) {\n            if (node.computed) {\n                switch (node.property.type) {\n                    case \"Literal\":\n                        return String(node.property.value);\n                    case \"TemplateLiteral\":\n                        if (node.property.expressions.length === 0) {\n                            return node.property.quasis[0].value.cooked;\n                        }\n\n                        // fallthrough\n                    default:\n                        return false;\n                }\n            }\n            return node.property.name;\n        }\n\n        /**\n         * Checks whether or not a given function node is the callee of `.bind()`\n         * method.\n         *\n         * e.g. `(function() {}.bind(foo))`\n         *\n         * @param {ASTNode} node - A node to report. This is a FunctionExpression or\n         *      an ArrowFunctionExpression.\n         * @returns {boolean} `true` if the node is the callee of `.bind()` method.\n         */\n        function isCalleeOfBindMethod(node) {\n            var parent = node.parent;\n            var grandparent = parent.parent;\n\n            return (\n                grandparent &&\n                grandparent.type === \"CallExpression\" &&\n                grandparent.callee === parent &&\n                grandparent.arguments.length === 1 &&\n                parent.type === \"MemberExpression\" &&\n                parent.object === node &&\n                getPropertyName(parent) === \"bind\"\n            );\n        }\n\n        /**\n         * Adds a scope information object to the stack.\n         *\n         * @param {ASTNode} node - A node to add. This node is a FunctionExpression\n         *      or a FunctionDeclaration node.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n            scopeInfo = {\n                isBound: isCalleeOfBindMethod(node),\n                thisFound: false,\n                upper: scopeInfo\n            };\n        }\n\n        /**\n         * Removes the scope information object from the top of the stack.\n         * At the same time, this reports the function node if the function has\n         * `.bind()` and the `this` keywords found.\n         *\n         * @param {ASTNode} node - A node to remove. This node is a\n         *      FunctionExpression or a FunctionDeclaration node.\n         * @returns {void}\n         */\n        function exitFunction(node) {\n            if (scopeInfo.isBound && !scopeInfo.thisFound) {\n                report(node);\n            }\n\n            scopeInfo = scopeInfo.upper;\n        }\n\n        /**\n         * Reports a given arrow function if the function is callee of `.bind()`\n         * method.\n         *\n         * @param {ASTNode} node - A node to report. This node is an\n         *      ArrowFunctionExpression.\n         * @returns {void}\n         */\n        function exitArrowFunction(node) {\n            if (isCalleeOfBindMethod(node)) {\n                report(node);\n            }\n        }\n\n        /**\n         * Set the mark as the `this` keyword was found in this scope.\n         *\n         * @returns {void}\n         */\n        function markAsThisFound() {\n            if (scopeInfo) {\n                scopeInfo.thisFound = true;\n            }\n        }\n\n        return {\n            \"ArrowFunctionExpression:exit\": exitArrowFunction,\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            ThisExpression: markAsThisFound\n        };\n    }\n};\n"]}