{"version":3,"sources":["no-alert.js"],"names":[],"mappings":"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","file":"no-alert-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of alert, confirm, prompt\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given name is a prohibited identifier.\n * @param {string} name The name to check\n * @returns {boolean} Whether or not the name is prohibited.\n */\nfunction isProhibitedIdentifier(name) {\n    return /^(alert|confirm|prompt)$/.test(name);\n}\n\n/**\n * Reports the given node and identifier name.\n * @param {RuleContext} context The ESLint rule context.\n * @param {ASTNode} node The node to report on.\n * @param {string} identifierName The name of the identifier.\n * @returns {void}\n */\nfunction report(context, node, identifierName) {\n    context.report(node, \"Unexpected {{name}}.\", { name: identifierName });\n}\n\n/**\n * Returns the property name of a MemberExpression.\n * @param {ASTNode} memberExpressionNode The MemberExpression node.\n * @returns {string|null} Returns the property name if available, null else.\n */\nfunction getPropertyName(memberExpressionNode) {\n    if (memberExpressionNode.computed) {\n        if (memberExpressionNode.property.type === \"Literal\") {\n            return memberExpressionNode.property.value;\n        }\n    } else {\n        return memberExpressionNode.property.name;\n    }\n    return null;\n}\n\n/**\n * Finds the escope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n    var references = scope.references.filter(function(reference) {\n        return reference.identifier.range[0] === node.range[0] &&\n            reference.identifier.range[1] === node.range[1];\n    });\n\n    if (references.length === 1) {\n        return references[0];\n    }\n    return null;\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {Object} globalScope The global scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, globalScope, node) {\n    var reference = findReference(scope, node);\n\n    return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\n/**\n * Checks if the given identifier node is a ThisExpression in the global scope or the global window property.\n * @param {Object} scope The current scope.\n * @param {Object} globalScope The global scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the node is a reference to the global object.\n */\nfunction isGlobalThisReferenceOrGlobalWindow(scope, globalScope, node) {\n    if (scope.type === \"global\" && node.type === \"ThisExpression\") {\n        return true;\n    } else if (node.name === \"window\") {\n        return !isShadowed(scope, globalScope, node);\n    }\n\n    return false;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow the use of `alert`, `confirm`, and `prompt`\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var globalScope;\n\n        return {\n\n            Program: function() {\n                globalScope = context.getScope();\n            },\n\n            CallExpression: function(node) {\n                var callee = node.callee,\n                    identifierName,\n                    currentScope = context.getScope();\n\n                // without window.\n                if (callee.type === \"Identifier\") {\n                    identifierName = callee.name;\n\n                    if (!isShadowed(currentScope, globalScope, callee) && isProhibitedIdentifier(callee.name)) {\n                        report(context, node, identifierName);\n                    }\n\n                } else if (callee.type === \"MemberExpression\" && isGlobalThisReferenceOrGlobalWindow(currentScope, globalScope, callee.object)) {\n                    identifierName = getPropertyName(callee);\n\n                    if (isProhibitedIdentifier(identifierName)) {\n                        report(context, node, identifierName);\n                    }\n                }\n\n            }\n        };\n\n    }\n};\n"]}