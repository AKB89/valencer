{"version":3,"sources":["brace-style.js"],"names":[],"mappings":"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","file":"brace-style-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag block statements that do not use the one true brace style\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent brace style for blocks\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                enum: [\"1tbs\", \"stroustrup\", \"allman\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    allowSingleLine: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var style = context.options[0] || \"1tbs\",\n            params = context.options[1] || {},\n            sourceCode = context.getSourceCode();\n\n        var OPEN_MESSAGE = \"Opening curly brace does not appear on the same line as controlling statement.\",\n            OPEN_MESSAGE_ALLMAN = \"Opening curly brace appears on the same line as controlling statement.\",\n            BODY_MESSAGE = \"Statement inside of curly braces should be on next line.\",\n            CLOSE_MESSAGE = \"Closing curly brace does not appear on the same line as the subsequent block.\",\n            CLOSE_MESSAGE_SINGLE = \"Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.\",\n            CLOSE_MESSAGE_STROUSTRUP_ALLMAN = \"Closing curly brace appears on the same line as the subsequent block.\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Determines if a given node is a block statement.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node is a block statement, false if not.\n         * @private\n         */\n        function isBlock(node) {\n            return node && node.type === \"BlockStatement\";\n        }\n\n        /**\n         * Check if the token is an punctuator with a value of curly brace\n         * @param {object} token - Token to check\n         * @returns {boolean} true if its a curly punctuator\n         * @private\n         */\n        function isCurlyPunctuator(token) {\n            return token.value === \"{\" || token.value === \"}\";\n        }\n\n        /**\n         * Binds a list of properties to a function that verifies that the opening\n         * curly brace is on the same line as its controlling statement of a given\n         * node.\n         * @param {...string} The properties to check on the node.\n         * @returns {Function} A function that will perform the check on a node\n         * @private\n         */\n        function checkBlock() {\n            var blockProperties = arguments;\n\n            return function(node) {\n                Array.prototype.forEach.call(blockProperties, function(blockProp) {\n                    var block = node[blockProp],\n                        previousToken,\n                        curlyToken,\n                        curlyTokenEnd,\n                        allOnSameLine;\n\n                    if (!isBlock(block)) {\n                        return;\n                    }\n\n                    previousToken = sourceCode.getTokenBefore(block);\n                    curlyToken = sourceCode.getFirstToken(block);\n                    curlyTokenEnd = sourceCode.getLastToken(block);\n                    allOnSameLine = previousToken.loc.start.line === curlyTokenEnd.loc.start.line;\n\n                    if (allOnSameLine && params.allowSingleLine) {\n                        return;\n                    }\n\n                    if (style !== \"allman\" && previousToken.loc.start.line !== curlyToken.loc.start.line) {\n                        context.report(node, OPEN_MESSAGE);\n                    } else if (style === \"allman\" && previousToken.loc.start.line === curlyToken.loc.start.line) {\n                        context.report(node, OPEN_MESSAGE_ALLMAN);\n                    }\n\n                    if (!block.body.length) {\n                        return;\n                    }\n\n                    if (curlyToken.loc.start.line === block.body[0].loc.start.line) {\n                        context.report(block.body[0], BODY_MESSAGE);\n                    }\n\n                    if (curlyTokenEnd.loc.start.line === block.body[block.body.length - 1].loc.start.line) {\n                        context.report(block.body[block.body.length - 1], CLOSE_MESSAGE_SINGLE);\n                    }\n                });\n            };\n        }\n\n        /**\n         * Enforces the configured brace style on IfStatements\n         * @param {ASTNode} node An IfStatement node.\n         * @returns {void}\n         * @private\n         */\n        function checkIfStatement(node) {\n            var tokens;\n\n            checkBlock(\"consequent\", \"alternate\")(node);\n\n            if (node.alternate) {\n\n                tokens = sourceCode.getTokensBefore(node.alternate, 2);\n\n                if (style === \"1tbs\") {\n                    if (tokens[0].loc.start.line !== tokens[1].loc.start.line &&\n                        node.consequent.type === \"BlockStatement\" &&\n                        isCurlyPunctuator(tokens[0])) {\n                        context.report(node.alternate, CLOSE_MESSAGE);\n                    }\n                } else if (tokens[0].loc.start.line === tokens[1].loc.start.line) {\n                    context.report(node.alternate, CLOSE_MESSAGE_STROUSTRUP_ALLMAN);\n                }\n\n            }\n        }\n\n        /**\n         * Enforces the configured brace style on TryStatements\n         * @param {ASTNode} node A TryStatement node.\n         * @returns {void}\n         * @private\n         */\n        function checkTryStatement(node) {\n            var tokens;\n\n            checkBlock(\"block\", \"finalizer\")(node);\n\n            if (isBlock(node.finalizer)) {\n                tokens = sourceCode.getTokensBefore(node.finalizer, 2);\n                if (style === \"1tbs\") {\n                    if (tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n                        context.report(node.finalizer, CLOSE_MESSAGE);\n                    }\n                } else if (tokens[0].loc.start.line === tokens[1].loc.start.line) {\n                    context.report(node.finalizer, CLOSE_MESSAGE_STROUSTRUP_ALLMAN);\n                }\n            }\n        }\n\n        /**\n         * Enforces the configured brace style on CatchClauses\n         * @param {ASTNode} node A CatchClause node.\n         * @returns {void}\n         * @private\n         */\n        function checkCatchClause(node) {\n            var previousToken = sourceCode.getTokenBefore(node),\n                firstToken = sourceCode.getFirstToken(node);\n\n            checkBlock(\"body\")(node);\n\n            if (isBlock(node.body)) {\n                if (style === \"1tbs\") {\n                    if (previousToken.loc.start.line !== firstToken.loc.start.line) {\n                        context.report(node, CLOSE_MESSAGE);\n                    }\n                } else {\n                    if (previousToken.loc.start.line === firstToken.loc.start.line) {\n                        context.report(node, CLOSE_MESSAGE_STROUSTRUP_ALLMAN);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Enforces the configured brace style on SwitchStatements\n         * @param {ASTNode} node A SwitchStatement node.\n         * @returns {void}\n         * @private\n         */\n        function checkSwitchStatement(node) {\n            var tokens;\n\n            if (node.cases && node.cases.length) {\n                tokens = sourceCode.getTokensBefore(node.cases[0], 2);\n            } else {\n                tokens = sourceCode.getLastTokens(node, 3);\n            }\n\n            if (style !== \"allman\" && tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n                context.report(node, OPEN_MESSAGE);\n            } else if (style === \"allman\" && tokens[0].loc.start.line === tokens[1].loc.start.line) {\n                context.report(node, OPEN_MESSAGE_ALLMAN);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: checkBlock(\"body\"),\n            FunctionExpression: checkBlock(\"body\"),\n            ArrowFunctionExpression: checkBlock(\"body\"),\n            IfStatement: checkIfStatement,\n            TryStatement: checkTryStatement,\n            CatchClause: checkCatchClause,\n            DoWhileStatement: checkBlock(\"body\"),\n            WhileStatement: checkBlock(\"body\"),\n            WithStatement: checkBlock(\"body\"),\n            ForStatement: checkBlock(\"body\"),\n            ForInStatement: checkBlock(\"body\"),\n            ForOfStatement: checkBlock(\"body\"),\n            SwitchStatement: checkSwitchStatement\n        };\n\n    }\n};\n"]}