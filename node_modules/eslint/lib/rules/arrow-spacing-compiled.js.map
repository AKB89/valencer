{"version":3,"sources":["arrow-spacing.js"],"names":[],"mappings":"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","file":"arrow-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to define spacing before/after arrow function's arrow.\n * @author Jxck\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce consistent spacing before and after the arrow in arrow functions\",\n            category: \"ECMAScript 6\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: {\n                        type: \"boolean\"\n                    },\n                    after: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        // merge rules with default\n        var rule = { before: true, after: true },\n            option = context.options[0] || {};\n\n        rule.before = option.before !== false;\n        rule.after = option.after !== false;\n\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Get tokens of arrow(`=>`) and before/after arrow.\n         * @param {ASTNode} node The arrow function node.\n         * @returns {Object} Tokens of arrow and before/after arrow.\n         */\n        function getTokens(node) {\n            var t = sourceCode.getFirstToken(node);\n            var before;\n\n            while (t.type !== \"Punctuator\" || t.value !== \"=>\") {\n                before = t;\n                t = sourceCode.getTokenAfter(t);\n            }\n            var after = sourceCode.getTokenAfter(t);\n\n            return { before: before, arrow: t, after: after };\n        }\n\n        /**\n         * Count spaces before/after arrow(`=>`) token.\n         * @param {Object} tokens Tokens before/after arrow.\n         * @returns {Object} count of space before/after arrow.\n         */\n        function countSpaces(tokens) {\n            var before = tokens.arrow.range[0] - tokens.before.range[1];\n            var after = tokens.after.range[0] - tokens.arrow.range[1];\n\n            return { before: before, after: after };\n        }\n\n        /**\n         * Determines whether space(s) before after arrow(`=>`) is satisfy rule.\n         * if before/after value is `true`, there should be space(s).\n         * if before/after value is `false`, there should be no space.\n         * @param {ASTNode} node The arrow function node.\n         * @returns {void}\n         */\n        function spaces(node) {\n            var tokens = getTokens(node);\n            var countSpace = countSpaces(tokens);\n\n            if (rule.before) {\n\n                // should be space(s) before arrow\n                if (countSpace.before === 0) {\n                    context.report({\n                        node: tokens.before,\n                        message: \"Missing space before =>\",\n                        fix: function(fixer) {\n                            return fixer.insertTextBefore(tokens.arrow, \" \");\n                        }\n                    });\n                }\n            } else {\n\n                // should be no space before arrow\n                if (countSpace.before > 0) {\n                    context.report({\n                        node: tokens.before,\n                        message: \"Unexpected space before =>\",\n                        fix: function(fixer) {\n                            return fixer.removeRange([tokens.before.range[1], tokens.arrow.range[0]]);\n                        }\n                    });\n                }\n            }\n\n            if (rule.after) {\n\n                // should be space(s) after arrow\n                if (countSpace.after === 0) {\n                    context.report({\n                        node: tokens.after,\n                        message: \"Missing space after =>\",\n                        fix: function(fixer) {\n                            return fixer.insertTextAfter(tokens.arrow, \" \");\n                        }\n                    });\n                }\n            } else {\n\n                // should be no space after arrow\n                if (countSpace.after > 0) {\n                    context.report({\n                        node: tokens.after,\n                        message: \"Unexpected space after =>\",\n                        fix: function(fixer) {\n                            return fixer.removeRange([tokens.arrow.range[1], tokens.after.range[0]]);\n                        }\n                    });\n                }\n            }\n        }\n\n        return {\n            ArrowFunctionExpression: spaces\n        };\n    }\n};\n"]}