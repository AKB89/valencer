{"version":3,"sources":["no-extra-boolean-cast.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,oCADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,gBAAS,OAAT,EAAkB;;;AAGtB,YAAI,qBAAqB,CACrB,aADqB,EAErB,kBAFqB,EAGrB,gBAHqB,EAIrB,uBAJqB,EAKrB,cALqB,CAAzB;;;;;;;;;AAeA,iBAAS,kBAAT,CAA4B,IAA5B,EAAkC,MAAlC,EAA0C;AACtC,mBACK,mBAAmB,OAAnB,CAA2B,OAAO,IAAlC,MAA4C,CAAC,CAA7C,IACG,SAAS,OAAO,IADpB;;;AAIC,mBAAO,IAAP,KAAgB,iBAAhB,IACG,OAAO,QAAP,KAAoB,GAN5B;AAQH;;AAGD,eAAO;AACH,6BAAiB,yBAAS,IAAT,EAAe;AAC5B,oBAAI,YAAY,QAAQ,YAAR,EAAhB;oBACI,SAAS,UAAU,GAAV,EADb;oBAEI,cAAc,UAAU,GAAV,EAFlB;;;AAKA,oBAAI,KAAK,QAAL,KAAkB,GAAlB,IACI,OAAO,IAAP,KAAgB,iBADpB,IAEI,OAAO,QAAP,KAAoB,GAF5B,EAEiC;AAC7B;AACH;;AAED,oBAAI,mBAAmB,MAAnB,EAA2B,WAA3B;;;AAGC,iBAAC,YAAY,IAAZ,KAAqB,gBAArB,IAAyC,YAAY,IAAZ,KAAqB,eAA/D,KACG,YAAY,MAAZ,CAAmB,IAAnB,KAA4B,YAD/B,IAEG,YAAY,MAAZ,CAAmB,IAAnB,KAA4B,SALpC,EAME;AACE,4BAAQ,MAAR,CAAe,IAAf,EAAqB,4BAArB;AACH;AACJ,aAtBE;AAuBH,4BAAgB,wBAAS,IAAT,EAAe;AAC3B,oBAAI,SAAS,KAAK,MAAlB;;AAEA,oBAAI,KAAK,MAAL,CAAY,IAAZ,KAAqB,YAArB,IAAqC,KAAK,MAAL,CAAY,IAAZ,KAAqB,SAA9D,EAAyE;AACrE;AACH;;AAED,oBAAI,mBAAmB,IAAnB,EAAyB,MAAzB,CAAJ,EAAsC;AAClC,4BAAQ,MAAR,CAAe,IAAf,EAAqB,yBAArB;AACH;AACJ;AAjCE,SAAP;AAoCH;AA7EY,CAAjB","file":"no-extra-boolean-cast-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag unnecessary double negation in Boolean contexts\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow unnecessary boolean casts\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        // Node types which have a test which will coerce values to booleans.\n        var BOOLEAN_NODE_TYPES = [\n            \"IfStatement\",\n            \"DoWhileStatement\",\n            \"WhileStatement\",\n            \"ConditionalExpression\",\n            \"ForStatement\"\n        ];\n\n        /**\n         * Check if a node is in a context where its value would be coerced to a boolean at runtime.\n         *\n         * @param {Object} node The node\n         * @param {Object} parent Its parent\n         * @returns {Boolean} If it is in a boolean context\n         */\n        function isInBooleanContext(node, parent) {\n            return (\n                (BOOLEAN_NODE_TYPES.indexOf(parent.type) !== -1 &&\n                    node === parent.test) ||\n\n                // !<bool>\n                (parent.type === \"UnaryExpression\" &&\n                    parent.operator === \"!\")\n            );\n        }\n\n\n        return {\n            UnaryExpression: function(node) {\n                var ancestors = context.getAncestors(),\n                    parent = ancestors.pop(),\n                    grandparent = ancestors.pop();\n\n                // Exit early if it's guaranteed not to match\n                if (node.operator !== \"!\" ||\n                        parent.type !== \"UnaryExpression\" ||\n                        parent.operator !== \"!\") {\n                    return;\n                }\n\n                if (isInBooleanContext(parent, grandparent) ||\n\n                    // Boolean(<bool>) and new Boolean(<bool>)\n                    ((grandparent.type === \"CallExpression\" || grandparent.type === \"NewExpression\") &&\n                        grandparent.callee.type === \"Identifier\" &&\n                        grandparent.callee.name === \"Boolean\")\n                ) {\n                    context.report(node, \"Redundant double negation.\");\n                }\n            },\n            CallExpression: function(node) {\n                var parent = node.parent;\n\n                if (node.callee.type !== \"Identifier\" || node.callee.name !== \"Boolean\") {\n                    return;\n                }\n\n                if (isInBooleanContext(node, parent)) {\n                    context.report(node, \"Redundant Boolean call.\");\n                }\n            }\n        };\n\n    }\n};\n"]}