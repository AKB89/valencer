{"version":3,"sources":["no-spaced-func.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,wEADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,iBAAS,YAPP;AAQF,gBAAQ;AARN,KADO;;AAYb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,YAAI,aAAa,QAAQ,aAAR,EAAjB;;;;;;;;AAQA,iBAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC5B,gBAAI,kBAAkB,WAAW,YAAX,CAAwB,KAAK,MAA7B,CAAtB;gBACI,YAAY,eADhB;gBAEI,aAAa,WAAW,aAAX,CAAyB,eAAzB,CAFjB;;;AAKA,mBACI,cACA,WAAW,KAAX,CAAiB,CAAjB,IAAsB,KAAK,KAAL,CAAW,CAAX,CADtB,IAEA,WAAW,KAAX,KAAqB,GAHzB,EAIE;AACE,4BAAY,UAAZ;AACA,6BAAa,WAAW,aAAX,CAAyB,UAAzB,CAAb;AACH;;;AAGD,gBAAI,cACA,WAAW,KAAX,CAAiB,CAAjB,IAAsB,KAAK,KAAL,CAAW,CAAX,CADtB,IAEA,WAAW,oBAAX,CAAgC,SAAhC,EAA2C,UAA3C,CAFJ,EAGE;AACE,wBAAQ,MAAR,CAAe;AACX,0BAAM,IADK;AAEX,yBAAK,gBAAgB,GAAhB,CAAoB,KAFd;AAGX,6BAAS,mDAHE;AAIX,yBAAK,UAAS,KAAT,EAAgB;AACjB,+BAAO,MAAM,WAAN,CAAkB,CAAC,UAAU,KAAV,CAAgB,CAAhB,CAAD,EAAqB,WAAW,KAAX,CAAiB,CAAjB,CAArB,CAAlB,CAAP;AACH;AANU,iBAAf;AAQH;AACJ;;AAED,eAAO;AACH,4BAAgB,gBADb;AAEH,2BAAe;AAFZ,SAAP;AAKH;AA1DY,CAAjB","file":"no-spaced-func-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to check that spaced function application\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow spacing between `function` identifiers and their applications\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        fixable: \"whitespace\",\n        schema: []\n    },\n\n    create: function(context) {\n\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Check if open space is present in a function name\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function detectOpenSpaces(node) {\n            var lastCalleeToken = sourceCode.getLastToken(node.callee),\n                prevToken = lastCalleeToken,\n                parenToken = sourceCode.getTokenAfter(lastCalleeToken);\n\n            // advances to an open parenthesis.\n            while (\n                parenToken &&\n                parenToken.range[1] < node.range[1] &&\n                parenToken.value !== \"(\"\n            ) {\n                prevToken = parenToken;\n                parenToken = sourceCode.getTokenAfter(parenToken);\n            }\n\n            // look for a space between the callee and the open paren\n            if (parenToken &&\n                parenToken.range[1] < node.range[1] &&\n                sourceCode.isSpaceBetweenTokens(prevToken, parenToken)\n            ) {\n                context.report({\n                    node: node,\n                    loc: lastCalleeToken.loc.start,\n                    message: \"Unexpected space between function name and paren.\",\n                    fix: function(fixer) {\n                        return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        return {\n            CallExpression: detectOpenSpaces,\n            NewExpression: detectOpenSpaces\n        };\n\n    }\n};\n"]}