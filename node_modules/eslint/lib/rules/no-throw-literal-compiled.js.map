{"version":3,"sources":["no-throw-literal.js"],"names":[],"mappings":";;;;;AAKA;;;;;;;;;;;;AAWA,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AACxB,YAAQ,KAAK,IAAb;AACI,aAAK,YAAL;AACA,aAAK,gBAAL;AACA,aAAK,eAAL;AACA,aAAK,kBAAL;AACA,aAAK,0BAAL;AACA,aAAK,iBAAL;AACI,mBAAO,IAAP,C;;AAEJ,aAAK,sBAAL;AACI,mBAAO,aAAa,KAAK,KAAlB,CAAP;;AAEJ,aAAK,oBAAL;AACI,gBAAI,QAAQ,KAAK,WAAjB;;AAEA,mBAAO,MAAM,MAAN,KAAiB,CAAjB,IAAsB,aAAa,MAAM,MAAM,MAAN,GAAe,CAArB,CAAb,CAA7B;;AAEJ,aAAK,mBAAL;AACI,mBAAO,aAAa,KAAK,IAAlB,KAA2B,aAAa,KAAK,KAAlB,CAAlC;;AAEJ,aAAK,uBAAL;AACI,mBAAO,aAAa,KAAK,UAAlB,KAAiC,aAAa,KAAK,SAAlB,CAAxC;;AAEJ;AACI,mBAAO,KAAP;AAxBR;AA0BH;;;;;;AAMD,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,0CADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;;AAEtB,eAAO;;AAEH,4BAAgB,UAAS,IAAT,EAAe;AAC3B,oBAAI,CAAC,aAAa,KAAK,QAAlB,CAAL,EAAkC;AAC9B,4BAAQ,MAAR,CAAe,IAAf,EAAqB,kCAArB;AACH,iBAFD,MAEO,IAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,YAA3B,EAAyC;AAC5C,wBAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,WAA3B,EAAwC;AACpC,gCAAQ,MAAR,CAAe,IAAf,EAAqB,yBAArB;AACH;AACJ;AAEJ;;AAXE,SAAP;AAeH;AA5BY,CAAjB","file":"no-throw-literal-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to restrict what can be thrown as an exception.\n * @author Dieter Oberkofler\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determine if a node has a possiblity to be an Error object\n * @param  {ASTNode}  node  ASTNode to check\n * @returns {boolean}       True if there is a chance it contains an Error obj\n */\nfunction couldBeError(node) {\n    switch (node.type) {\n        case \"Identifier\":\n        case \"CallExpression\":\n        case \"NewExpression\":\n        case \"MemberExpression\":\n        case \"TaggedTemplateExpression\":\n        case \"YieldExpression\":\n            return true; // possibly an error object.\n\n        case \"AssignmentExpression\":\n            return couldBeError(node.right);\n\n        case \"SequenceExpression\":\n            var exprs = node.expressions;\n\n            return exprs.length !== 0 && couldBeError(exprs[exprs.length - 1]);\n\n        case \"LogicalExpression\":\n            return couldBeError(node.left) || couldBeError(node.right);\n\n        case \"ConditionalExpression\":\n            return couldBeError(node.consequent) || couldBeError(node.alternate);\n\n        default:\n            return false;\n    }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow throwing literals as exceptions\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        return {\n\n            ThrowStatement: function(node) {\n                if (!couldBeError(node.argument)) {\n                    context.report(node, \"Expected an object to be thrown.\");\n                } else if (node.argument.type === \"Identifier\") {\n                    if (node.argument.name === \"undefined\") {\n                        context.report(node, \"Do not throw undefined.\");\n                    }\n                }\n\n            }\n\n        };\n\n    }\n};\n"]}