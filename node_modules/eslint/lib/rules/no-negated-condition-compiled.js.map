{"version":3,"sources":["no-negated-condition.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,6BADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,gBAAS,OAAT,EAAkB;;;;;;;;AAQtB,iBAAS,uBAAT,CAAiC,IAAjC,EAAuC;AACnC,mBAAO,KAAK,SAAL,IAAkB,KAAK,SAAL,CAAe,IAAf,KAAwB,aAAjD;AACH;;;;;;;;AAQD,iBAAS,wBAAT,CAAkC,IAAlC,EAAwC;AACpC,mBAAO,KAAK,IAAL,KAAc,iBAAd,IAAmC,KAAK,QAAL,KAAkB,GAA5D;AACH;;;;;;;;AAQD,iBAAS,yBAAT,CAAmC,IAAnC,EAAyC;AACrC,mBAAO,KAAK,IAAL,KAAc,kBAAd,KACF,KAAK,QAAL,KAAkB,IAAlB,IAA0B,KAAK,QAAL,KAAkB,KAD1C,CAAP;AAEH;;;;;;;;AAQD,iBAAS,WAAT,CAAqB,IAArB,EAA2B;AACvB,mBAAO,yBAAyB,KAAK,IAA9B,KAAuC,0BAA0B,KAAK,IAA/B,CAA9C;AACH;;AAED,eAAO;AACH,yBAAa,qBAAS,IAAT,EAAe;AACxB,oBAAI,CAAC,wBAAwB,IAAxB,CAAL,EAAoC;AAChC;AACH;;AAED,oBAAI,YAAY,IAAZ,CAAJ,EAAuB;AACnB,4BAAQ,MAAR,CAAe,IAAf,EAAqB,+BAArB;AACH;AACJ,aATE;AAUH,mCAAuB,+BAAS,IAAT,EAAe;AAClC,oBAAI,YAAY,IAAZ,CAAJ,EAAuB;AACnB,4BAAQ,MAAR,CAAe,IAAf,EAAqB,+BAArB;AACH;AACJ;AAdE,SAAP;AAgBH;AAtEY,CAAjB","file":"no-negated-condition-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to disallow a negated condition\n * @author Alberto Rodr√≠guez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow negated conditions\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n\n        /**\n         * Determines if a given node is an if-else without a condition on the else\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node has an else without an if.\n         * @private\n         */\n        function hasElseWithoutCondition(node) {\n            return node.alternate && node.alternate.type !== \"IfStatement\";\n        }\n\n        /**\n         * Determines if a given node is a negated unary expression\n         * @param {Object} test The test object to check.\n         * @returns {boolean} True if the node is a negated unary expression.\n         * @private\n         */\n        function isNegatedUnaryExpression(test) {\n            return test.type === \"UnaryExpression\" && test.operator === \"!\";\n        }\n\n        /**\n         * Determines if a given node is a negated binary expression\n         * @param {Test} test The test to check.\n         * @returns {boolean} True if the node is a negated binary expression.\n         * @private\n         */\n        function isNegatedBinaryExpression(test) {\n            return test.type === \"BinaryExpression\" &&\n                (test.operator === \"!=\" || test.operator === \"!==\");\n        }\n\n        /**\n         * Determines if a given node has a negated if expression\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node has a negated if expression.\n         * @private\n         */\n        function isNegatedIf(node) {\n            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\n        }\n\n        return {\n            IfStatement: function(node) {\n                if (!hasElseWithoutCondition(node)) {\n                    return;\n                }\n\n                if (isNegatedIf(node)) {\n                    context.report(node, \"Unexpected negated condition.\");\n                }\n            },\n            ConditionalExpression: function(node) {\n                if (isNegatedIf(node)) {\n                    context.report(node, \"Unexpected negated condition.\");\n                }\n            }\n        };\n    }\n};\n"]}