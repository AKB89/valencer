{"version":3,"sources":["no-empty-function.js"],"names":[],"mappings":"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","file":"no-empty-function-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to disallow empty functions.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar ALLOW_OPTIONS = Object.freeze([\n    \"functions\",\n    \"arrowFunctions\",\n    \"generatorFunctions\",\n    \"methods\",\n    \"generatorMethods\",\n    \"getters\",\n    \"setters\",\n    \"constructors\"\n]);\nvar SHOW_KIND = Object.freeze({\n    functions: \"function\",\n    arrowFunctions: \"arrow function\",\n    generatorFunctions: \"generator function\",\n    asyncFunctions: \"async function\",\n    methods: \"method\",\n    generatorMethods: \"generator method\",\n    asyncMethods: \"async method\",\n    getters: \"getter\",\n    setters: \"setter\",\n    constructors: \"constructor\"\n});\n\n/**\n * Gets the kind of a given function node.\n *\n * @param {ASTNode} node - A function node to get. This is one of\n *      an ArrowFunctionExpression, a FunctionDeclaration, or a\n *      FunctionExpression.\n * @returns {string} The kind of the function. This is one of \"functions\",\n *      \"arrowFunctions\", \"generatorFunctions\", \"asyncFunctions\", \"methods\",\n *      \"generatorMethods\", \"asyncMethods\", \"getters\", \"setters\", and\n *      \"constructors\".\n */\nfunction getKind(node) {\n    var parent = node.parent;\n    var kind = \"\";\n\n    if (node.type === \"ArrowFunctionExpression\") {\n        return \"arrowFunctions\";\n    }\n\n    // Detects main kind.\n    if (parent.type === \"Property\") {\n        if (parent.kind === \"get\") {\n            return \"getters\";\n        }\n        if (parent.kind === \"set\") {\n            return \"setters\";\n        }\n        kind = parent.method ? \"methods\" : \"functions\";\n\n    } else if (parent.type === \"MethodDefinition\") {\n        if (parent.kind === \"get\") {\n            return \"getters\";\n        }\n        if (parent.kind === \"set\") {\n            return \"setters\";\n        }\n        if (parent.kind === \"constructor\") {\n            return \"constructors\";\n        }\n        kind = \"methods\";\n\n    } else {\n        kind = \"functions\";\n    }\n\n    // Detects prefix.\n    var prefix = \"\";\n\n    if (node.generator) {\n        prefix = \"generator\";\n    } else if (node.async) {\n        prefix = \"async\";\n    } else {\n        return kind;\n    }\n    return prefix + kind[0].toUpperCase() + kind.slice(1);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow empty functions\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {enum: ALLOW_OPTIONS},\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var options = context.options[0] || {};\n        var allowed = options.allow || [];\n\n        var sourceCode = context.getSourceCode();\n\n        /**\n         * Reports a given function node if the node matches the following patterns.\n         *\n         * - Not allowed by options.\n         * - The body is empty.\n         * - The body doesn't have any comments.\n         *\n         * @param {ASTNode} node - A function node to report. This is one of\n         *      an ArrowFunctionExpression, a FunctionDeclaration, or a\n         *      FunctionExpression.\n         * @returns {void}\n         */\n        function reportIfEmpty(node) {\n            var kind = getKind(node);\n\n            if (allowed.indexOf(kind) === -1 &&\n                node.body.type === \"BlockStatement\" &&\n                node.body.body.length === 0 &&\n                sourceCode.getComments(node.body).trailing.length === 0\n            ) {\n                context.report({\n                    node: node,\n                    loc: node.body.loc.start,\n                    message: \"Unexpected empty \" + SHOW_KIND[kind] + \".\"\n                });\n            }\n        }\n\n        return {\n            ArrowFunctionExpression: reportIfEmpty,\n            FunctionDeclaration: reportIfEmpty,\n            FunctionExpression: reportIfEmpty\n        };\n    }\n};\n"]}