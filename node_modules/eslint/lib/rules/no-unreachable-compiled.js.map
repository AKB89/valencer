{"version":3,"sources":["no-unreachable.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;AAWA,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,WAAO,QAAQ,KAAK,IAAb,CAAP;AACH;;;;;;;AAOD,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC5B,WAAO,CAAC,QAAQ,SAAhB;AACH;;;;;;AAMD,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,uFADX;AAEF,sBAAU,iBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ;AAPN,KADO;;AAWb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,kBAAkB,IAAtB;;;;;;;AAOA,iBAAS,mBAAT,CAA6B,IAA7B,EAAmC;AAC/B,gBAAI,gBAAgB,eAAhB,CAAgC,KAAhC,CAAsC,aAAtC,CAAJ,EAA0D;AACtD,wBAAQ,MAAR,CAAe,EAAC,SAAS,mBAAV,EAA+B,MAAM,IAArC,EAAf;AACH;AACJ;;AAED,eAAO;;;AAGH,6BAAiB,UAAS,QAAT,EAAmB;AAChC,kCAAkB,QAAlB;AACH,aALE;;AAOH,2BAAe,YAAW;AACtB,kCAAkB,gBAAgB,KAAlC;AACH,aATE;;;AAYH,4BAAgB,mBAZb;AAaH,4BAAgB,mBAbb;AAcH,8BAAkB,mBAdf;AAeH,+BAAmB,mBAfhB;AAgBH,+BAAmB,mBAhBhB;AAiBH,8BAAkB,mBAjBf;AAkBH,4BAAgB,mBAlBb;AAmBH,iCAAqB,mBAnBlB;AAoBH,4BAAgB,mBApBb;AAqBH,4BAAgB,mBArBb;AAsBH,0BAAc,mBAtBX;AAuBH,yBAAa,mBAvBV;AAwBH,+BAAmB,mBAxBhB;AAyBH,8BAAkB,mBAzBf;AA0BH,6BAAiB,mBA1Bd;AA2BH,6BAAiB,mBA3Bd;AA4BH,4BAAgB,mBA5Bb;AA6BH,0BAAc,mBA7BX;;AA+BH,iCAAqB,UAAS,IAAT,EAAe;AAChC,oBAAI,KAAK,IAAL,KAAc,KAAd,IAAuB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,aAAvB,CAA3B,EAAkE;AAC9D,wCAAoB,IAApB;AACH;AACJ,aAnCE;;AAqCH,4BAAgB,mBArCb;AAsCH,2BAAe,mBAtCZ;AAuCH,oCAAwB,mBAvCrB;AAwCH,sCAA0B,mBAxCvB;AAyCH,kCAAsB;AAzCnB,SAAP;AA2CH;AApEY,CAAjB","file":"no-unreachable-compiled.js","sourcesContent":["/**\n * @fileoverview Checks for unreachable code due to return, throws, break, and continue.\n * @author Joel Feenstra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given variable declarator has the initializer.\n * @param {ASTNode} node - A VariableDeclarator node to check.\n * @returns {boolean} `true` if the node has the initializer.\n */\nfunction isInitialized(node) {\n    return Boolean(node.init);\n}\n\n/**\n * Checks whether or not a given code path segment is unreachable.\n * @param {CodePathSegment} segment - A CodePathSegment to check.\n * @returns {boolean} `true` if the segment is unreachable.\n */\nfunction isUnreachable(segment) {\n    return !segment.reachable;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow unreachable code after `return`, `throw`, `continue`, and `break` statements\",\n            category: \"Possible Errors\",\n            recommended: true\n        },\n\n        schema: []\n    },\n\n    create: function(context) {\n        var currentCodePath = null;\n\n        /**\n         * Reports a given node if it's unreachable.\n         * @param {ASTNode} node - A statement node to report.\n         * @returns {void}\n         */\n        function reportIfUnreachable(node) {\n            if (currentCodePath.currentSegments.every(isUnreachable)) {\n                context.report({message: \"Unreachable code.\", node: node});\n            }\n        }\n\n        return {\n\n            // Manages the current code path.\n            onCodePathStart: function(codePath) {\n                currentCodePath = codePath;\n            },\n\n            onCodePathEnd: function() {\n                currentCodePath = currentCodePath.upper;\n            },\n\n            // Registers for all statement nodes (excludes FunctionDeclaration).\n            BlockStatement: reportIfUnreachable,\n            BreakStatement: reportIfUnreachable,\n            ClassDeclaration: reportIfUnreachable,\n            ContinueStatement: reportIfUnreachable,\n            DebuggerStatement: reportIfUnreachable,\n            DoWhileStatement: reportIfUnreachable,\n            EmptyStatement: reportIfUnreachable,\n            ExpressionStatement: reportIfUnreachable,\n            ForInStatement: reportIfUnreachable,\n            ForOfStatement: reportIfUnreachable,\n            ForStatement: reportIfUnreachable,\n            IfStatement: reportIfUnreachable,\n            ImportDeclaration: reportIfUnreachable,\n            LabeledStatement: reportIfUnreachable,\n            ReturnStatement: reportIfUnreachable,\n            SwitchStatement: reportIfUnreachable,\n            ThrowStatement: reportIfUnreachable,\n            TryStatement: reportIfUnreachable,\n\n            VariableDeclaration: function(node) {\n                if (node.kind !== \"var\" || node.declarations.some(isInitialized)) {\n                    reportIfUnreachable(node);\n                }\n            },\n\n            WhileStatement: reportIfUnreachable,\n            WithStatement: reportIfUnreachable,\n            ExportNamedDeclaration: reportIfUnreachable,\n            ExportDefaultDeclaration: reportIfUnreachable,\n            ExportAllDeclaration: reportIfUnreachable\n        };\n    }\n};\n"]}