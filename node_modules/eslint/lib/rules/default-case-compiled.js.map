{"version":3,"sources":["default-case.js"],"names":[],"mappings":";;;;AAIA;;AAEA,IAAI,0BAA0B,cAA9B;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,2DADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CAAC;AACL,kBAAM,QADD;AAEL,wBAAY;AACR,gCAAgB;AACZ,0BAAM;AADM;AADR,aAFP;AAOL,kCAAsB;AAPjB,SAAD;AAPN,KADO;;AAmBb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,UAAU,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,EAApC;AACA,YAAI,iBAAiB,QAAQ,cAAR,GACjB,IAAI,MAAJ,CAAW,QAAQ,cAAnB,CADiB,GAEjB,uBAFJ;;AAIA,YAAI,aAAa,QAAQ,aAAR,EAAjB;;;;;;;;;;;AAWA,iBAAS,IAAT,CAAc,UAAd,EAA0B;AACtB,mBAAO,WAAW,WAAW,MAAX,GAAoB,CAA/B,CAAP;AACH;;;;;;AAMD,eAAO;;AAEH,6BAAiB,UAAS,IAAT,EAAe;;AAE5B,oBAAI,CAAC,KAAK,KAAL,CAAW,MAAhB,EAAwB;;;;;;AAMpB;AACH;;AAED,oBAAI,aAAa,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAS,CAAT,EAAY;AACzC,2BAAO,EAAE,IAAF,KAAW,IAAlB;AACH,iBAFgB,CAAjB;;AAIA,oBAAI,CAAC,UAAL,EAAiB;;AAEb,wBAAI,OAAJ;AACA,wBAAI,QAAJ;;AAEA,wBAAI,WAAW,KAAK,KAAK,KAAV,CAAf;;AAEA,+BAAW,WAAW,WAAX,CAAuB,QAAvB,EAAiC,QAA5C;;AAEA,wBAAI,SAAS,MAAb,EAAqB;AACjB,kCAAU,KAAK,QAAL,CAAV;AACH;;AAED,wBAAI,CAAC,OAAD,IAAY,CAAC,eAAe,IAAf,CAAoB,QAAQ,KAAR,CAAc,IAAd,EAApB,CAAjB,EAA4D;AACxD,gCAAQ,MAAR,CAAe,IAAf,EAAqB,0BAArB;AACH;AACJ;AACJ;AAlCE,SAAP;AAoCH;AAhFY,CAAjB","file":"default-case-compiled.js","sourcesContent":["/**\n * @fileoverview require default case in switch statements\n * @author Aliaksei Shytkin\n */\n\"use strict\";\n\nvar DEFAULT_COMMENT_PATTERN = /^no default$/;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"require `default` cases in <code>switch</code> statements\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                commentPattern: {\n                    type: \"string\"\n                }\n            },\n            additionalProperties: false\n        }]\n    },\n\n    create: function(context) {\n        var options = context.options[0] || {};\n        var commentPattern = options.commentPattern ?\n            new RegExp(options.commentPattern) :\n            DEFAULT_COMMENT_PATTERN;\n\n        var sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Shortcut to get last element of array\n         * @param  {*[]} collection Array\n         * @returns {*} Last element\n         */\n        function last(collection) {\n            return collection[collection.length - 1];\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            SwitchStatement: function(node) {\n\n                if (!node.cases.length) {\n\n                    /*\n                     * skip check of empty switch because there is no easy way\n                     * to extract comments inside it now\n                     */\n                    return;\n                }\n\n                var hasDefault = node.cases.some(function(v) {\n                    return v.test === null;\n                });\n\n                if (!hasDefault) {\n\n                    var comment;\n                    var comments;\n\n                    var lastCase = last(node.cases);\n\n                    comments = sourceCode.getComments(lastCase).trailing;\n\n                    if (comments.length) {\n                        comment = last(comments);\n                    }\n\n                    if (!comment || !commentPattern.test(comment.value.trim())) {\n                        context.report(node, \"Expected a default case.\");\n                    }\n                }\n            }\n        };\n    }\n};\n"]}