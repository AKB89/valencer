{"version":3,"sources":["max-nested-callbacks.js"],"names":[],"mappings":";;;;;AAKA;;;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,sDADX;AAEF,sBAAU,kBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,mBAAO,CACH;AACI,sBAAM,SADV;AAEI,yBAAS;AAFb,aADG,EAKH;AACI,sBAAM,QADV;AAEI,4BAAY;AACR,6BAAS;AACL,8BAAM,SADD;AAEL,iCAAS;AAFJ,qBADD;AAKR,yBAAK;AACD,8BAAM,SADL;AAED,iCAAS;AAFR;AALG,iBAFhB;AAYI,sCAAsB;AAZ1B,aALG;AADX,SADI;AAPN,KADO;;AAkCb,YAAQ,gBAAS,OAAT,EAAkB;;;;;AAKtB,YAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,CAAb;YACI,YAAY,EADhB;;AAGA,YAAI,QAAO,MAAP,yCAAO,MAAP,OAAkB,QAAlB,IAA8B,OAAO,cAAP,CAAsB,SAAtB,CAA9B,IAAkE,OAAO,OAAO,OAAd,KAA0B,QAAhG,EAA0G;AACtG,wBAAY,OAAO,OAAnB;AACH;AACD,YAAI,QAAO,MAAP,yCAAO,MAAP,OAAkB,QAAlB,IAA8B,OAAO,cAAP,CAAsB,KAAtB,CAA9B,IAA8D,OAAO,OAAO,GAAd,KAAsB,QAAxF,EAAkG;AAC9F,wBAAY,OAAO,GAAnB;AACH;AACD,YAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,wBAAY,MAAZ;AACH;;;;;;AAMD,YAAI,gBAAgB,EAApB;;;;;;;;AAQA,iBAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,gBAAI,SAAS,KAAK,MAAlB;;AAEA,gBAAI,OAAO,IAAP,KAAgB,gBAApB,EAAsC;AAClC,8BAAc,IAAd,CAAmB,IAAnB;AACH;;AAED,gBAAI,cAAc,MAAd,GAAuB,SAA3B,EAAsC;AAClC,oBAAI,OAAO,EAAC,KAAK,cAAc,MAApB,EAA4B,KAAK,SAAjC,EAAX;;AAEA,wBAAQ,MAAR,CAAe,IAAf,EAAqB,kEAArB,EAAyF,IAAzF;AACH;AACJ;;;;;;;AAOD,iBAAS,QAAT,GAAoB;AAChB,0BAAc,GAAd;AACH;;;;;;AAMD,eAAO;AACH,qCAAyB,aADtB;AAEH,4CAAgC,QAF7B;;AAIH,gCAAoB,aAJjB;AAKH,uCAA2B;AALxB,SAAP;AAQH;AAnGY,CAAjB","file":"max-nested-callbacks-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce a maximum number of nested callbacks.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"enforce a maximum depth that callbacks can be nested\",\n            category: \"Stylistic Issues\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ]\n    },\n\n    create: function(context) {\n\n        //--------------------------------------------------------------------------\n        // Constants\n        //--------------------------------------------------------------------------\n        var option = context.options[0],\n            THRESHOLD = 10;\n\n        if (typeof option === \"object\" && option.hasOwnProperty(\"maximum\") && typeof option.maximum === \"number\") {\n            THRESHOLD = option.maximum;\n        }\n        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {\n            THRESHOLD = option.max;\n        }\n        if (typeof option === \"number\") {\n            THRESHOLD = option;\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        var callbackStack = [];\n\n        /**\n         * Checks a given function node for too many callbacks.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkFunction(node) {\n            var parent = node.parent;\n\n            if (parent.type === \"CallExpression\") {\n                callbackStack.push(node);\n            }\n\n            if (callbackStack.length > THRESHOLD) {\n                var opts = {num: callbackStack.length, max: THRESHOLD};\n\n                context.report(node, \"Too many nested callbacks ({{num}}). Maximum allowed is {{max}}.\", opts);\n            }\n        }\n\n        /**\n         * Pops the call stack.\n         * @returns {void}\n         * @private\n         */\n        function popStack() {\n            callbackStack.pop();\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            ArrowFunctionExpression: checkFunction,\n            \"ArrowFunctionExpression:exit\": popStack,\n\n            FunctionExpression: checkFunction,\n            \"FunctionExpression:exit\": popStack\n        };\n\n    }\n};\n"]}