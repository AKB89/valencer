{"version":3,"sources":["no-labels.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,IAAI,aAAa,8CAAjB;;;;;;AAMA,OAAO,OAAP,GAAiB;AACb,UAAM;AACF,cAAM;AACF,yBAAa,6BADX;AAEF,sBAAU,gBAFR;AAGF,yBAAa;AAHX,SADJ;;AAOF,gBAAQ,CACJ;AACI,kBAAM,QADV;AAEI,wBAAY;AACR,2BAAW;AACP,0BAAM;AADC,iBADH;AAIR,6BAAa;AACT,0BAAM;AADG;AAJL,aAFhB;AAUI,kCAAsB;AAV1B,SADI;AAPN,KADO;;AAwBb,YAAQ,UAAS,OAAT,EAAkB;AACtB,YAAI,UAAU,QAAQ,OAAR,CAAgB,CAAhB,CAAd;AACA,YAAI,YAAY,QAAQ,WAAW,QAAQ,SAA3B,CAAhB;AACA,YAAI,cAAc,QAAQ,WAAW,QAAQ,WAA3B,CAAlB;AACA,YAAI,YAAY,IAAhB;;;;;;;;AAQA,iBAAS,WAAT,CAAqB,IAArB,EAA2B;AACvB,gBAAI,OAAO,KAAK,IAAhB;;AAEA,gBAAI,WAAW,IAAX,CAAgB,IAAhB,CAAJ,EAA2B;AACvB,uBAAO,MAAP;AACH;AACD,gBAAI,SAAS,iBAAb,EAAgC;AAC5B,uBAAO,QAAP;AACH;AACD,mBAAO,OAAP;AACH;;;;;;;;AAQD,iBAAS,SAAT,CAAmB,IAAnB,EAAyB;AACrB,oBAAQ,IAAR;AACI,qBAAK,MAAL;AAAa,2BAAO,SAAP;AACb,qBAAK,QAAL;AAAe,2BAAO,WAAP;AACf;AAAS,2BAAO,KAAP;AAHb;AAKH;;;;;;;;AAQD,iBAAS,OAAT,CAAiB,KAAjB,EAAwB;AACpB,gBAAI,OAAO,SAAX;;AAEA,mBAAO,IAAP,EAAa;AACT,oBAAI,KAAK,KAAL,KAAe,KAAnB,EAA0B;AACtB,2BAAO,KAAK,IAAZ;AACH;AACD,uBAAO,KAAK,KAAZ;AACH;;;AAGD,mBAAO,OAAP;AACH;;;;;;AAMD,eAAO;AACH,8BAAkB,UAAS,IAAT,EAAe;AAC7B,4BAAY;AACR,2BAAO,KAAK,KAAL,CAAW,IADV;AAER,0BAAM,YAAY,KAAK,IAAjB,CAFE;AAGR,2BAAO;AAHC,iBAAZ;AAKH,aAPE;;AASH,qCAAyB,UAAS,IAAT,EAAe;AACpC,oBAAI,CAAC,UAAU,UAAU,IAApB,CAAL,EAAgC;AAC5B,4BAAQ,MAAR,CAAe;AACX,8BAAM,IADK;AAEX,iCAAS;AAFE,qBAAf;AAIH;;AAED,4BAAY,UAAU,KAAtB;AACH,aAlBE;;AAoBH,4BAAgB,UAAS,IAAT,EAAe;AAC3B,oBAAI,KAAK,KAAL,IAAc,CAAC,UAAU,QAAQ,KAAK,KAAL,CAAW,IAAnB,CAAV,CAAnB,EAAwD;AACpD,4BAAQ,MAAR,CAAe;AACX,8BAAM,IADK;AAEX,iCAAS;AAFE,qBAAf;AAIH;AACJ,aA3BE;;AA6BH,+BAAmB,UAAS,IAAT,EAAe;AAC9B,oBAAI,KAAK,KAAL,IAAc,CAAC,UAAU,QAAQ,KAAK,KAAL,CAAW,IAAnB,CAAV,CAAnB,EAAwD;AACpD,4BAAQ,MAAR,CAAe;AACX,8BAAM,IADK;AAEX,iCAAS;AAFE,qBAAf;AAIH;AACJ;AApCE,SAAP;AAuCH;AA7HY,CAAjB","file":"no-labels-compiled.js","sourcesContent":["/**\n * @fileoverview Disallow Labeled Statements\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nvar LOOP_TYPES = /^(?:While|DoWhile|For|ForIn|ForOf)Statement$/;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"disallow labeled statements\",\n            category: \"Best Practices\",\n            recommended: false\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowLoop: {\n                        type: \"boolean\"\n                    },\n                    allowSwitch: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create: function(context) {\n        var options = context.options[0];\n        var allowLoop = Boolean(options && options.allowLoop);\n        var allowSwitch = Boolean(options && options.allowSwitch);\n        var scopeInfo = null;\n\n        /**\n         * Gets the kind of a given node.\n         *\n         * @param {ASTNode} node - A node to get.\n         * @returns {string} The kind of the node.\n         */\n        function getBodyKind(node) {\n            var type = node.type;\n\n            if (LOOP_TYPES.test(type)) {\n                return \"loop\";\n            }\n            if (type === \"SwitchStatement\") {\n                return \"switch\";\n            }\n            return \"other\";\n        }\n\n        /**\n         * Checks whether the label of a given kind is allowed or not.\n         *\n         * @param {string} kind - A kind to check.\n         * @returns {boolean} `true` if the kind is allowed.\n         */\n        function isAllowed(kind) {\n            switch (kind) {\n                case \"loop\": return allowLoop;\n                case \"switch\": return allowSwitch;\n                default: return false;\n            }\n        }\n\n        /**\n         * Checks whether a given name is a label of a loop or not.\n         *\n         * @param {string} label - A name of a label to check.\n         * @returns {boolean} `true` if the name is a label of a loop.\n         */\n        function getKind(label) {\n            var info = scopeInfo;\n\n            while (info) {\n                if (info.label === label) {\n                    return info.kind;\n                }\n                info = info.upper;\n            }\n\n            /* istanbul ignore next: syntax error */\n            return \"other\";\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            LabeledStatement: function(node) {\n                scopeInfo = {\n                    label: node.label.name,\n                    kind: getBodyKind(node.body),\n                    upper: scopeInfo\n                };\n            },\n\n            \"LabeledStatement:exit\": function(node) {\n                if (!isAllowed(scopeInfo.kind)) {\n                    context.report({\n                        node: node,\n                        message: \"Unexpected labeled statement.\"\n                    });\n                }\n\n                scopeInfo = scopeInfo.upper;\n            },\n\n            BreakStatement: function(node) {\n                if (node.label && !isAllowed(getKind(node.label.name))) {\n                    context.report({\n                        node: node,\n                        message: \"Unexpected label in break statement.\"\n                    });\n                }\n            },\n\n            ContinueStatement: function(node) {\n                if (node.label && !isAllowed(getKind(node.label.name))) {\n                    context.report({\n                        node: node,\n                        message: \"Unexpected label in continue statement.\"\n                    });\n                }\n            }\n        };\n\n    }\n};\n"]}