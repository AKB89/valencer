{"version":3,"sources":["rule-context.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAMA,IAAI,YAAY,QAAQ,mBAAR,CAAhB;;;;;;AAMA,IAAI,eAAe,CACf,cADe,EAEf,sBAFe,EAGf,aAHe,EAIf,UAJe,EAKf,oBALe;;;AAQf,gBARe,EASf,aATe,EAUf,eAVe,EAWf,gBAXe,EAYf,iBAZe,EAaf,cAbe,EAcf,eAde,EAef,qBAfe,EAgBf,WAhBe,EAiBf,gBAjBe,EAkBf,eAlBe,EAmBf,gBAnBe,EAoBf,sBApBe,EAqBf,WArBe,EAsBf,gBAtBe,EAuBf,iBAvBe,EAwBf,kBAxBe,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA,SAAS,WAAT,CAAqB,MAArB,EAA6B,MAA7B,EAAqC,QAArC,EAA+C,OAA/C,EAAwD,QAAxD,EAAkE,aAAlE,EAAiF,UAAjF,EAA6F,IAA7F,EAAmG;;;AAG/F,SAAK,EAAL,GAAU,MAAV;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,IAAL,GAAY,IAAZ;;;AAGA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,QAAL,GAAgB,QAAhB;;AAEA,WAAO,MAAP,CAAc,IAAd;AACH;;AAED,YAAY,SAAZ,GAAwB;AACpB,iBAAa,WADO;;;;;;AAOpB,mBAAe,yBAAW;AACtB,eAAO,KAAK,MAAL,CAAY,aAAZ,EAAP;AACH,KATmB;;;;;;;;;;;;AAqBpB,YAAQ,gBAAS,gBAAT,EAA2B,QAA3B,EAAqC,OAArC,EAA8C,IAA9C,EAAoD;AACxD,YAAI,UAAJ;YACI,MAAM,IADV;;;AAIA,YAAI,UAAU,MAAV,KAAqB,CAAzB,EAA4B;AACxB,yBAAa,gBAAb;;;AAGA,gBAAI,OAAO,WAAW,GAAlB,KAA0B,UAA9B,EAA0C;AACtC,sBAAM,WAAW,GAAX,CAAe,IAAI,SAAJ,EAAf,CAAN;AACH;;AAED,iBAAK,MAAL,CAAY,MAAZ,CACI,KAAK,EADT,EAEI,KAAK,QAFT,EAGI,WAAW,IAHf,EAII,WAAW,GAAX,IAAkB,WAAW,IAAX,CAAgB,GAAhB,CAAoB,KAJ1C,EAKI,WAAW,OALf,EAMI,WAAW,IANf,EAOI,GAPJ,EAQI,KAAK,IART;;AAWA;AACH;;;AAGD,aAAK,MAAL,CAAY,MAAZ,CACI,KAAK,EADT,EAEI,KAAK,QAFT,EAGI,gBAHJ,EAII,QAJJ,EAKI,OALJ,EAMI,IANJ,EAOI,KAAK,IAPT;AASH;AA1DmB,CAAxB;;;AA8DA,aAAa,OAAb,CAAqB,UAAS,IAAT,EAAe;AAChC,SAAK,IAAL,IAAa,UAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB;AACjC,eAAO,KAAK,MAAL,CAAY,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAP;AACH,KAFD;AAGH,CAJD,EAIG,YAAY,SAJf;;AAMA,OAAO,OAAP,GAAiB,WAAjB","file":"rule-context-compiled.js","sourcesContent":["/**\n * @fileoverview RuleContext utility for rules\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar RuleFixer = require(\"./util/rule-fixer\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nvar PASSTHROUGHS = [\n    \"getAncestors\",\n    \"getDeclaredVariables\",\n    \"getFilename\",\n    \"getScope\",\n    \"markVariableAsUsed\",\n\n    // DEPRECATED\n    \"getAllComments\",\n    \"getComments\",\n    \"getFirstToken\",\n    \"getFirstTokens\",\n    \"getJSDocComment\",\n    \"getLastToken\",\n    \"getLastTokens\",\n    \"getNodeByRangeIndex\",\n    \"getSource\",\n    \"getSourceLines\",\n    \"getTokenAfter\",\n    \"getTokenBefore\",\n    \"getTokenByRangeStart\",\n    \"getTokens\",\n    \"getTokensAfter\",\n    \"getTokensBefore\",\n    \"getTokensBetween\"\n];\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/**\n * An error message description\n * @typedef {Object} MessageDescriptor\n * @property {string} nodeType The type of node.\n * @property {Location} loc The location of the problem.\n * @property {string} message The problem message.\n * @property {Object} [data] Optional data to use to fill in placeholders in the\n *      message.\n * @property {Function} fix The function to call that creates a fix command.\n */\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/**\n * Acts as an abstraction layer between rules and the main eslint object.\n * @constructor\n * @param {string} ruleId The ID of the rule using this object.\n * @param {eslint} eslint The eslint object.\n * @param {number} severity The configured severity level of the rule.\n * @param {Array} options The configuration information to be added to the rule.\n * @param {Object} settings The configuration settings passed from the config file.\n * @param {Object} parserOptions The parserOptions settings passed from the config file.\n * @param {Object} parserPath The parser setting passed from the config file.\n * @param {Object} meta The metadata of the rule\n */\nfunction RuleContext(ruleId, eslint, severity, options, settings, parserOptions, parserPath, meta) {\n\n    // public.\n    this.id = ruleId;\n    this.options = options;\n    this.settings = settings;\n    this.parserOptions = parserOptions;\n    this.parserPath = parserPath;\n    this.meta = meta;\n\n    // private.\n    this.eslint = eslint;\n    this.severity = severity;\n\n    Object.freeze(this);\n}\n\nRuleContext.prototype = {\n    constructor: RuleContext,\n\n    /**\n     * Passthrough to eslint.getSourceCode().\n     * @returns {SourceCode} The SourceCode object for the code.\n     */\n    getSourceCode: function() {\n        return this.eslint.getSourceCode();\n    },\n\n    /**\n     * Passthrough to eslint.report() that automatically assigns the rule ID and severity.\n     * @param {ASTNode|MessageDescriptor} nodeOrDescriptor The AST node related to the message or a message\n     *      descriptor.\n     * @param {Object=} location The location of the error.\n     * @param {string} message The message to display to the user.\n     * @param {Object} opts Optional template data which produces a formatted message\n     *     with symbols being replaced by this object's values.\n     * @returns {void}\n     */\n    report: function(nodeOrDescriptor, location, message, opts) {\n        var descriptor,\n            fix = null;\n\n        // check to see if it's a new style call\n        if (arguments.length === 1) {\n            descriptor = nodeOrDescriptor;\n\n            // if there's a fix specified, get it\n            if (typeof descriptor.fix === \"function\") {\n                fix = descriptor.fix(new RuleFixer());\n            }\n\n            this.eslint.report(\n                this.id,\n                this.severity,\n                descriptor.node,\n                descriptor.loc || descriptor.node.loc.start,\n                descriptor.message,\n                descriptor.data,\n                fix,\n                this.meta\n            );\n\n            return;\n        }\n\n        // old style call\n        this.eslint.report(\n            this.id,\n            this.severity,\n            nodeOrDescriptor,\n            location,\n            message,\n            opts,\n            this.meta\n        );\n    }\n};\n\n// Copy over passthrough methods. All functions will have 5 or fewer parameters.\nPASSTHROUGHS.forEach(function(name) {\n    this[name] = function(a, b, c, d, e) {\n        return this.eslint[name](a, b, c, d, e);\n    };\n}, RuleContext.prototype);\n\nmodule.exports = RuleContext;\n"]}