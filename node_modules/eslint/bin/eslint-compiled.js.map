{"version":3,"sources":["eslint.js"],"names":[],"mappings":";;;;;;;AAOA;;;;;;AAMA,IAAI,WAAW,CAAf;IACI,WAAY,QAAQ,IAAR,CAAa,OAAb,CAAqB,SAArB,IAAkC,CAAC,CADnD;IAEI,OAAQ,QAAQ,IAAR,CAAa,OAAb,CAAqB,QAArB,IAAiC,CAAC,CAF9C;IAGI,QAAS,QAAQ,IAAR,CAAa,OAAb,CAAqB,SAArB,IAAkC,CAAC,CAHhD;;;AAMA,IAAI,KAAJ,EAAW;AACP,YAAQ,OAAR,EAAiB,MAAjB,CAAwB,4BAAxB;AACH;;;;;;;AAOD,IAAI,SAAS,QAAQ,eAAR,CAAb;IACI,MAAM,QAAQ,YAAR,CADV;IAEI,OAAO,QAAQ,MAAR,CAFX;IAGI,KAAK,QAAQ,IAAR,CAHT;;;;;;AASA,QAAQ,EAAR,CAAW,mBAAX,EAAgC,UAAS,GAAT,EAAa;;AAEzC,QAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,QAAI,OAAO,IAAI,eAAX,KAA+B,QAA/B,IAA2C,IAAI,eAAJ,CAAoB,MAApB,GAA6B,CAA5E,EAA+E;AAC3E,YAAI,WAAW,OAAO,QAAP,CAAgB,GAAG,YAAH,CAAgB,KAAK,OAAL,CAAa,SAAb,EAAwB,iBAAiB,IAAI,eAArB,GAAuC,MAA/D,CAAhB,EAAwF,OAAxF,CAAhB,CAAf;;AAEA,gBAAQ,GAAR,CAAY,kCAAZ;AACA,gBAAQ,GAAR,CAAY,OAAO,SAAS,IAAI,WAAJ,IAAmB,EAA5B,CAAnB;AACH,KALD,MAKO;AACH,gBAAQ,GAAR,CAAY,IAAI,OAAhB;AACA,gBAAQ,GAAR,CAAY,IAAI,KAAhB;AACH;;AAED,YAAQ,IAAR,CAAa,CAAb;AACH,CAfD;;AAiBA,IAAI,QAAJ,EAAc;AACV,YAAQ,KAAR,CAAc,IAAd,CAAmB,OAAO,EAAE,UAAU,QAAZ,EAAP,EAA+B,UAAS,IAAT,EAAe;AAC7D,YAAI;AACA,uBAAW,IAAI,OAAJ,CAAY,QAAQ,IAApB,EAA0B,IAA1B,CAAX;AACH,SAFD,CAEE,OAAO,EAAP,EAAW;AACT,oBAAQ,KAAR,CAAc,GAAG,OAAjB;AACA,oBAAQ,KAAR,CAAc,GAAG,KAAjB;AACA,uBAAW,CAAX;AACH;AACJ,KARkB,CAAnB;AASH,CAVD,MAUO,IAAI,IAAJ,EAAU;AACb,QAAI,aAAa,QAAQ,kCAAR,CAAjB;AACA,eAAW,gBAAX,CAA4B,UAAS,GAAT,EAAc;AACtC,YAAI,GAAJ,EAAS;AACL,uBAAW,CAAX;AACA,oBAAQ,KAAR,CAAc,IAAI,OAAlB;AACA,oBAAQ,KAAR,CAAc,IAAI,KAAlB;AACH,SAJD,MAIO;AACH,uBAAW,CAAX;AACH;AACJ,KARD;AASH,CAXM,MAWA;AACH,eAAW,IAAI,OAAJ,CAAY,QAAQ,IAApB,CAAX;AACH;;;;AAID,IAAI,cAAc,OAAlB,EAA2B;AACvB,YAAQ,QAAR,GAAmB,QAAnB;AACH,CAFD,MAEO;;;;;AAKH,YAAQ,EAAR,CAAW,MAAX,EAAmB,YAAW;AAC1B,gBAAQ,IAAR,CAAa,QAAb;AACH,KAFD;AAGH","file":"eslint-compiled.js","sourcesContent":["#!/usr/bin/env node\n\n/**\n * @fileoverview Main CLI that is run via the eslint command.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar exitCode = 0,\n    useStdIn = (process.argv.indexOf(\"--stdin\") > -1),\n    init = (process.argv.indexOf(\"--init\") > -1),\n    debug = (process.argv.indexOf(\"--debug\") > -1);\n\n// must do this initialization *before* other requires in order to work\nif (debug) {\n    require(\"debug\").enable(\"eslint:*,-eslint:code-path\");\n}\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// now we can safely include the other modules that use debug\nvar concat = require(\"concat-stream\"),\n    cli = require(\"../lib/cli\"),\n    path = require(\"path\"),\n    fs = require(\"fs\");\n\n//------------------------------------------------------------------------------\n// Execution\n//------------------------------------------------------------------------------\n\nprocess.on(\"uncaughtException\", function(err){\n    // lazy load\n    var lodash = require(\"lodash\");\n\n    if (typeof err.messageTemplate === \"string\" && err.messageTemplate.length > 0) {\n        var template = lodash.template(fs.readFileSync(path.resolve(__dirname, \"../messages/\" + err.messageTemplate + \".txt\"), \"utf-8\"));\n\n        console.log(\"\\nOops! Something went wrong! :(\");\n        console.log(\"\\n\" + template(err.messageData || {}));\n    } else {\n        console.log(err.message);\n        console.log(err.stack);\n    }\n\n    process.exit(1);\n});\n\nif (useStdIn) {\n    process.stdin.pipe(concat({ encoding: \"string\" }, function(text) {\n        try {\n            exitCode = cli.execute(process.argv, text);\n        } catch (ex) {\n            console.error(ex.message);\n            console.error(ex.stack);\n            exitCode = 1;\n        }\n    }));\n} else if (init) {\n    var configInit = require(\"../lib/config/config-initializer\");\n    configInit.initializeConfig(function(err) {\n        if (err) {\n            exitCode = 1;\n            console.error(err.message);\n            console.error(err.stack);\n        } else {\n            exitCode = 0;\n        }\n    });\n} else {\n    exitCode = cli.execute(process.argv);\n}\n\n// https://github.com/eslint/eslint/issues/4691\n// In Node.js >= 0.12, you can use a cleaner way\nif (\"exitCode\" in process) {\n    process.exitCode = exitCode;\n} else {\n    /*\n     * Wait for the stdout buffer to drain.\n     * See https://github.com/eslint/eslint/issues/317\n     */\n    process.on(\"exit\", function() {\n        process.exit(exitCode);\n    });\n}\n"]}