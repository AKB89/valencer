{"version":3,"sources":["espree.js"],"names":[],"mappings":"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","file":"espree-compiled.js","sourcesContent":["/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint no-undefined:0, no-use-before-define: 0 */\n\n\"use strict\";\n\nvar astNodeTypes = require(\"./lib/ast-node-types\"),\n    commentAttachment = require(\"./lib/comment-attachment\"),\n    TokenTranslator = require(\"./lib/token-translator\"),\n    acornJSX = require(\"acorn-jsx/inject\"),\n    rawAcorn = require(\"acorn\");\n\n\nvar acorn = acornJSX(rawAcorn);\n\nvar lookahead,\n    extra,\n    lastToken;\n\n/**\n * Resets the extra object to its default.\n * @returns {void}\n * @private\n */\nfunction resetExtra() {\n    extra = {\n        tokens: null,\n        range: false,\n        loc: false,\n        comment: false,\n        comments: [],\n        tolerant: false,\n        errors: [],\n        strict: false,\n        ecmaFeatures: {},\n        ecmaVersion: 5,\n        isModule: false\n    };\n}\n\n\n\nvar tt = acorn.tokTypes,\n    getLineInfo = acorn.getLineInfo;\n\n// custom type for JSX attribute values\ntt.jsxAttrValueToken = {};\n\n/**\n * Determines if a node is valid given the set of ecmaFeatures.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} True if the node is allowed, false if not.\n * @private\n */\nfunction isValidNode(node) {\n    var ecma = extra.ecmaFeatures;\n\n    switch (node.type) {\n        case \"ExperimentalSpreadProperty\":\n        case \"ExperimentalRestProperty\":\n            return ecma.experimentalObjectRestSpread;\n\n        case \"ImportDeclaration\":\n        case \"ExportNamedDeclaration\":\n        case \"ExportDefaultDeclaration\":\n        case \"ExportAllDeclaration\":\n            return extra.isModule;\n\n        default:\n            return true;\n    }\n}\n\n/**\n * Performs last-minute Esprima-specific compatibility checks and fixes.\n * @param {ASTNode} result The node to check.\n * @returns {ASTNode} The finished node.\n * @private\n * @this acorn.Parser\n */\nfunction esprimaFinishNode(result) {\n    // ensure that parsed node was allowed through ecmaFeatures\n    if (!isValidNode(result)) {\n        this.unexpected(result.start);\n    }\n\n    // https://github.com/marijnh/acorn/issues/323\n    if (result.type === \"TryStatement\") {\n        delete result.guardedHandlers;\n    } else if (result.type === \"CatchClause\") {\n        delete result.guard;\n    }\n\n    // Acorn doesn't count the opening and closing backticks as part of templates\n    // so we have to adjust ranges/locations appropriately.\n    if (result.type === \"TemplateElement\") {\n\n        // additional adjustment needed if ${ is the last token\n        var terminalDollarBraceL = this.input.slice(result.end, result.end + 2) === \"${\";\n\n        if (result.range) {\n            result.range[0]--;\n            result.range[1] += (terminalDollarBraceL ? 2 : 1);\n        }\n\n        if (result.loc) {\n            result.loc.start.column--;\n            result.loc.end.column += (terminalDollarBraceL ? 2 : 1);\n        }\n    }\n\n    // Acorn currently uses expressions instead of declarations in default exports\n    if (result.type === \"ExportDefaultDeclaration\") {\n        if (/^(Class|Function)Expression$/.test(result.declaration.type)) {\n            result.declaration.type = result.declaration.type.replace(\"Expression\", \"Declaration\");\n        }\n    }\n\n    // Acorn uses undefined instead of null, which affects serialization\n    if (result.type === \"Literal\" && result.value === undefined) {\n        result.value = null;\n    }\n\n    if (extra.attachComment) {\n        commentAttachment.processComment(result);\n    }\n\n    if (result.type.indexOf(\"Function\") > -1 && !result.generator) {\n        result.generator = false;\n    }\n\n    return result;\n}\n\n/**\n * Determines if a token is valid given the set of ecmaFeatures.\n * @param {acorn.Parser} parser The parser to check.\n * @returns {boolean} True if the token is allowed, false if not.\n * @private\n */\nfunction isValidToken(parser) {\n    var ecma = extra.ecmaFeatures;\n    var type = parser.type;\n\n    switch (type) {\n        case tt.jsxName:\n        case tt.jsxText:\n        case tt.jsxTagStart:\n        case tt.jsxTagEnd:\n            return ecma.jsx;\n\n        // https://github.com/ternjs/acorn/issues/363\n        case tt.regexp:\n            if (extra.ecmaVersion < 6 && parser.value.flags && parser.value.flags.indexOf(\"y\") > -1) {\n                return false;\n            }\n\n            return true;\n\n        default:\n            return true;\n    }\n}\n\n/**\n * Injects esprimaFinishNode into the finishNode process.\n * @param {Function} finishNode Original finishNode function.\n * @returns {ASTNode} The finished node.\n * @private\n */\nfunction wrapFinishNode(finishNode) {\n    return /** @this acorn.Parser */ function(node, type, pos, loc) {\n        var result = finishNode.call(this, node, type, pos, loc);\n        return esprimaFinishNode.call(this, result);\n    };\n}\n\nacorn.plugins.espree = function(instance) {\n\n    instance.extend(\"finishNode\", wrapFinishNode);\n\n    instance.extend(\"finishNodeAt\", wrapFinishNode);\n\n    instance.extend(\"next\", function(next) {\n        return /** @this acorn.Parser */ function() {\n            if (!isValidToken(this)) {\n                this.unexpected();\n            }\n            return next.call(this);\n        };\n    });\n\n    // needed for experimental object rest/spread\n    instance.extend(\"checkLVal\", function(checkLVal) {\n\n        return /** @this acorn.Parser */ function(expr, isBinding, checkClashes) {\n\n            if (extra.ecmaFeatures.experimentalObjectRestSpread && expr.type === \"ObjectPattern\") {\n                for (var i = 0; i < expr.properties.length; i++) {\n                    if (expr.properties[i].type.indexOf(\"Experimental\") === -1) {\n                        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n                    }\n                }\n                return undefined;\n            }\n\n            return checkLVal.call(this, expr, isBinding, checkClashes);\n        };\n    });\n\n    instance.extend(\"parseTopLevel\", function(parseTopLevel) {\n        return /** @this acorn.Parser */ function(node) {\n            if (extra.ecmaFeatures.impliedStrict && this.options.ecmaVersion >= 5) {\n                this.strict = true;\n            }\n            return parseTopLevel.call(this, node);\n        };\n    });\n\n    instance.extend(\"toAssignable\", function(toAssignable) {\n\n        return /** @this acorn.Parser */ function(node, isBinding) {\n\n            if (extra.ecmaFeatures.experimentalObjectRestSpread &&\n                    node.type === \"ObjectExpression\"\n            ) {\n                node.type = \"ObjectPattern\";\n\n                for (var i = 0; i < node.properties.length; i++) {\n                    var prop = node.properties[i];\n\n                    if (prop.type === \"ExperimentalSpreadProperty\") {\n                        prop.type = \"ExperimentalRestProperty\";\n                    } else if (prop.kind !== \"init\") {\n                        this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n                    } else {\n                        this.toAssignable(prop.value, isBinding);\n                    }\n                }\n\n                return node;\n            } else {\n                return toAssignable.call(this, node, isBinding);\n            }\n        };\n\n    });\n\n    /**\n     * Method to parse an object rest or object spread.\n     * @returns {ASTNode} The node representing object rest or object spread.\n     * @this acorn.Parser\n     */\n    instance.parseObjectRest = function() {\n        var node = this.startNode();\n        this.next();\n        node.argument = this.parseIdent();\n        return this.finishNode(node, \"ExperimentalRestProperty\");\n    };\n\n    /**\n     * Method to parse an object with object rest or object spread.\n     * @param {boolean} isPattern True if the object is a destructuring pattern.\n     * @param {Object} refShorthandDefaultPos ?\n     * @returns {ASTNode} The node representing object rest or object spread.\n     * @this acorn.Parser\n     */\n    instance.parseObj = function(isPattern, refShorthandDefaultPos) {\n        var node = this.startNode(),\n            first = true,\n            propHash = {};\n        node.properties = [];\n        this.next();\n        while (!this.eat(tt.braceR)) {\n\n            if (!first) {\n                this.expect(tt.comma);\n\n                if (this.afterTrailingComma(tt.braceR)) {\n                    break;\n                }\n\n            } else {\n                first = false;\n            }\n\n            var prop = this.startNode(),\n                isGenerator,\n                startPos,\n                startLoc;\n\n            if (extra.ecmaFeatures.experimentalObjectRestSpread && this.type === tt.ellipsis) {\n                if (isPattern) {\n                    prop = this.parseObjectRest();\n                } else {\n                    prop = this.parseSpread();\n                    prop.type = \"ExperimentalSpreadProperty\";\n                }\n\n                node.properties.push(prop);\n                continue;\n            }\n\n            if (this.options.ecmaVersion >= 6) {\n                prop.method = false;\n                prop.shorthand = false;\n\n                if (isPattern || refShorthandDefaultPos) {\n                    startPos = this.start;\n                    startLoc = this.startLoc;\n                }\n\n                if (!isPattern) {\n                    isGenerator = this.eat(tt.star);\n                }\n            }\n\n            this.parsePropertyName(prop);\n            this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refShorthandDefaultPos);\n            this.checkPropClash(prop, propHash);\n            node.properties.push(this.finishNode(prop, \"Property\"));\n        }\n\n        return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n    };\n\n    /**\n     * Overwrites the default raise method to throw Esprima-style errors.\n     * @param {int} pos The position of the error.\n     * @param {string} message The error message.\n     * @throws {SyntaxError} A syntax error.\n     * @returns {void}\n     */\n    instance.raise = instance.raiseRecoverable = function(pos, message) {\n        var loc = getLineInfo(this.input, pos);\n        var err = new SyntaxError(message);\n        err.index = pos;\n        err.lineNumber = loc.line;\n        err.column = loc.column + 1; // acorn uses 0-based columns\n        throw err;\n    };\n\n    /**\n     * Overwrites the default unexpected method to throw Esprima-style errors.\n     * @param {int} pos The position of the error.\n     * @throws {SyntaxError} A syntax error.\n     * @returns {void}\n     */\n    instance.unexpected = function(pos) {\n        var message = \"Unexpected token\";\n\n        if (pos !== null && pos !== undefined) {\n            this.pos = pos;\n\n            if (this.options.locations) {\n                while (this.pos < this.lineStart) {\n                    this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n                    --this.curLine;\n                }\n            }\n\n            this.nextToken();\n        }\n\n        if (this.end > this.start) {\n            message += \" \" + this.input.slice(this.start, this.end);\n        }\n\n        this.raise(this.start, message);\n    };\n\n    /*\n    * Esprima-FB represents JSX strings as tokens called \"JSXText\", but Acorn-JSX\n    * uses regular tt.string without any distinction between this and regular JS\n    * strings. As such, we intercept an attempt to read a JSX string and set a flag\n    * on extra so that when tokens are converted, the next token will be switched\n    * to JSXText via onToken.\n    */\n    instance.extend(\"jsx_readString\", function(jsxReadString) {\n        return /** @this acorn.Parser */ function(quote) {\n            var result = jsxReadString.call(this, quote);\n            if (this.type === tt.string) {\n                extra.jsxAttrValueToken = true;\n            }\n\n            return result;\n        };\n    });\n};\n\n//------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\nfunction tokenize(code, options) {\n    var toString,\n        tokens,\n        impliedStrict,\n        translator = new TokenTranslator(tt, code);\n\n    toString = String;\n    if (typeof code !== \"string\" && !(code instanceof String)) {\n        code = toString(code);\n    }\n\n    lookahead = null;\n\n    // Options matching.\n    options = options || {};\n\n    var acornOptions = {\n        ecmaVersion: 5,\n        plugins: {\n            espree: true\n        }\n    };\n\n    resetExtra();\n\n    // Of course we collect tokens here.\n    options.tokens = true;\n    extra.tokens = [];\n\n    extra.range = (typeof options.range === \"boolean\") && options.range;\n    acornOptions.ranges = extra.range;\n\n    extra.loc = (typeof options.loc === \"boolean\") && options.loc;\n    acornOptions.locations = extra.loc;\n\n    extra.comment = typeof options.comment === \"boolean\" && options.comment;\n\n    if (extra.comment) {\n        acornOptions.onComment = function() {\n            var comment = convertAcornCommentToEsprimaComment.apply(this, arguments);\n            extra.comments.push(comment);\n        };\n    }\n\n    extra.tolerant = typeof options.tolerant === \"boolean\" && options.tolerant;\n\n    if (typeof options.ecmaVersion === \"number\") {\n        switch (options.ecmaVersion) {\n            case 3:\n            case 5:\n            case 6:\n            case 7:\n                acornOptions.ecmaVersion = options.ecmaVersion;\n                extra.ecmaVersion = options.ecmaVersion;\n                break;\n\n            default:\n                throw new Error(\"ecmaVersion must be 3, 5, 6, or 7.\");\n        }\n    }\n\n    // apply parsing flags\n    if (options.ecmaFeatures && typeof options.ecmaFeatures === \"object\") {\n        extra.ecmaFeatures = options.ecmaFeatures;\n        impliedStrict = extra.ecmaFeatures.impliedStrict;\n        extra.ecmaFeatures.impliedStrict = typeof impliedStrict === \"boolean\" && impliedStrict;\n    }\n\n    try {\n        var tokenizer = acorn.tokenizer(code, acornOptions);\n        while ((lookahead = tokenizer.getToken()).type !== tt.eof) {\n            translator.onToken(lookahead, extra);\n        }\n\n        // filterTokenLocation();\n        tokens = extra.tokens;\n\n        if (extra.comment) {\n            tokens.comments = extra.comments;\n        }\n        if (extra.tolerant) {\n            tokens.errors = extra.errors;\n        }\n    } catch (e) {\n        throw e;\n    }\n    return tokens;\n}\n\n//------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n\n\n\n/**\n * Converts an Acorn comment to a Esprima comment.\n * @param {boolean} block True if it's a block comment, false if not.\n * @param {string} text The text of the comment.\n * @param {int} start The index at which the comment starts.\n * @param {int} end The index at which the comment ends.\n * @param {Location} startLoc The location at which the comment starts.\n * @param {Location} endLoc The location at which the comment ends.\n * @returns {Object} The comment object.\n * @private\n */\nfunction convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text\n    };\n\n    if (typeof start === \"number\") {\n        comment.start = start;\n        comment.end = end;\n        comment.range = [start, end];\n    }\n\n    if (typeof startLoc === \"object\") {\n        comment.loc = {\n            start: startLoc,\n            end: endLoc\n        };\n    }\n\n    return comment;\n}\n\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\nfunction parse(code, options) {\n    var program,\n        toString = String,\n        translator,\n        impliedStrict,\n        acornOptions = {\n            ecmaVersion: 5,\n            plugins: {\n                espree: true\n            }\n        };\n\n    lastToken = null;\n\n    if (typeof code !== \"string\" && !(code instanceof String)) {\n        code = toString(code);\n    }\n\n    resetExtra();\n    commentAttachment.reset();\n\n    if (typeof options !== \"undefined\") {\n        extra.range = (typeof options.range === \"boolean\") && options.range;\n        extra.loc = (typeof options.loc === \"boolean\") && options.loc;\n        extra.attachComment = (typeof options.attachComment === \"boolean\") && options.attachComment;\n\n        if (extra.loc && options.source !== null && options.source !== undefined) {\n            extra.source = toString(options.source);\n        }\n\n        if (typeof options.tokens === \"boolean\" && options.tokens) {\n            extra.tokens = [];\n            translator = new TokenTranslator(tt, code);\n        }\n        if (typeof options.comment === \"boolean\" && options.comment) {\n            extra.comment = true;\n            extra.comments = [];\n        }\n        if (typeof options.tolerant === \"boolean\" && options.tolerant) {\n            extra.errors = [];\n        }\n        if (extra.attachComment) {\n            extra.range = true;\n            extra.comments = [];\n            commentAttachment.reset();\n        }\n\n        if (typeof options.ecmaVersion === \"number\") {\n            switch (options.ecmaVersion) {\n                case 3:\n                case 5:\n                case 6:\n                case 7:\n                    acornOptions.ecmaVersion = options.ecmaVersion;\n                    extra.ecmaVersion = options.ecmaVersion;\n                    break;\n\n                default:\n                    throw new Error(\"ecmaVersion must be 3, 5, 6, or 7.\");\n            }\n        }\n\n        if (options.sourceType === \"module\") {\n            extra.isModule = true;\n\n            // modules must be in 6 at least\n            if (acornOptions.ecmaVersion < 6) {\n                acornOptions.ecmaVersion = 6;\n                extra.ecmaVersion = 6;\n            }\n\n            acornOptions.sourceType = \"module\";\n        }\n\n        // apply parsing flags after sourceType to allow overriding\n        if (options.ecmaFeatures && typeof options.ecmaFeatures === \"object\") {\n            extra.ecmaFeatures = options.ecmaFeatures;\n            impliedStrict = extra.ecmaFeatures.impliedStrict;\n            extra.ecmaFeatures.impliedStrict = typeof impliedStrict === \"boolean\" && impliedStrict;\n            if (options.ecmaFeatures.globalReturn) {\n                acornOptions.allowReturnOutsideFunction = true;\n            }\n        }\n\n\n        acornOptions.onToken = function(token) {\n            if (extra.tokens) {\n                translator.onToken(token, extra);\n            }\n            if (token.type !== tt.eof) {\n                lastToken = token;\n            }\n        };\n\n        if (extra.attachComment || extra.comment) {\n            acornOptions.onComment = function() {\n                var comment = convertAcornCommentToEsprimaComment.apply(this, arguments);\n                extra.comments.push(comment);\n\n                if (extra.attachComment) {\n                    commentAttachment.addComment(comment);\n                }\n            };\n        }\n\n        if (extra.range) {\n            acornOptions.ranges = true;\n        }\n\n        if (extra.loc) {\n            acornOptions.locations = true;\n        }\n\n        if (extra.ecmaFeatures.jsx) {\n            // Should process jsx plugin before espree plugin.\n            acornOptions.plugins = {\n                jsx: true,\n                espree: true\n            };\n        }\n    }\n\n    program = acorn.parse(code, acornOptions);\n    program.sourceType = extra.isModule ? \"module\" : \"script\";\n\n    if (extra.comment || extra.attachComment) {\n        program.comments = extra.comments;\n    }\n\n    if (extra.tokens) {\n        program.tokens = extra.tokens;\n    }\n\n    /*\n     * Adjust opening and closing position of program to match Esprima.\n     * Acorn always starts programs at range 0 whereas Esprima starts at the\n     * first AST node's start (the only real difference is when there's leading\n     * whitespace or leading comments). Acorn also counts trailing whitespace\n     * as part of the program whereas Esprima only counts up to the last token.\n     */\n    if (program.range) {\n        program.range[0] = program.body.length ? program.body[0].range[0] : program.range[0];\n        program.range[1] = lastToken ? lastToken.range[1] : program.range[1];\n    }\n\n    if (program.loc) {\n        program.loc.start = program.body.length ? program.body[0].loc.start : program.loc.start;\n        program.loc.end = lastToken ? lastToken.loc.end : program.loc.end;\n    }\n\n    return program;\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nexports.version = require(\"./package.json\").version;\n\nexports.tokenize = tokenize;\n\nexports.parse = parse;\n\n// Deep copy.\n/* istanbul ignore next */\nexports.Syntax = (function() {\n    var name, types = {};\n\n    if (typeof Object.create === \"function\") {\n        types = Object.create(null);\n    }\n\n    for (name in astNodeTypes) {\n        if (astNodeTypes.hasOwnProperty(name)) {\n            types[name] = astNodeTypes[name];\n        }\n    }\n\n    if (typeof Object.freeze === \"function\") {\n        Object.freeze(types);\n    }\n\n    return types;\n}());\n\n/* istanbul ignore next */\nexports.VisitorKeys = (function() {\n    var visitorKeys = require(\"./lib/visitor-keys\");\n    var name,\n        keys = {};\n\n    if (typeof Object.create === \"function\") {\n        keys = Object.create(null);\n    }\n\n    for (name in visitorKeys) {\n        if (visitorKeys.hasOwnProperty(name)) {\n            keys[name] = visitorKeys[name];\n        }\n    }\n\n    if (typeof Object.freeze === \"function\") {\n        Object.freeze(keys);\n    }\n\n    return keys;\n}());\n"]}