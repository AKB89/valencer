{"version":3,"sources":["comment-attachment.js"],"names":[],"mappings":"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","file":"comment-attachment-compiled.js","sourcesContent":["/**\n * @fileoverview Attaches comments to the AST.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astNodeTypes = require(\"./ast-node-types\");\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\nvar extra = {\n    trailingComments: [],\n    leadingComments: [],\n    bottomRightStack: [],\n    previousNode: null\n};\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n\n    reset: function() {\n        extra.trailingComments = [];\n        extra.leadingComments = [];\n        extra.bottomRightStack = [];\n        extra.previousNode = null;\n    },\n\n    addComment: function(comment) {\n        extra.trailingComments.push(comment);\n        extra.leadingComments.push(comment);\n    },\n\n    processComment: function(node) {\n        var lastChild,\n            trailingComments,\n            i,\n            j;\n\n        if (node.type === astNodeTypes.Program) {\n            if (node.body.length > 0) {\n                return;\n            }\n        }\n\n        if (extra.trailingComments.length > 0) {\n\n            /*\n             * If the first comment in trailingComments comes after the\n             * current node, then we're good - all comments in the array will\n             * come after the node and so it's safe to add then as official\n             * trailingComments.\n             */\n            if (extra.trailingComments[0].range[0] >= node.range[1]) {\n                trailingComments = extra.trailingComments;\n                extra.trailingComments = [];\n            } else {\n\n                /*\n                 * Otherwise, if the first comment doesn't come after the\n                 * current node, that means we have a mix of leading and trailing\n                 * comments in the array and that leadingComments contains the\n                 * same items as trailingComments. Reset trailingComments to\n                 * zero items and we'll handle this by evaluating leadingComments\n                 * later.\n                 */\n                extra.trailingComments.length = 0;\n            }\n        } else {\n            if (extra.bottomRightStack.length > 0 &&\n                    extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments &&\n                    extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments[0].range[0] >= node.range[1]) {\n                trailingComments = extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;\n                delete extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;\n            }\n        }\n\n        // Eating the stack.\n        while (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].range[0] >= node.range[0]) {\n            lastChild = extra.bottomRightStack.pop();\n        }\n\n        if (lastChild) {\n            if (lastChild.leadingComments) {\n                if (lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {\n                    node.leadingComments = lastChild.leadingComments;\n                    delete lastChild.leadingComments;\n                } else {\n                    // A leading comment for an anonymous class had been stolen by its first MethodDefinition,\n                    // so this takes back the leading comment.\n                    // See Also: https://github.com/eslint/espree/issues/158\n                    for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n                        if (lastChild.leadingComments[i].range[1] <= node.range[0]) {\n                            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        } else if (extra.leadingComments.length > 0) {\n            if (extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {\n                if (extra.previousNode) {\n                    for (j = 0; j < extra.leadingComments.length; j++) {\n                        if (extra.leadingComments[j].end < extra.previousNode.end) {\n                            extra.leadingComments.splice(j, 1);\n                            j--;\n                        }\n                    }\n                }\n                if (extra.leadingComments.length > 0) {\n                    node.leadingComments = extra.leadingComments;\n                    extra.leadingComments = [];\n                }\n            } else {\n\n                // https://github.com/eslint/espree/issues/2\n\n                /*\n                 * In special cases, such as return (without a value) and\n                 * debugger, all comments will end up as leadingComments and\n                 * will otherwise be eliminated. This extra step runs when the\n                 * bottomRightStack is empty and there are comments left\n                 * in leadingComments.\n                 *\n                 * This loop figures out the stopping point between the actual\n                 * leading and trailing comments by finding the location of the\n                 * first comment that comes after the given node.\n                 */\n                for (i = 0; i < extra.leadingComments.length; i++) {\n                    if (extra.leadingComments[i].range[1] > node.range[0]) {\n                        break;\n                    }\n                }\n\n                /*\n                 * Split the array based on the location of the first comment\n                 * that comes after the node. Keep in mind that this could\n                 * result in an empty array, and if so, the array must be\n                 * deleted.\n                 */\n                node.leadingComments = extra.leadingComments.slice(0, i);\n                if (node.leadingComments.length === 0) {\n                    delete node.leadingComments;\n                }\n\n                /*\n                 * Similarly, trailing comments are attached later. The variable\n                 * must be reset to null if there are no trailing comments.\n                 */\n                trailingComments = extra.leadingComments.slice(i);\n                if (trailingComments.length === 0) {\n                    trailingComments = null;\n                }\n            }\n        }\n\n        extra.previousNode = node;\n\n        if (trailingComments) {\n            node.trailingComments = trailingComments;\n        }\n\n        extra.bottomRightStack.push(node);\n    }\n\n};\n"]}