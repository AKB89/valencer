{"version":3,"sources":["coerce.js"],"names":[],"mappings":"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","file":"coerce-compiled.js","sourcesContent":["// Generated by LiveScript 1.2.0\n(function(){\n  var parsedTypeCheck, types, toString$ = {}.toString;\n  parsedTypeCheck = require('type-check').parsedTypeCheck;\n  types = {\n    '*': function(it){\n      switch (toString$.call(it).slice(8, -1)) {\n      case 'Array':\n        return coerceType(it, {\n          type: 'Array'\n        });\n      case 'Object':\n        return coerceType(it, {\n          type: 'Object'\n        });\n      default:\n        return {\n          type: 'Just',\n          value: coerceTypes(it, [\n            {\n              type: 'Undefined'\n            }, {\n              type: 'Null'\n            }, {\n              type: 'NaN'\n            }, {\n              type: 'Boolean'\n            }, {\n              type: 'Number'\n            }, {\n              type: 'Date'\n            }, {\n              type: 'RegExp'\n            }, {\n              type: 'Array'\n            }, {\n              type: 'Object'\n            }, {\n              type: 'String'\n            }\n          ], {\n            explicit: true\n          })\n        };\n      }\n    },\n    Undefined: function(it){\n      if (it === 'undefined' || it === void 8) {\n        return {\n          type: 'Just',\n          value: void 8\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Null: function(it){\n      if (it === 'null') {\n        return {\n          type: 'Just',\n          value: null\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    NaN: function(it){\n      if (it === 'NaN') {\n        return {\n          type: 'Just',\n          value: NaN\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Boolean: function(it){\n      if (it === 'true') {\n        return {\n          type: 'Just',\n          value: true\n        };\n      } else if (it === 'false') {\n        return {\n          type: 'Just',\n          value: false\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Number: function(it){\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Int: function(it){\n      return {\n        type: 'Just',\n        value: parseInt(it)\n      };\n    },\n    Float: function(it){\n      return {\n        type: 'Just',\n        value: parseFloat(it)\n      };\n    },\n    Date: function(value, options){\n      var that;\n      if (that = /^\\#(.*)\\#$/.exec(value)) {\n        return {\n          type: 'Just',\n          value: new Date(+that[1] || that[1])\n        };\n      } else if (options.explicit) {\n        return {\n          type: 'Nothing'\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: new Date(+value || value)\n        };\n      }\n    },\n    RegExp: function(value, options){\n      var that;\n      if (that = /^\\/(.*)\\/([gimy]*)$/.exec(value)) {\n        return {\n          type: 'Just',\n          value: new RegExp(that[1], that[2])\n        };\n      } else if (options.explicit) {\n        return {\n          type: 'Nothing'\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: new RegExp(value)\n        };\n      }\n    },\n    Array: function(it){\n      return coerceArray(it, {\n        of: [{\n          type: '*'\n        }]\n      });\n    },\n    Object: function(it){\n      return coerceFields(it, {\n        of: {}\n      });\n    },\n    String: function(it){\n      var that;\n      if (toString$.call(it).slice(8, -1) !== 'String') {\n        return {\n          type: 'Nothing'\n        };\n      }\n      if (that = it.match(/^'(.*)'$/)) {\n        return {\n          type: 'Just',\n          value: that[1]\n        };\n      } else if (that = it.match(/^\"(.*)\"$/)) {\n        return {\n          type: 'Just',\n          value: that[1]\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: it\n        };\n      }\n    }\n  };\n  function coerceArray(node, type){\n    var typeOf, element;\n    if (toString$.call(node).slice(8, -1) !== 'Array') {\n      return {\n        type: 'Nothing'\n      };\n    }\n    typeOf = type.of;\n    return {\n      type: 'Just',\n      value: (function(){\n        var i$, ref$, len$, results$ = [];\n        for (i$ = 0, len$ = (ref$ = node).length; i$ < len$; ++i$) {\n          element = ref$[i$];\n          results$.push(coerceTypes(element, typeOf));\n        }\n        return results$;\n      }())\n    };\n  }\n  function coerceTuple(node, type){\n    var result, i$, ref$, len$, i, types, that;\n    if (toString$.call(node).slice(8, -1) !== 'Array') {\n      return {\n        type: 'Nothing'\n      };\n    }\n    result = [];\n    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {\n      i = i$;\n      types = ref$[i$];\n      if (that = coerceTypes(node[i], types)) {\n        result.push(that);\n      }\n    }\n    return {\n      type: 'Just',\n      value: result\n    };\n  }\n  function coerceFields(node, type){\n    var typeOf, key, value;\n    if (toString$.call(node).slice(8, -1) !== 'Object') {\n      return {\n        type: 'Nothing'\n      };\n    }\n    typeOf = type.of;\n    return {\n      type: 'Just',\n      value: (function(){\n        var ref$, results$ = {};\n        for (key in ref$ = node) {\n          value = ref$[key];\n          results$[key] = coerceTypes(value, typeOf[key] || [{\n            type: '*'\n          }]);\n        }\n        return results$;\n      }())\n    };\n  }\n  function coerceType(node, typeObj, options){\n    var type, structure, coerceFunc;\n    type = typeObj.type, structure = typeObj.structure;\n    if (type) {\n      coerceFunc = types[type];\n      return coerceFunc(node, options);\n    } else {\n      switch (structure) {\n      case 'array':\n        return coerceArray(node, typeObj);\n      case 'tuple':\n        return coerceTuple(node, typeObj);\n      case 'fields':\n        return coerceFields(node, typeObj);\n      }\n    }\n  }\n  function coerceTypes(node, types, options){\n    var i$, len$, type, ref$, valueType, value;\n    for (i$ = 0, len$ = types.length; i$ < len$; ++i$) {\n      type = types[i$];\n      ref$ = coerceType(node, type, options), valueType = ref$.type, value = ref$.value;\n      if (valueType === 'Nothing') {\n        continue;\n      }\n      if (parsedTypeCheck([type], value)) {\n        return value;\n      }\n    }\n    throw new Error(\"Value \" + JSON.stringify(node) + \" does not type check against \" + JSON.stringify(types) + \".\");\n  }\n  module.exports = coerceTypes;\n}).call(this);\n"]}