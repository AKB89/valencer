{"version":3,"sources":["cast.js"],"names":[],"mappings":"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","file":"cast-compiled.js","sourcesContent":["// Generated by LiveScript 1.4.0\n(function(){\n  var parsedTypeCheck, types, toString$ = {}.toString;\n  parsedTypeCheck = require('type-check').parsedTypeCheck;\n  types = {\n    '*': function(value, options){\n      switch (toString$.call(value).slice(8, -1)) {\n      case 'Array':\n        return typeCast(value, {\n          type: 'Array'\n        }, options);\n      case 'Object':\n        return typeCast(value, {\n          type: 'Object'\n        }, options);\n      default:\n        return {\n          type: 'Just',\n          value: typesCast(value, [\n            {\n              type: 'Undefined'\n            }, {\n              type: 'Null'\n            }, {\n              type: 'NaN'\n            }, {\n              type: 'Boolean'\n            }, {\n              type: 'Number'\n            }, {\n              type: 'Date'\n            }, {\n              type: 'RegExp'\n            }, {\n              type: 'Array'\n            }, {\n              type: 'Object'\n            }, {\n              type: 'String'\n            }\n          ], (options.explicit = true, options))\n        };\n      }\n    },\n    Undefined: function(it){\n      if (it === 'undefined' || it === void 8) {\n        return {\n          type: 'Just',\n          value: void 8\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Null: function(it){\n      if (it === 'null') {\n        return {\n          type: 'Just',\n          value: null\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    NaN: function(it){\n      if (it === 'NaN') {\n        return {\n          type: 'Just',\n          value: NaN\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Boolean: function(it){\n      if (it === 'true') {\n        return {\n          type: 'Just',\n          value: true\n        };\n      } else if (it === 'false') {\n        return {\n          type: 'Just',\n          value: false\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Number: function(it){\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Int: function(it){\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Float: function(it){\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Date: function(value, options){\n      var that;\n      if (that = /^\\#([\\s\\S]*)\\#$/.exec(value)) {\n        return {\n          type: 'Just',\n          value: new Date(+that[1] || that[1])\n        };\n      } else if (options.explicit) {\n        return {\n          type: 'Nothing'\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: new Date(+value || value)\n        };\n      }\n    },\n    RegExp: function(value, options){\n      var that;\n      if (that = /^\\/([\\s\\S]*)\\/([gimy]*)$/.exec(value)) {\n        return {\n          type: 'Just',\n          value: new RegExp(that[1], that[2])\n        };\n      } else if (options.explicit) {\n        return {\n          type: 'Nothing'\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: new RegExp(value)\n        };\n      }\n    },\n    Array: function(value, options){\n      return castArray(value, {\n        of: [{\n          type: '*'\n        }]\n      }, options);\n    },\n    Object: function(value, options){\n      return castFields(value, {\n        of: {}\n      }, options);\n    },\n    String: function(it){\n      var that;\n      if (toString$.call(it).slice(8, -1) !== 'String') {\n        return {\n          type: 'Nothing'\n        };\n      }\n      if (that = it.match(/^'([\\s\\S]*)'$/)) {\n        return {\n          type: 'Just',\n          value: that[1].replace(/\\\\'/g, \"'\")\n        };\n      } else if (that = it.match(/^\"([\\s\\S]*)\"$/)) {\n        return {\n          type: 'Just',\n          value: that[1].replace(/\\\\\"/g, '\"')\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: it\n        };\n      }\n    }\n  };\n  function castArray(node, type, options){\n    var typeOf, element;\n    if (toString$.call(node).slice(8, -1) !== 'Array') {\n      return {\n        type: 'Nothing'\n      };\n    }\n    typeOf = type.of;\n    return {\n      type: 'Just',\n      value: (function(){\n        var i$, ref$, len$, results$ = [];\n        for (i$ = 0, len$ = (ref$ = node).length; i$ < len$; ++i$) {\n          element = ref$[i$];\n          results$.push(typesCast(element, typeOf, options));\n        }\n        return results$;\n      }())\n    };\n  }\n  function castTuple(node, type, options){\n    var result, i, i$, ref$, len$, types, cast;\n    if (toString$.call(node).slice(8, -1) !== 'Array') {\n      return {\n        type: 'Nothing'\n      };\n    }\n    result = [];\n    i = 0;\n    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {\n      types = ref$[i$];\n      cast = typesCast(node[i], types, options);\n      if (toString$.call(cast).slice(8, -1) !== 'Undefined') {\n        result.push(cast);\n      }\n      i++;\n    }\n    if (node.length <= i) {\n      return {\n        type: 'Just',\n        value: result\n      };\n    } else {\n      return {\n        type: 'Nothing'\n      };\n    }\n  }\n  function castFields(node, type, options){\n    var typeOf, key, value;\n    if (toString$.call(node).slice(8, -1) !== 'Object') {\n      return {\n        type: 'Nothing'\n      };\n    }\n    typeOf = type.of;\n    return {\n      type: 'Just',\n      value: (function(){\n        var ref$, resultObj$ = {};\n        for (key in ref$ = node) {\n          value = ref$[key];\n          resultObj$[typesCast(key, [{\n            type: 'String'\n          }], options)] = typesCast(value, typeOf[key] || [{\n            type: '*'\n          }], options);\n        }\n        return resultObj$;\n      }())\n    };\n  }\n  function typeCast(node, typeObj, options){\n    var type, structure, castFunc, ref$;\n    type = typeObj.type, structure = typeObj.structure;\n    if (type) {\n      castFunc = ((ref$ = options.customTypes[type]) != null ? ref$.cast : void 8) || types[type];\n      if (!castFunc) {\n        throw new Error(\"Type not defined: \" + type + \".\");\n      }\n      return castFunc(node, options, typesCast);\n    } else {\n      switch (structure) {\n      case 'array':\n        return castArray(node, typeObj, options);\n      case 'tuple':\n        return castTuple(node, typeObj, options);\n      case 'fields':\n        return castFields(node, typeObj, options);\n      }\n    }\n  }\n  function typesCast(node, types, options){\n    var i$, len$, type, ref$, valueType, value;\n    for (i$ = 0, len$ = types.length; i$ < len$; ++i$) {\n      type = types[i$];\n      ref$ = typeCast(node, type, options), valueType = ref$.type, value = ref$.value;\n      if (valueType === 'Nothing') {\n        continue;\n      }\n      if (parsedTypeCheck([type], value, {\n        customTypes: options.customTypes\n      })) {\n        return value;\n      }\n    }\n    throw new Error(\"Value \" + JSON.stringify(node) + \" does not type check against \" + JSON.stringify(types) + \".\");\n  }\n  module.exports = typesCast;\n}).call(this);\n"]}