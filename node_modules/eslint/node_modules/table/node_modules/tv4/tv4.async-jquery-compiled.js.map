{"version":3,"sources":["tv4.async-jquery.js"],"names":[],"mappings":";;;;;AAGA,IAAI,OAAQ,IAAI,aAAZ,KAA+B,WAAnC,EAAgD;AAC/C,KAAI,YAAJ,GAAmB,IAAI,QAAvB;AACA,KAAI,QAAJ,GAAe,UAAU,IAAV,EAAgB,MAAhB,EAAwB,QAAxB,EAAkC,cAAlC,EAAkD,oBAAlD,EAAwE;AACtF,MAAI,OAAQ,QAAR,KAAsB,WAA1B,EAAuC;AACtC,UAAO,KAAK,YAAL,CAAkB,IAAlB,EAAwB,MAAxB,EAAgC,cAAhC,EAAgD,oBAAhD,CAAP;AACA,GAFD,MAEO;AACN,UAAO,KAAK,aAAL,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC,QAAjC,EAA2C,cAA3C,EAA2D,oBAA3D,CAAP;AACA;AACD,EAND;AAOA,KAAI,aAAJ,GAAoB,UAAU,IAAV,EAAgB,MAAhB,EAAwB,QAAxB,EAAkC,cAAlC,EAAkD,oBAAlD,EAAwE;AAC3F,MAAI,IAAI,MAAR;AACA,MAAI,SAAS,IAAI,QAAJ,CAAa,IAAb,EAAmB,MAAnB,EAA2B,cAA3B,EAA2C,oBAA3C,CAAb;AACA,MAAI,CAAC,IAAI,OAAJ,CAAY,MAAjB,EAAyB;AACxB,YAAS,MAAT,EAAiB,IAAI,KAArB;AACA,GAFD,MAEO;;AAEN,OAAI,iBAAiB,EAAE,GAAF,CAAM,IAAI,OAAV,EAAmB,UAAU,SAAV,EAAqB;AAC5D,WAAO,EAAE,OAAF,CAAU,SAAV,EAAqB,OAArB,CAA6B,UAAU,aAAV,EAAyB;AAC5D,SAAI,SAAJ,CAAc,SAAd,EAAyB,aAAzB;AACA,KAFM,EAEJ,KAFI,CAEE,YAAY;;AAEpB,SAAI,SAAJ,CAAc,SAAd,EAAyB,EAAzB;AACA,KALM,CAAP;AAMA,IAPoB,CAArB;;AASA,KAAE,IAAF,CAAO,KAAP,CAAa,CAAb,EAAgB,cAAhB,EAAgC,IAAhC,CAAqC,YAAY;AAChD,QAAI,SAAS,IAAI,aAAJ,CAAkB,IAAlB,EAAwB,MAAxB,EAAgC,QAAhC,EAA0C,cAA1C,EAA0D,oBAA1D,CAAb;AACA,IAFD;AAGA;AACD,EApBD;AAqBA","file":"tv4.async-jquery-compiled.js","sourcesContent":["// Provides support for asynchronous validation (fetching schemas) using jQuery\n// Callback is optional third argument to tv4.validate() - if not present, synchronous operation\n//     callback(result, error);\nif (typeof (tv4.asyncValidate) === 'undefined') {\n\ttv4.syncValidate = tv4.validate;\n\ttv4.validate = function (data, schema, callback, checkRecursive, banUnknownProperties) {\n\t\tif (typeof (callback) === 'undefined') {\n\t\t\treturn this.syncValidate(data, schema, checkRecursive, banUnknownProperties);\n\t\t} else {\n\t\t\treturn this.asyncValidate(data, schema, callback, checkRecursive, banUnknownProperties);\n\t\t}\n\t};\n\ttv4.asyncValidate = function (data, schema, callback, checkRecursive, banUnknownProperties) {\n\t\tvar $ = jQuery;\n\t\tvar result = tv4.validate(data, schema, checkRecursive, banUnknownProperties);\n\t\tif (!tv4.missing.length) {\n\t\t\tcallback(result, tv4.error);\n\t\t} else {\n\t\t\t// Make a request for each missing schema\n\t\t\tvar missingSchemas = $.map(tv4.missing, function (schemaUri) {\n\t\t\t\treturn $.getJSON(schemaUri).success(function (fetchedSchema) {\n\t\t\t\t\ttv4.addSchema(schemaUri, fetchedSchema);\n\t\t\t\t}).error(function () {\n\t\t\t\t\t// If there's an error, just use an empty schema\n\t\t\t\t\ttv4.addSchema(schemaUri, {});\n\t\t\t\t});\n\t\t\t});\n\t\t\t// When all requests done, try again\n\t\t\t$.when.apply($, missingSchemas).done(function () {\n\t\t\t\tvar result = tv4.asyncValidate(data, schema, callback, checkRecursive, banUnknownProperties);\n\t\t\t});\n\t\t}\n\t};\n}\n"]}