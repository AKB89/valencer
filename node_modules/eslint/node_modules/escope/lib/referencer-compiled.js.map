{"version":3,"sources":["referencer.js"],"names":[],"mappings":"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","file":"referencer-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _estraverse = require('estraverse');\n\nvar _esrecurse = require('esrecurse');\n\nvar _esrecurse2 = _interopRequireDefault(_esrecurse);\n\nvar _reference = require('./reference');\n\nvar _reference2 = _interopRequireDefault(_reference);\n\nvar _variable = require('./variable');\n\nvar _variable2 = _interopRequireDefault(_variable);\n\nvar _patternVisitor = require('./pattern-visitor');\n\nvar _patternVisitor2 = _interopRequireDefault(_patternVisitor);\n\nvar _definition = require('./definition');\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Redistribution and use in source and binary forms, with or without\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 modification, are permitted provided that the following conditions are met:\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nedistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nnnnnnnnnnn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\n\nfunction traverseIdentifierInPattern(options, rootPattern, referencer, callback) {\n    // Call the callback at left hand identifier nodes, and Collect right hand nodes.\n    var visitor = new _patternVisitor2.default(options, rootPattern, callback);\n    visitor.visit(rootPattern);\n\n    // Process the right hand nodes recursively.\n    if (referencer != null) {\n        visitor.rightHandNodes.forEach(referencer.visit, referencer);\n    }\n}\n\n// Importing ImportDeclaration.\n// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-moduledeclarationinstantiation\n// https://github.com/estree/estree/blob/master/es6.md#importdeclaration\n// FIXME: Now, we don't create module environment, because the context is\n// implementation dependent.\n\nvar Importer = function (_esrecurse$Visitor) {\n    _inherits(Importer, _esrecurse$Visitor);\n\n    function Importer(declaration, referencer) {\n        _classCallCheck(this, Importer);\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Importer).call(this, null, referencer.options));\n\n        _this.declaration = declaration;\n        _this.referencer = referencer;\n        return _this;\n    }\n\n    _createClass(Importer, [{\n        key: 'visitImport',\n        value: function visitImport(id, specifier) {\n            var _this2 = this;\n\n            this.referencer.visitPattern(id, function (pattern) {\n                _this2.referencer.currentScope().__define(pattern, new _definition.Definition(_variable2.default.ImportBinding, pattern, specifier, _this2.declaration, null, null));\n            });\n        }\n    }, {\n        key: 'ImportNamespaceSpecifier',\n        value: function ImportNamespaceSpecifier(node) {\n            var local = node.local || node.id;\n            if (local) {\n                this.visitImport(local, node);\n            }\n        }\n    }, {\n        key: 'ImportDefaultSpecifier',\n        value: function ImportDefaultSpecifier(node) {\n            var local = node.local || node.id;\n            this.visitImport(local, node);\n        }\n    }, {\n        key: 'ImportSpecifier',\n        value: function ImportSpecifier(node) {\n            var local = node.local || node.id;\n            if (node.name) {\n                this.visitImport(node.name, node);\n            } else {\n                this.visitImport(local, node);\n            }\n        }\n    }]);\n\n    return Importer;\n}(_esrecurse2.default.Visitor);\n\n// Referencing variables and creating bindings.\n\n\nvar Referencer = function (_esrecurse$Visitor2) {\n    _inherits(Referencer, _esrecurse$Visitor2);\n\n    function Referencer(options, scopeManager) {\n        _classCallCheck(this, Referencer);\n\n        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Referencer).call(this, null, options));\n\n        _this3.options = options;\n        _this3.scopeManager = scopeManager;\n        _this3.parent = null;\n        _this3.isInnerMethodDefinition = false;\n        return _this3;\n    }\n\n    _createClass(Referencer, [{\n        key: 'currentScope',\n        value: function currentScope() {\n            return this.scopeManager.__currentScope;\n        }\n    }, {\n        key: 'close',\n        value: function close(node) {\n            while (this.currentScope() && node === this.currentScope().block) {\n                this.scopeManager.__currentScope = this.currentScope().__close(this.scopeManager);\n            }\n        }\n    }, {\n        key: 'pushInnerMethodDefinition',\n        value: function pushInnerMethodDefinition(isInnerMethodDefinition) {\n            var previous = this.isInnerMethodDefinition;\n            this.isInnerMethodDefinition = isInnerMethodDefinition;\n            return previous;\n        }\n    }, {\n        key: 'popInnerMethodDefinition',\n        value: function popInnerMethodDefinition(isInnerMethodDefinition) {\n            this.isInnerMethodDefinition = isInnerMethodDefinition;\n        }\n    }, {\n        key: 'materializeTDZScope',\n        value: function materializeTDZScope(node, iterationNode) {\n            // http://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-forin-div-ofexpressionevaluation-abstract-operation\n            // TDZ scope hides the declaration's names.\n            this.scopeManager.__nestTDZScope(node, iterationNode);\n            this.visitVariableDeclaration(this.currentScope(), _variable2.default.TDZ, iterationNode.left, 0, true);\n        }\n    }, {\n        key: 'materializeIterationScope',\n        value: function materializeIterationScope(node) {\n            var _this4 = this;\n\n            // Generate iteration scope for upper ForIn/ForOf Statements.\n            var letOrConstDecl;\n            this.scopeManager.__nestForScope(node);\n            letOrConstDecl = node.left;\n            this.visitVariableDeclaration(this.currentScope(), _variable2.default.Variable, letOrConstDecl, 0);\n            this.visitPattern(letOrConstDecl.declarations[0].id, function (pattern) {\n                _this4.currentScope().__referencing(pattern, _reference2.default.WRITE, node.right, null, true, true);\n            });\n        }\n    }, {\n        key: 'referencingDefaultValue',\n        value: function referencingDefaultValue(pattern, assignments, maybeImplicitGlobal, init) {\n            var scope = this.currentScope();\n            assignments.forEach(function (assignment) {\n                scope.__referencing(pattern, _reference2.default.WRITE, assignment.right, maybeImplicitGlobal, pattern !== assignment.left, init);\n            });\n        }\n    }, {\n        key: 'visitPattern',\n        value: function visitPattern(node, options, callback) {\n            if (typeof options === 'function') {\n                callback = options;\n                options = { processRightHandNodes: false };\n            }\n            traverseIdentifierInPattern(this.options, node, options.processRightHandNodes ? this : null, callback);\n        }\n    }, {\n        key: 'visitFunction',\n        value: function visitFunction(node) {\n            var _this5 = this;\n\n            var i, iz;\n            // FunctionDeclaration name is defined in upper scope\n            // NOTE: Not referring variableScope. It is intended.\n            // Since\n            //  in ES5, FunctionDeclaration should be in FunctionBody.\n            //  in ES6, FunctionDeclaration should be block scoped.\n            if (node.type === _estraverse.Syntax.FunctionDeclaration) {\n                // id is defined in upper scope\n                this.currentScope().__define(node.id, new _definition.Definition(_variable2.default.FunctionName, node.id, node, null, null, null));\n            }\n\n            // FunctionExpression with name creates its special scope;\n            // FunctionExpressionNameScope.\n            if (node.type === _estraverse.Syntax.FunctionExpression && node.id) {\n                this.scopeManager.__nestFunctionExpressionNameScope(node);\n            }\n\n            // Consider this function is in the MethodDefinition.\n            this.scopeManager.__nestFunctionScope(node, this.isInnerMethodDefinition);\n\n            // Process parameter declarations.\n            for (i = 0, iz = node.params.length; i < iz; ++i) {\n                this.visitPattern(node.params[i], { processRightHandNodes: true }, function (pattern, info) {\n                    _this5.currentScope().__define(pattern, new _definition.ParameterDefinition(pattern, node, i, info.rest));\n\n                    _this5.referencingDefaultValue(pattern, info.assignments, null, true);\n                });\n            }\n\n            // if there's a rest argument, add that\n            if (node.rest) {\n                this.visitPattern({\n                    type: 'RestElement',\n                    argument: node.rest\n                }, function (pattern) {\n                    _this5.currentScope().__define(pattern, new _definition.ParameterDefinition(pattern, node, node.params.length, true));\n                });\n            }\n\n            // Skip BlockStatement to prevent creating BlockStatement scope.\n            if (node.body.type === _estraverse.Syntax.BlockStatement) {\n                this.visitChildren(node.body);\n            } else {\n                this.visit(node.body);\n            }\n\n            this.close(node);\n        }\n    }, {\n        key: 'visitClass',\n        value: function visitClass(node) {\n            if (node.type === _estraverse.Syntax.ClassDeclaration) {\n                this.currentScope().__define(node.id, new _definition.Definition(_variable2.default.ClassName, node.id, node, null, null, null));\n            }\n\n            // FIXME: Maybe consider TDZ.\n            this.visit(node.superClass);\n\n            this.scopeManager.__nestClassScope(node);\n\n            if (node.id) {\n                this.currentScope().__define(node.id, new _definition.Definition(_variable2.default.ClassName, node.id, node));\n            }\n            this.visit(node.body);\n\n            this.close(node);\n        }\n    }, {\n        key: 'visitProperty',\n        value: function visitProperty(node) {\n            var previous, isMethodDefinition;\n            if (node.computed) {\n                this.visit(node.key);\n            }\n\n            isMethodDefinition = node.type === _estraverse.Syntax.MethodDefinition;\n            if (isMethodDefinition) {\n                previous = this.pushInnerMethodDefinition(true);\n            }\n            this.visit(node.value);\n            if (isMethodDefinition) {\n                this.popInnerMethodDefinition(previous);\n            }\n        }\n    }, {\n        key: 'visitForIn',\n        value: function visitForIn(node) {\n            var _this6 = this;\n\n            if (node.left.type === _estraverse.Syntax.VariableDeclaration && node.left.kind !== 'var') {\n                this.materializeTDZScope(node.right, node);\n                this.visit(node.right);\n                this.close(node.right);\n\n                this.materializeIterationScope(node);\n                this.visit(node.body);\n                this.close(node);\n            } else {\n                if (node.left.type === _estraverse.Syntax.VariableDeclaration) {\n                    this.visit(node.left);\n                    this.visitPattern(node.left.declarations[0].id, function (pattern) {\n                        _this6.currentScope().__referencing(pattern, _reference2.default.WRITE, node.right, null, true, true);\n                    });\n                } else {\n                    this.visitPattern(node.left, { processRightHandNodes: true }, function (pattern, info) {\n                        var maybeImplicitGlobal = null;\n                        if (!_this6.currentScope().isStrict) {\n                            maybeImplicitGlobal = {\n                                pattern: pattern,\n                                node: node\n                            };\n                        }\n                        _this6.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);\n                        _this6.currentScope().__referencing(pattern, _reference2.default.WRITE, node.right, maybeImplicitGlobal, true, false);\n                    });\n                }\n                this.visit(node.right);\n                this.visit(node.body);\n            }\n        }\n    }, {\n        key: 'visitVariableDeclaration',\n        value: function visitVariableDeclaration(variableTargetScope, type, node, index, fromTDZ) {\n            var _this7 = this;\n\n            // If this was called to initialize a TDZ scope, this needs to make definitions, but doesn't make references.\n            var decl, init;\n\n            decl = node.declarations[index];\n            init = decl.init;\n            this.visitPattern(decl.id, { processRightHandNodes: !fromTDZ }, function (pattern, info) {\n                variableTargetScope.__define(pattern, new _definition.Definition(type, pattern, decl, node, index, node.kind));\n\n                if (!fromTDZ) {\n                    _this7.referencingDefaultValue(pattern, info.assignments, null, true);\n                }\n                if (init) {\n                    _this7.currentScope().__referencing(pattern, _reference2.default.WRITE, init, null, !info.topLevel, true);\n                }\n            });\n        }\n    }, {\n        key: 'AssignmentExpression',\n        value: function AssignmentExpression(node) {\n            var _this8 = this;\n\n            if (_patternVisitor2.default.isPattern(node.left)) {\n                if (node.operator === '=') {\n                    this.visitPattern(node.left, { processRightHandNodes: true }, function (pattern, info) {\n                        var maybeImplicitGlobal = null;\n                        if (!_this8.currentScope().isStrict) {\n                            maybeImplicitGlobal = {\n                                pattern: pattern,\n                                node: node\n                            };\n                        }\n                        _this8.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);\n                        _this8.currentScope().__referencing(pattern, _reference2.default.WRITE, node.right, maybeImplicitGlobal, !info.topLevel, false);\n                    });\n                } else {\n                    this.currentScope().__referencing(node.left, _reference2.default.RW, node.right);\n                }\n            } else {\n                this.visit(node.left);\n            }\n            this.visit(node.right);\n        }\n    }, {\n        key: 'CatchClause',\n        value: function CatchClause(node) {\n            var _this9 = this;\n\n            this.scopeManager.__nestCatchScope(node);\n\n            this.visitPattern(node.param, { processRightHandNodes: true }, function (pattern, info) {\n                _this9.currentScope().__define(pattern, new _definition.Definition(_variable2.default.CatchClause, node.param, node, null, null, null));\n                _this9.referencingDefaultValue(pattern, info.assignments, null, true);\n            });\n            this.visit(node.body);\n\n            this.close(node);\n        }\n    }, {\n        key: 'Program',\n        value: function Program(node) {\n            this.scopeManager.__nestGlobalScope(node);\n\n            if (this.scopeManager.__isNodejsScope()) {\n                // Force strictness of GlobalScope to false when using node.js scope.\n                this.currentScope().isStrict = false;\n                this.scopeManager.__nestFunctionScope(node, false);\n            }\n\n            if (this.scopeManager.__isES6() && this.scopeManager.isModule()) {\n                this.scopeManager.__nestModuleScope(node);\n            }\n\n            if (this.scopeManager.isStrictModeSupported() && this.scopeManager.isImpliedStrict()) {\n                this.currentScope().isStrict = true;\n            }\n\n            this.visitChildren(node);\n            this.close(node);\n        }\n    }, {\n        key: 'Identifier',\n        value: function Identifier(node) {\n            this.currentScope().__referencing(node);\n        }\n    }, {\n        key: 'UpdateExpression',\n        value: function UpdateExpression(node) {\n            if (_patternVisitor2.default.isPattern(node.argument)) {\n                this.currentScope().__referencing(node.argument, _reference2.default.RW, null);\n            } else {\n                this.visitChildren(node);\n            }\n        }\n    }, {\n        key: 'MemberExpression',\n        value: function MemberExpression(node) {\n            this.visit(node.object);\n            if (node.computed) {\n                this.visit(node.property);\n            }\n        }\n    }, {\n        key: 'Property',\n        value: function Property(node) {\n            this.visitProperty(node);\n        }\n    }, {\n        key: 'MethodDefinition',\n        value: function MethodDefinition(node) {\n            this.visitProperty(node);\n        }\n    }, {\n        key: 'BreakStatement',\n        value: function BreakStatement() {}\n    }, {\n        key: 'ContinueStatement',\n        value: function ContinueStatement() {}\n    }, {\n        key: 'LabeledStatement',\n        value: function LabeledStatement(node) {\n            this.visit(node.body);\n        }\n    }, {\n        key: 'ForStatement',\n        value: function ForStatement(node) {\n            // Create ForStatement declaration.\n            // NOTE: In ES6, ForStatement dynamically generates\n            // per iteration environment. However, escope is\n            // a static analyzer, we only generate one scope for ForStatement.\n            if (node.init && node.init.type === _estraverse.Syntax.VariableDeclaration && node.init.kind !== 'var') {\n                this.scopeManager.__nestForScope(node);\n            }\n\n            this.visitChildren(node);\n\n            this.close(node);\n        }\n    }, {\n        key: 'ClassExpression',\n        value: function ClassExpression(node) {\n            this.visitClass(node);\n        }\n    }, {\n        key: 'ClassDeclaration',\n        value: function ClassDeclaration(node) {\n            this.visitClass(node);\n        }\n    }, {\n        key: 'CallExpression',\n        value: function CallExpression(node) {\n            // Check this is direct call to eval\n            if (!this.scopeManager.__ignoreEval() && node.callee.type === _estraverse.Syntax.Identifier && node.callee.name === 'eval') {\n                // NOTE: This should be `variableScope`. Since direct eval call always creates Lexical environment and\n                // let / const should be enclosed into it. Only VariableDeclaration affects on the caller's environment.\n                this.currentScope().variableScope.__detectEval();\n            }\n            this.visitChildren(node);\n        }\n    }, {\n        key: 'BlockStatement',\n        value: function BlockStatement(node) {\n            if (this.scopeManager.__isES6()) {\n                this.scopeManager.__nestBlockScope(node);\n            }\n\n            this.visitChildren(node);\n\n            this.close(node);\n        }\n    }, {\n        key: 'ThisExpression',\n        value: function ThisExpression() {\n            this.currentScope().variableScope.__detectThis();\n        }\n    }, {\n        key: 'WithStatement',\n        value: function WithStatement(node) {\n            this.visit(node.object);\n            // Then nest scope for WithStatement.\n            this.scopeManager.__nestWithScope(node);\n\n            this.visit(node.body);\n\n            this.close(node);\n        }\n    }, {\n        key: 'VariableDeclaration',\n        value: function VariableDeclaration(node) {\n            var variableTargetScope, i, iz, decl;\n            variableTargetScope = node.kind === 'var' ? this.currentScope().variableScope : this.currentScope();\n            for (i = 0, iz = node.declarations.length; i < iz; ++i) {\n                decl = node.declarations[i];\n                this.visitVariableDeclaration(variableTargetScope, _variable2.default.Variable, node, i);\n                if (decl.init) {\n                    this.visit(decl.init);\n                }\n            }\n        }\n\n        // sec 13.11.8\n\n    }, {\n        key: 'SwitchStatement',\n        value: function SwitchStatement(node) {\n            var i, iz;\n\n            this.visit(node.discriminant);\n\n            if (this.scopeManager.__isES6()) {\n                this.scopeManager.__nestSwitchScope(node);\n            }\n\n            for (i = 0, iz = node.cases.length; i < iz; ++i) {\n                this.visit(node.cases[i]);\n            }\n\n            this.close(node);\n        }\n    }, {\n        key: 'FunctionDeclaration',\n        value: function FunctionDeclaration(node) {\n            this.visitFunction(node);\n        }\n    }, {\n        key: 'FunctionExpression',\n        value: function FunctionExpression(node) {\n            this.visitFunction(node);\n        }\n    }, {\n        key: 'ForOfStatement',\n        value: function ForOfStatement(node) {\n            this.visitForIn(node);\n        }\n    }, {\n        key: 'ForInStatement',\n        value: function ForInStatement(node) {\n            this.visitForIn(node);\n        }\n    }, {\n        key: 'ArrowFunctionExpression',\n        value: function ArrowFunctionExpression(node) {\n            this.visitFunction(node);\n        }\n    }, {\n        key: 'ImportDeclaration',\n        value: function ImportDeclaration(node) {\n            var importer;\n\n            (0, _assert2.default)(this.scopeManager.__isES6() && this.scopeManager.isModule(), 'ImportDeclaration should appear when the mode is ES6 and in the module context.');\n\n            importer = new Importer(node, this);\n            importer.visit(node);\n        }\n    }, {\n        key: 'visitExportDeclaration',\n        value: function visitExportDeclaration(node) {\n            if (node.source) {\n                return;\n            }\n            if (node.declaration) {\n                this.visit(node.declaration);\n                return;\n            }\n\n            this.visitChildren(node);\n        }\n    }, {\n        key: 'ExportDeclaration',\n        value: function ExportDeclaration(node) {\n            this.visitExportDeclaration(node);\n        }\n    }, {\n        key: 'ExportNamedDeclaration',\n        value: function ExportNamedDeclaration(node) {\n            this.visitExportDeclaration(node);\n        }\n    }, {\n        key: 'ExportSpecifier',\n        value: function ExportSpecifier(node) {\n            var local = node.id || node.local;\n            this.visit(local);\n        }\n    }, {\n        key: 'MetaProperty',\n        value: function MetaProperty() {\n            // do nothing.\n        }\n    }]);\n\n    return Referencer;\n}(_esrecurse2.default.Visitor);\n\n/* vim: set sw=4 ts=4 et tw=80 : */\n\n\nexports.default = Referencer;\n//# sourceMappingURL=data:application/json;base64,\n"]}