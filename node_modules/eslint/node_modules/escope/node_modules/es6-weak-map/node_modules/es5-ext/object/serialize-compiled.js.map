{"version":3,"sources":["serialize.js"],"names":[],"mappings":"AAAA;;;;AAEA,IAAI,UAAW,QAAQ,YAAR,CAAf;IACI,SAAW,QAAQ,iBAAR,CADf;IAEI,WAAW,QAAQ,uBAAR,CAFf;IAII,UAAU,MAAM,OAJpB;IAI6B,YAAY,KAAK,SAJ9C;IAKI,mBAAmB,SAAnB,gBAAmB,CAAU,KAAV,EAAiB,GAAjB,EAAsB;AAAE,QAAO,UAAU,GAAV,IAAiB,GAAjB,GAAuB,QAAQ,KAAR,CAA9B;AAA+C,CAL9F;;AAOA,IAAI,YAAY,SAAZ,SAAY,CAAU,GAAV,EAAe;AAC9B,KAAI,CAAJ;KAAO,IAAI,IAAI,MAAf;KAAuB,SAAS,IAAI,KAAJ,CAAU,CAAV,CAAhC;AACA,MAAK,IAAI,CAAT,EAAY,IAAI,CAAhB,EAAmB,EAAE,CAArB,EAAwB;AACvB,MAAI,CAAC,IAAI,cAAJ,CAAmB,CAAnB,CAAL,EAA4B;AAC5B,SAAO,CAAP,IAAY,QAAQ,IAAI,CAAJ,CAAR,CAAZ;AACA;AACD,QAAO,MAAP;AACA,CAPD;;AASA,OAAO,OAAP,GAAiB,UAAU,iBAAU,GAAV,EAAe;AACzC,KAAI,OAAO,IAAX,EAAiB,OAAO,OAAO,GAAP,CAAP;AACjB,gBAAe,GAAf,yCAAe,GAAf;AACA,OAAK,QAAL;AACC,UAAO,UAAU,GAAV,CAAP;AACD,OAAK,QAAL;AACA,OAAK,SAAL;AACA,OAAK,UAAL;AACC,UAAO,OAAO,GAAP,CAAP;AACD,OAAK,QAAL;AACC,OAAI,QAAQ,GAAR,CAAJ,EAAkB,OAAO,MAAM,UAAU,GAAV,CAAN,GAAuB,GAA9B;AAClB,OAAI,SAAS,GAAT,CAAJ,EAAmB,OAAO,OAAO,GAAP,CAAP;AACnB,OAAI,OAAO,GAAP,CAAJ,EAAiB,OAAO,cAAc,IAAI,OAAJ,EAAd,GAA8B,GAArC;AACjB,UAAO,MAAM,QAAQ,GAAR,EAAa,gBAAb,CAAN,GAAuC,GAA9C;AACD;AACC,SAAM,IAAI,SAAJ,CAAc,sBAAsB,OAAO,GAAP,CAAtB,GAAoC,gBAAlD,CAAN;AAbD;AAeA,CAjBD","file":"serialize-compiled.js","sourcesContent":["'use strict';\n\nvar toArray  = require('./to-array')\n  , isDate   = require('../date/is-date')\n  , isRegExp = require('../reg-exp/is-reg-exp')\n\n  , isArray = Array.isArray, stringify = JSON.stringify\n  , keyValueToString = function (value, key) { return stringify(key) + ':' + exports(value); };\n\nvar sparseMap = function (arr) {\n\tvar i, l = arr.length, result = new Array(l);\n\tfor (i = 0; i < l; ++i) {\n\t\tif (!arr.hasOwnProperty(i)) continue;\n\t\tresult[i] = exports(arr[i]);\n\t}\n\treturn result;\n};\n\nmodule.exports = exports = function (obj) {\n\tif (obj == null) return String(obj);\n\tswitch (typeof obj) {\n\tcase 'string':\n\t\treturn stringify(obj);\n\tcase 'number':\n\tcase 'boolean':\n\tcase 'function':\n\t\treturn String(obj);\n\tcase 'object':\n\t\tif (isArray(obj)) return '[' + sparseMap(obj) + ']';\n\t\tif (isRegExp(obj)) return String(obj);\n\t\tif (isDate(obj)) return 'new Date(' + obj.valueOf() + ')';\n\t\treturn '{' + toArray(obj, keyValueToString) + '}';\n\tdefault:\n\t\tthrow new TypeError(\"Serialization of \" + String(obj) + \"is unsupported\");\n\t}\n};\n"]}