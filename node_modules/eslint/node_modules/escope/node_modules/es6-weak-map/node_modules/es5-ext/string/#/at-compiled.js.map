{"version":3,"sources":["at.js"],"names":[],"mappings":";;;AAGA;;AAEA,IAAI,YAAa,QAAQ,yBAAR,CAAjB;IACI,aAAa,QAAQ,0BAAR,CADjB;;AAGA,OAAO,OAAP,GAAiB,UAAU,GAAV,EAAe;AAC/B,KAAI,MAAM,OAAO,WAAW,IAAX,CAAP,CAAV;KAAoC,OAAO,IAAI,MAA/C;KACI,OADJ;KACa,QADb;KACuB,OADvB;KACgC,GADhC;AAEA,OAAM,UAAU,GAAV,CAAN;;;;;AAKA,KAAI,OAAO,CAAC,CAAR,IAAa,OAAO,IAAxB,EAA8B,OAAO,EAAP;;;AAG9B,OAAM,MAAM,CAAZ;;AAEA,WAAU,IAAI,UAAJ,CAAe,GAAf,CAAV;AACA,WAAU,MAAM,CAAhB;AACA,OAAM,CAAN;AACA,K;AACE,YAAW,MAAZ,IAAwB,WAAW,MAAnC,I;AACE,QAAO,O;AAFV,GAGE;AACD,cAAW,IAAI,UAAJ,CAAe,OAAf,CAAX;AACA,OAAI,YAAY,MAAZ,IAAsB,YAAY,MAAtC,EAA8C,MAAM,CAAN,C;AAC9C;AACD,QAAO,IAAI,KAAJ,CAAU,GAAV,EAAe,MAAM,GAArB,CAAP;AACA,CAxBD","file":"at-compiled.js","sourcesContent":["// Based on: https://github.com/mathiasbynens/String.prototype.at\n// Thanks @mathiasbynens !\n\n'use strict';\n\nvar toInteger  = require('../../number/to-integer')\n  , validValue = require('../../object/valid-value');\n\nmodule.exports = function (pos) {\n\tvar str = String(validValue(this)), size = str.length\n\t  , cuFirst, cuSecond, nextPos, len;\n\tpos = toInteger(pos);\n\n\t// Account for out-of-bounds indices\n\t// The odd lower bound is because the ToInteger operation is\n\t// going to round `n` to `0` for `-1 < n <= 0`.\n\tif (pos <= -1 || pos >= size) return '';\n\n\t// Second half of `ToInteger`\n\tpos = pos | 0;\n\t// Get the first code unit and code unit value\n\tcuFirst = str.charCodeAt(pos);\n\tnextPos = pos + 1;\n\tlen = 1;\n\tif ( // check if itâ€™s the start of a surrogate pair\n\t\t(cuFirst >= 0xD800) && (cuFirst <= 0xDBFF) && // high surrogate\n\t\t\t(size > nextPos) // there is a next code unit\n\t) {\n\t\tcuSecond = str.charCodeAt(nextPos);\n\t\tif (cuSecond >= 0xDC00 && cuSecond <= 0xDFFF) len = 2; // low surrogate\n\t}\n\treturn str.slice(pos, pos + len);\n};\n"]}