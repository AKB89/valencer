{"version":3,"sources":["shim.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,QAAQ,sBAAR,CAAnB;IACI,WAAe,QAAQ,gCAAR,CADnB;IAEI,WAAe,QAAQ,2BAAR,CAFnB;IAII,UAAU,MAAM,OAJpB;IAI6B,SAAS,MAAM,SAAN,CAAgB,MAJtD;IAKI,UAAU,MAAM,SAAN,CAAgB,OAL9B;IAOI,YAPJ;;AASA,eAAe,sBAAU,KAAV,EAAiB;AAC/B,KAAI,CAAC,KAAL,EAAY,OAAO,KAAP;AACZ,KAAI,CAAC,SAAS,KAAT,CAAL,EAAsB,OAAO,KAAP;AACtB,KAAI,MAAM,sBAAN,MAAkC,SAAtC,EAAiD;AAChD,SAAO,QAAQ,MAAM,sBAAN,CAAR,CAAP;AACA;AACD,QAAO,QAAQ,KAAR,CAAP;AACA,CAPD;;AASA,OAAO,OAAP,GAAiB,UAAU,I,aAAV,EAA4B;AAC5C,KAAI,MAAJ;AACA,KAAI,CAAC,IAAD,IAAS,CAAC,QAAQ,IAAR,CAAV,IAA2B,aAAa,IAAb,CAA/B,EAAmD;AAClD,SAAO,OAAO,KAAP,CAAa,IAAb,EAAmB,SAAnB,CAAP;AACA;AACD,UAAS,IAAI,KAAK,WAAT,CAAqB,KAAK,MAA1B,CAAT;AACA,SAAQ,IAAR,CAAa,IAAb,EAAmB,UAAU,GAAV,EAAe,CAAf,EAAkB;AAAE,SAAO,CAAP,IAAY,GAAZ;AAAkB,EAAzD;AACA,SAAQ,IAAR,CAAa,SAAb,EAAwB,UAAU,GAAV,EAAe;AACtC,MAAI,IAAJ;AACA,MAAI,aAAa,GAAb,CAAJ,EAAuB;AACtB,UAAO,OAAO,MAAd;AACA,UAAO,MAAP,IAAiB,SAAS,IAAI,MAAb,CAAjB;AACA,WAAQ,IAAR,CAAa,GAAb,EAAkB,UAAU,GAAV,EAAe,CAAf,EAAkB;AAAE,WAAO,OAAO,CAAd,IAAmB,GAAnB;AAAyB,IAA/D;AACA;AACA;AACD,SAAO,IAAP,CAAY,GAAZ;AACA,EATD;AAUA,QAAO,MAAP;AACA,CAlBD","file":"shim-compiled.js","sourcesContent":["'use strict';\n\nvar isPlainArray = require('../../is-plain-array')\n  , toPosInt     = require('../../../number/to-pos-integer')\n  , isObject     = require('../../../object/is-object')\n\n  , isArray = Array.isArray, concat = Array.prototype.concat\n  , forEach = Array.prototype.forEach\n\n  , isSpreadable;\n\nisSpreadable = function (value) {\n\tif (!value) return false;\n\tif (!isObject(value)) return false;\n\tif (value['@@isConcatSpreadable'] !== undefined) {\n\t\treturn Boolean(value['@@isConcatSpreadable']);\n\t}\n\treturn isArray(value);\n};\n\nmodule.exports = function (item/*, â€¦items*/) {\n\tvar result;\n\tif (!this || !isArray(this) || isPlainArray(this)) {\n\t\treturn concat.apply(this, arguments);\n\t}\n\tresult = new this.constructor(this.length);\n\tforEach.call(this, function (val, i) { result[i] = val; });\n\tforEach.call(arguments, function (arg) {\n\t\tvar base;\n\t\tif (isSpreadable(arg)) {\n\t\t\tbase = result.length;\n\t\t\tresult.length += toPosInt(arg.length);\n\t\t\tforEach.call(arg, function (val, i) { result[base + i] = val; });\n\t\t\treturn;\n\t\t}\n\t\tresult.push(arg);\n\t});\n\treturn result;\n};\n"]}