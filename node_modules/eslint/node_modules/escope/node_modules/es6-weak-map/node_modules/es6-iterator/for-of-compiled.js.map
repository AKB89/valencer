{"version":3,"sources":["for-of.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,cAAc,QAAQ,+BAAR,CAAlB;IACI,WAAc,QAAQ,+BAAR,CADlB;IAEI,WAAc,QAAQ,0BAAR,CAFlB;IAGI,MAAc,QAAQ,OAAR,CAHlB;IAKI,UAAU,MAAM,OALpB;IAK6B,OAAO,SAAS,SAAT,CAAmB,IALvD;IAMI,OAAO,MAAM,SAAN,CAAgB,IAN3B;;AAQA,OAAO,OAAP,GAAiB,UAAU,QAAV,EAAoB,E,cAApB,EAAqC;AACrD,KAAI,IAAJ;KAAU,UAAU,UAAU,CAAV,CAApB;KAAkC,MAAlC;KAA0C,OAA1C;KAAmD,MAAnD;KAA2D,CAA3D;KAA8D,CAA9D;KAAiE,IAAjE;KAAuE,IAAvE;AACA,KAAI,QAAQ,QAAR,KAAqB,YAAY,QAAZ,CAAzB,EAAgD,OAAO,OAAP,CAAhD,KACK,IAAI,SAAS,QAAT,CAAJ,EAAwB,OAAO,QAAP,CAAxB,KACA,WAAW,IAAI,QAAJ,CAAX;;AAEL,UAAS,EAAT;AACA,WAAU,mBAAY;AAAE,WAAS,IAAT;AAAgB,EAAxC;AACA,KAAI,SAAS,OAAb,EAAsB;AACrB,OAAK,IAAL,CAAU,QAAV,EAAoB,UAAU,KAAV,EAAiB;AACpC,QAAK,IAAL,CAAU,EAAV,EAAc,OAAd,EAAuB,KAAvB,EAA8B,OAA9B;AACA,OAAI,MAAJ,EAAY,OAAO,IAAP;AACZ,GAHD;AAIA;AACA;AACD,KAAI,SAAS,QAAb,EAAuB;AACtB,MAAI,SAAS,MAAb;AACA,OAAK,IAAI,CAAT,EAAY,IAAI,CAAhB,EAAmB,EAAE,CAArB,EAAwB;AACvB,UAAO,SAAS,CAAT,CAAP;AACA,OAAK,IAAI,CAAL,GAAU,CAAd,EAAiB;AAChB,WAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AACA,QAAK,QAAQ,MAAT,IAAqB,QAAQ,MAAjC,EAA0C,QAAQ,SAAS,EAAE,CAAX,CAAR;AAC1C;AACD,QAAK,IAAL,CAAU,EAAV,EAAc,OAAd,EAAuB,IAAvB,EAA6B,OAA7B;AACA,OAAI,MAAJ,EAAY;AACZ;AACD;AACA;AACD,UAAS,SAAS,IAAT,EAAT;;AAEA,QAAO,CAAC,OAAO,IAAf,EAAqB;AACpB,OAAK,IAAL,CAAU,EAAV,EAAc,OAAd,EAAuB,OAAO,KAA9B,EAAqC,OAArC;AACA,MAAI,MAAJ,EAAY;AACZ,WAAS,SAAS,IAAT,EAAT;AACA;AACD,CAnCD","file":"for-of-compiled.js","sourcesContent":["'use strict';\n\nvar isArguments = require('es5-ext/function/is-arguments')\n  , callable    = require('es5-ext/object/valid-callable')\n  , isString    = require('es5-ext/string/is-string')\n  , get         = require('./get')\n\n  , isArray = Array.isArray, call = Function.prototype.call\n  , some = Array.prototype.some;\n\nmodule.exports = function (iterable, cb/*, thisArg*/) {\n\tvar mode, thisArg = arguments[2], result, doBreak, broken, i, l, char, code;\n\tif (isArray(iterable) || isArguments(iterable)) mode = 'array';\n\telse if (isString(iterable)) mode = 'string';\n\telse iterable = get(iterable);\n\n\tcallable(cb);\n\tdoBreak = function () { broken = true; };\n\tif (mode === 'array') {\n\t\tsome.call(iterable, function (value) {\n\t\t\tcall.call(cb, thisArg, value, doBreak);\n\t\t\tif (broken) return true;\n\t\t});\n\t\treturn;\n\t}\n\tif (mode === 'string') {\n\t\tl = iterable.length;\n\t\tfor (i = 0; i < l; ++i) {\n\t\t\tchar = iterable[i];\n\t\t\tif ((i + 1) < l) {\n\t\t\t\tcode = char.charCodeAt(0);\n\t\t\t\tif ((code >= 0xD800) && (code <= 0xDBFF)) char += iterable[++i];\n\t\t\t}\n\t\t\tcall.call(cb, thisArg, char, doBreak);\n\t\t\tif (broken) break;\n\t\t}\n\t\treturn;\n\t}\n\tresult = iterable.next();\n\n\twhile (!result.done) {\n\t\tcall.call(cb, thisArg, result.value, doBreak);\n\t\tif (broken) return;\n\t\tresult = iterable.next();\n\t}\n};\n"]}