{"version":3,"sources":["implicit-global-reference.js"],"names":[],"mappings":"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","file":"implicit-global-reference-compiled.js","sourcesContent":["(function() {\n  'use strict';\n  var escope, esprima, expect;\n\n  expect = require('chai').expect;\n\n  escope = require('..');\n\n  esprima = require('esprima');\n\n  describe('implicit global reference', function() {\n    it('assignments global scope', function() {\n      var ast, scopes;\n      ast = esprima.parse(\"var x = 20;\\nx = 300;\");\n      scopes = escope.analyze(ast).scopes;\n      expect(scopes.map(function(scope) {\n        return scope.variables.map(function(variable) {\n          return variable.defs.map(function(def) {\n            return def.type;\n          });\n        });\n      })).to.be.eql([[['Variable']]]);\n      return expect(scopes[0].implicit.variables.map(function(variable) {\n        return variable.name;\n      })).to.be.eql([]);\n    });\n    it('assignments global scope without definition', function() {\n      var ast, scopes;\n      ast = esprima.parse(\"x = 300;\\nx = 300;\");\n      scopes = escope.analyze(ast).scopes;\n      expect(scopes.map(function(scope) {\n        return scope.variables.map(function(variable) {\n          return variable.defs.map(function(def) {\n            return def.type;\n          });\n        });\n      })).to.be.eql([[]]);\n      return expect(scopes[0].implicit.variables.map(function(variable) {\n        return variable.name;\n      })).to.be.eql(['x']);\n    });\n    it('assignments global scope without definition eval', function() {\n      var ast, scopes;\n      ast = esprima.parse(\"function inner() {\\n    eval(str);\\n    x = 300;\\n}\");\n      scopes = escope.analyze(ast).scopes;\n      expect(scopes.map(function(scope) {\n        return scope.variables.map(function(variable) {\n          return variable.defs.map(function(def) {\n            return def.type;\n          });\n        });\n      })).to.be.eql([[['FunctionName']], [[]]]);\n      return expect(scopes[0].implicit.variables.map(function(variable) {\n        return variable.name;\n      })).to.be.eql([]);\n    });\n    it('assignment leaks', function() {\n      var ast, scopes;\n      ast = esprima.parse(\"function outer() {\\n    x = 20;\\n}\");\n      scopes = escope.analyze(ast).scopes;\n      expect(scopes.map(function(scope) {\n        return scope.variables.map(function(variable) {\n          return variable.name;\n        });\n      })).to.be.eql([['outer'], ['arguments']]);\n      return expect(scopes[0].implicit.variables.map(function(variable) {\n        return variable.name;\n      })).to.be.eql(['x']);\n    });\n    it('assignment doesn\\'t leak', function() {\n      var ast, scopes;\n      ast = esprima.parse(\"function outer() {\\n    function inner() {\\n        x = 20;\\n    }\\n    var x;\\n}\");\n      scopes = escope.analyze(ast).scopes;\n      expect(scopes.map(function(scope) {\n        return scope.variables.map(function(variable) {\n          return variable.name;\n        });\n      })).to.be.eql([['outer'], ['arguments', 'inner', 'x'], ['arguments']]);\n      return expect(scopes[0].implicit.variables.map(function(variable) {\n        return variable.name;\n      })).to.be.eql([]);\n    });\n    it('for-in-statement leaks', function() {\n      var ast, scopes;\n      ast = esprima.parse(\"function outer() {\\n    for (x in y) { }\\n}\");\n      scopes = escope.analyze(ast).scopes;\n      expect(scopes.map(function(scope) {\n        return scope.variables.map(function(variable) {\n          return variable.name;\n        });\n      })).to.be.eql([['outer'], ['arguments']]);\n      return expect(scopes[0].implicit.variables.map(function(variable) {\n        return variable.name;\n      })).to.be.eql(['x']);\n    });\n    return it('for-in-statement doesn\\'t leaks', function() {\n      var ast, scopes;\n      ast = esprima.parse(\"function outer() {\\n    function inner() {\\n        for (x in y) { }\\n    }\\n    var x;\\n}\");\n      scopes = escope.analyze(ast).scopes;\n      expect(scopes.map(function(scope) {\n        return scope.variables.map(function(variable) {\n          return variable.name;\n        });\n      })).to.be.eql([['outer'], ['arguments', 'inner', 'x'], ['arguments']]);\n      return expect(scopes[0].implicit.variables.map(function(variable) {\n        return variable.name;\n      })).to.be.eql([]);\n    });\n  });\n\n}).call(this);\n\n//# sourceMappingURL=data:application/json;base64,"]}