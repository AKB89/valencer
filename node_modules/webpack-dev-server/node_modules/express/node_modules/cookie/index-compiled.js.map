{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.parse = parse;\r\nexports.serialize = serialize;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar decode = decodeURIComponent;\r\nvar encode = encodeURIComponent;\r\n\r\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\r\n\r\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\r\n\r\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse(str, options) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('argument str must be a string');\r\n  }\r\n\r\n  var obj = {}\r\n  var opt = options || {};\r\n  var pairs = str.split(/; */);\r\n  var dec = opt.decode || decode;\r\n\r\n  pairs.forEach(function(pair) {\r\n    var eq_idx = pair.indexOf('=')\r\n\r\n    // skip things that don't look like key=value\r\n    if (eq_idx < 0) {\r\n      return;\r\n    }\r\n\r\n    var key = pair.substr(0, eq_idx).trim()\r\n    var val = pair.substr(++eq_idx, pair.length).trim();\r\n\r\n    // quoted values\r\n    if ('\"' == val[0]) {\r\n      val = val.slice(1, -1);\r\n    }\r\n\r\n    // only assign once\r\n    if (undefined == obj[key]) {\r\n      obj[key] = tryDecode(val, dec);\r\n    }\r\n  });\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction serialize(name, val, options) {\r\n  var opt = options || {};\r\n  var enc = opt.encode || encode;\r\n\r\n  if (!fieldContentRegExp.test(name)) {\r\n    throw new TypeError('argument name is invalid');\r\n  }\r\n\r\n  var value = enc(val);\r\n\r\n  if (value && !fieldContentRegExp.test(value)) {\r\n    throw new TypeError('argument val is invalid');\r\n  }\r\n\r\n  var pairs = [name + '=' + value];\r\n\r\n  if (null != opt.maxAge) {\r\n    var maxAge = opt.maxAge - 0;\r\n    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');\r\n    pairs.push('Max-Age=' + maxAge);\r\n  }\r\n\r\n  if (opt.domain) {\r\n    if (!fieldContentRegExp.test(opt.domain)) {\r\n      throw new TypeError('option domain is invalid');\r\n    }\r\n\r\n    pairs.push('Domain=' + opt.domain);\r\n  }\r\n\r\n  if (opt.path) {\r\n    if (!fieldContentRegExp.test(opt.path)) {\r\n      throw new TypeError('option path is invalid');\r\n    }\r\n\r\n    pairs.push('Path=' + opt.path);\r\n  }\r\n\r\n  if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());\r\n  if (opt.httpOnly) pairs.push('HttpOnly');\r\n  if (opt.secure) pairs.push('Secure');\r\n\r\n  return pairs.join('; ');\r\n}\r\n\r\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\r\n\r\nfunction tryDecode(str, decode) {\r\n  try {\r\n    return decode(str);\r\n  } catch (e) {\r\n    return str;\r\n  }\r\n}\r\n"]}