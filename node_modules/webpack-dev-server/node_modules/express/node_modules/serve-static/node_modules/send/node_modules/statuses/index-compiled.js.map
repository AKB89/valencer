{"version":3,"sources":["index.js"],"names":[],"mappings":";AACA,IAAI,QAAQ,QAAQ,cAAR,CAAZ;;AAEA,OAAO,OAAP,GAAiB,MAAjB;;;AAGA,OAAO,KAAP,GAAe,OAAO,IAAP,CAAY,KAAZ,EAAmB,GAAnB,CAAuB,UAAU,IAAV,EAAgB;AACpD,SAAO,EAAC,CAAC,IAAT;AACA,MAAI,MAAM,MAAM,IAAN,CAAV;AACA,SAAO,IAAP,IAAe,GAAf;AACA,SAAO,GAAP,IAAc,OAAO,IAAI,WAAJ,EAAP,IAA4B,IAA1C;AACA,SAAO,IAAP;AACD,CANc,CAAf;;;AASA,OAAO,QAAP,GAAkB;AAChB,OAAK,IADW;AAEhB,OAAK,IAFW;AAGhB,OAAK,IAHW;AAIhB,OAAK,IAJW;AAKhB,OAAK,IALW;AAMhB,OAAK,IANW;AAOhB,OAAK;AAPW,CAAlB;;;AAWA,OAAO,KAAP,GAAe;AACb,OAAK,IADQ;AAEb,OAAK,IAFQ;AAGb,OAAK;AAHQ,CAAf;;;AAOA,OAAO,KAAP,GAAe;AACb,OAAK,IADQ;AAEb,OAAK,IAFQ;AAGb,OAAK;AAHQ,CAAf;;AAMA,SAAS,MAAT,CAAgB,IAAhB,EAAsB;AACpB,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAI,CAAC,OAAO,IAAP,CAAL,EAAmB,MAAM,IAAI,KAAJ,CAAU,0BAA0B,IAApC,CAAN;AACnB,WAAO,IAAP;AACD;;AAED,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAI,SAAJ,CAAc,iCAAd,CAAN;AACD;;;AAGD,MAAI,IAAI,SAAS,IAAT,EAAe,EAAf,CAAR;AACA,MAAI,CAAC,MAAM,CAAN,CAAL,EAAe;AACb,QAAI,CAAC,OAAO,CAAP,CAAL,EAAgB,MAAM,IAAI,KAAJ,CAAU,0BAA0B,CAApC,CAAN;AAChB,WAAO,CAAP;AACD;;AAED,MAAI,OAAO,KAAK,WAAL,EAAP,CAAJ;AACA,MAAI,CAAC,CAAL,EAAQ,MAAM,IAAI,KAAJ,CAAU,8BAA8B,IAA9B,GAAqC,GAA/C,CAAN;AACR,SAAO,CAAP;AACD","file":"index-compiled.js","sourcesContent":["\nvar codes = require('./codes.json');\n\nmodule.exports = status;\n\n// [Integer...]\nstatus.codes = Object.keys(codes).map(function (code) {\n  code = ~~code;\n  var msg = codes[code];\n  status[code] = msg;\n  status[msg] = status[msg.toLowerCase()] = code;\n  return code;\n});\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true,\n};\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true,\n};\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true,\n};\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code);\n    return code;\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n);\n    return n;\n  }\n\n  n = status[code.toLowerCase()];\n  if (!n) throw new Error('invalid status message: \"' + code + '\"');\n  return n;\n}\n"]}