{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;;AAOA,OAAO,OAAP,GAAiB,WAAjB;;;;;;;;;;;AAWA,SAAS,WAAT,CAAsB,IAAtB,EAA4B,GAA5B,EAAiC;AAC/B,MAAI,QAAQ,IAAI,OAAJ,CAAY,GAAZ,CAAZ;;AAEA,MAAI,UAAU,CAAC,CAAf,EAAkB;AAChB,WAAO,CAAC,CAAR;AACD;;;AAGD,MAAI,MAAM,IAAI,KAAJ,CAAU,QAAQ,CAAlB,EAAqB,KAArB,CAA2B,GAA3B,CAAV;AACA,MAAI,SAAS,EAAb;;;AAGA,SAAO,IAAP,GAAc,IAAI,KAAJ,CAAU,CAAV,EAAa,KAAb,CAAd;;;AAGA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACnC,QAAI,QAAQ,IAAI,CAAJ,EAAO,KAAP,CAAa,GAAb,CAAZ;AACA,QAAI,QAAQ,SAAS,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAZ;AACA,QAAI,MAAM,SAAS,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAV;;;AAGA,QAAI,MAAM,KAAN,CAAJ,EAAkB;AAChB,cAAQ,OAAO,GAAf;AACA,YAAM,OAAO,CAAb;;AAED,KAJD,MAIO,IAAI,MAAM,GAAN,CAAJ,EAAgB;AACrB,cAAM,OAAO,CAAb;AACD;;;AAGD,QAAI,MAAM,OAAO,CAAjB,EAAoB;AAClB,YAAM,OAAO,CAAb;AACD;;;AAGD,QAAI,MAAM,KAAN,KAAgB,MAAM,GAAN,CAAhB,IAA8B,QAAQ,GAAtC,IAA6C,QAAQ,CAAzD,EAA4D;AAC1D;AACD;;;AAGD,WAAO,IAAP,CAAY;AACV,aAAO,KADG;AAEV,WAAK;AAFK,KAAZ;AAID;;AAED,SAAO,OAAO,MAAP,GAAgB,MAAhB,GAAyB,CAAC,CAAjC;AACD","file":"index-compiled.js","sourcesContent":["/*!\n * range-parser\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = rangeParser\n\n/**\n * Parse \"Range\" header `str` relative to the given file `size`.\n *\n * @param {Number} size\n * @param {String} str\n * @return {Array}\n * @public\n */\n\nfunction rangeParser (size, str) {\n  var index = str.indexOf('=')\n\n  if (index === -1) {\n    return -2\n  }\n\n  // split the range string\n  var arr = str.slice(index + 1).split(',')\n  var ranges = []\n\n  // add ranges type\n  ranges.type = str.slice(0, index)\n\n  // parse all ranges\n  for (var i = 0; i < arr.length; i++) {\n    var range = arr[i].split('-')\n    var start = parseInt(range[0], 10)\n    var end = parseInt(range[1], 10)\n\n    // -nnn\n    if (isNaN(start)) {\n      start = size - end\n      end = size - 1\n    // nnn-\n    } else if (isNaN(end)) {\n      end = size - 1\n    }\n\n    // limit last-byte-pos to current length\n    if (end > size - 1) {\n      end = size - 1\n    }\n\n    // invalid or unsatisifiable\n    if (isNaN(start) || isNaN(end) || start > end || start < 0) {\n      continue\n    }\n\n    // add range\n    ranges.push({\n      start: start,\n      end: end\n    })\n  }\n\n  return ranges.length ? ranges : -1\n}\n"]}